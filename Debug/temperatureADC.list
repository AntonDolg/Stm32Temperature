
temperatureADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a94  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08004c44  08004c44  00014c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d1c  08004d1c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08004d1c  08004d1c  00014d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d24  08004d24  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d24  08004d24  00014d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d28  08004d28  00014d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004d2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          000001e8  20000078  20000078  00020078  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000260  20000260  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b70c  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c3c  00000000  00000000  0002b7b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b78  00000000  00000000  0002d3f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a90  00000000  00000000  0002df68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024bb2  00000000  00000000  0002e9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d473  00000000  00000000  000535aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4637  00000000  00000000  00060a1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00145054  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003bec  00000000  00000000  001450a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004c2c 	.word	0x08004c2c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08004c2c 	.word	0x08004c2c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_uldivmod>:
 8000a3c:	b953      	cbnz	r3, 8000a54 <__aeabi_uldivmod+0x18>
 8000a3e:	b94a      	cbnz	r2, 8000a54 <__aeabi_uldivmod+0x18>
 8000a40:	2900      	cmp	r1, #0
 8000a42:	bf08      	it	eq
 8000a44:	2800      	cmpeq	r0, #0
 8000a46:	bf1c      	itt	ne
 8000a48:	f04f 31ff 	movne.w	r1, #4294967295
 8000a4c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a50:	f000 b974 	b.w	8000d3c <__aeabi_idiv0>
 8000a54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a5c:	f000 f806 	bl	8000a6c <__udivmoddi4>
 8000a60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a68:	b004      	add	sp, #16
 8000a6a:	4770      	bx	lr

08000a6c <__udivmoddi4>:
 8000a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a70:	9d08      	ldr	r5, [sp, #32]
 8000a72:	4604      	mov	r4, r0
 8000a74:	468e      	mov	lr, r1
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d14d      	bne.n	8000b16 <__udivmoddi4+0xaa>
 8000a7a:	428a      	cmp	r2, r1
 8000a7c:	4694      	mov	ip, r2
 8000a7e:	d969      	bls.n	8000b54 <__udivmoddi4+0xe8>
 8000a80:	fab2 f282 	clz	r2, r2
 8000a84:	b152      	cbz	r2, 8000a9c <__udivmoddi4+0x30>
 8000a86:	fa01 f302 	lsl.w	r3, r1, r2
 8000a8a:	f1c2 0120 	rsb	r1, r2, #32
 8000a8e:	fa20 f101 	lsr.w	r1, r0, r1
 8000a92:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a96:	ea41 0e03 	orr.w	lr, r1, r3
 8000a9a:	4094      	lsls	r4, r2
 8000a9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000aa0:	0c21      	lsrs	r1, r4, #16
 8000aa2:	fbbe f6f8 	udiv	r6, lr, r8
 8000aa6:	fa1f f78c 	uxth.w	r7, ip
 8000aaa:	fb08 e316 	mls	r3, r8, r6, lr
 8000aae:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ab2:	fb06 f107 	mul.w	r1, r6, r7
 8000ab6:	4299      	cmp	r1, r3
 8000ab8:	d90a      	bls.n	8000ad0 <__udivmoddi4+0x64>
 8000aba:	eb1c 0303 	adds.w	r3, ip, r3
 8000abe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ac2:	f080 811f 	bcs.w	8000d04 <__udivmoddi4+0x298>
 8000ac6:	4299      	cmp	r1, r3
 8000ac8:	f240 811c 	bls.w	8000d04 <__udivmoddi4+0x298>
 8000acc:	3e02      	subs	r6, #2
 8000ace:	4463      	add	r3, ip
 8000ad0:	1a5b      	subs	r3, r3, r1
 8000ad2:	b2a4      	uxth	r4, r4
 8000ad4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ad8:	fb08 3310 	mls	r3, r8, r0, r3
 8000adc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ae0:	fb00 f707 	mul.w	r7, r0, r7
 8000ae4:	42a7      	cmp	r7, r4
 8000ae6:	d90a      	bls.n	8000afe <__udivmoddi4+0x92>
 8000ae8:	eb1c 0404 	adds.w	r4, ip, r4
 8000aec:	f100 33ff 	add.w	r3, r0, #4294967295
 8000af0:	f080 810a 	bcs.w	8000d08 <__udivmoddi4+0x29c>
 8000af4:	42a7      	cmp	r7, r4
 8000af6:	f240 8107 	bls.w	8000d08 <__udivmoddi4+0x29c>
 8000afa:	4464      	add	r4, ip
 8000afc:	3802      	subs	r0, #2
 8000afe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b02:	1be4      	subs	r4, r4, r7
 8000b04:	2600      	movs	r6, #0
 8000b06:	b11d      	cbz	r5, 8000b10 <__udivmoddi4+0xa4>
 8000b08:	40d4      	lsrs	r4, r2
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b10:	4631      	mov	r1, r6
 8000b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b16:	428b      	cmp	r3, r1
 8000b18:	d909      	bls.n	8000b2e <__udivmoddi4+0xc2>
 8000b1a:	2d00      	cmp	r5, #0
 8000b1c:	f000 80ef 	beq.w	8000cfe <__udivmoddi4+0x292>
 8000b20:	2600      	movs	r6, #0
 8000b22:	e9c5 0100 	strd	r0, r1, [r5]
 8000b26:	4630      	mov	r0, r6
 8000b28:	4631      	mov	r1, r6
 8000b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2e:	fab3 f683 	clz	r6, r3
 8000b32:	2e00      	cmp	r6, #0
 8000b34:	d14a      	bne.n	8000bcc <__udivmoddi4+0x160>
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d302      	bcc.n	8000b40 <__udivmoddi4+0xd4>
 8000b3a:	4282      	cmp	r2, r0
 8000b3c:	f200 80f9 	bhi.w	8000d32 <__udivmoddi4+0x2c6>
 8000b40:	1a84      	subs	r4, r0, r2
 8000b42:	eb61 0303 	sbc.w	r3, r1, r3
 8000b46:	2001      	movs	r0, #1
 8000b48:	469e      	mov	lr, r3
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	d0e0      	beq.n	8000b10 <__udivmoddi4+0xa4>
 8000b4e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b52:	e7dd      	b.n	8000b10 <__udivmoddi4+0xa4>
 8000b54:	b902      	cbnz	r2, 8000b58 <__udivmoddi4+0xec>
 8000b56:	deff      	udf	#255	; 0xff
 8000b58:	fab2 f282 	clz	r2, r2
 8000b5c:	2a00      	cmp	r2, #0
 8000b5e:	f040 8092 	bne.w	8000c86 <__udivmoddi4+0x21a>
 8000b62:	eba1 010c 	sub.w	r1, r1, ip
 8000b66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b6a:	fa1f fe8c 	uxth.w	lr, ip
 8000b6e:	2601      	movs	r6, #1
 8000b70:	0c20      	lsrs	r0, r4, #16
 8000b72:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b76:	fb07 1113 	mls	r1, r7, r3, r1
 8000b7a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b7e:	fb0e f003 	mul.w	r0, lr, r3
 8000b82:	4288      	cmp	r0, r1
 8000b84:	d908      	bls.n	8000b98 <__udivmoddi4+0x12c>
 8000b86:	eb1c 0101 	adds.w	r1, ip, r1
 8000b8a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b8e:	d202      	bcs.n	8000b96 <__udivmoddi4+0x12a>
 8000b90:	4288      	cmp	r0, r1
 8000b92:	f200 80cb 	bhi.w	8000d2c <__udivmoddi4+0x2c0>
 8000b96:	4643      	mov	r3, r8
 8000b98:	1a09      	subs	r1, r1, r0
 8000b9a:	b2a4      	uxth	r4, r4
 8000b9c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ba0:	fb07 1110 	mls	r1, r7, r0, r1
 8000ba4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ba8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bac:	45a6      	cmp	lr, r4
 8000bae:	d908      	bls.n	8000bc2 <__udivmoddi4+0x156>
 8000bb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bb4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bb8:	d202      	bcs.n	8000bc0 <__udivmoddi4+0x154>
 8000bba:	45a6      	cmp	lr, r4
 8000bbc:	f200 80bb 	bhi.w	8000d36 <__udivmoddi4+0x2ca>
 8000bc0:	4608      	mov	r0, r1
 8000bc2:	eba4 040e 	sub.w	r4, r4, lr
 8000bc6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bca:	e79c      	b.n	8000b06 <__udivmoddi4+0x9a>
 8000bcc:	f1c6 0720 	rsb	r7, r6, #32
 8000bd0:	40b3      	lsls	r3, r6
 8000bd2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bd6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bda:	fa20 f407 	lsr.w	r4, r0, r7
 8000bde:	fa01 f306 	lsl.w	r3, r1, r6
 8000be2:	431c      	orrs	r4, r3
 8000be4:	40f9      	lsrs	r1, r7
 8000be6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bea:	fa00 f306 	lsl.w	r3, r0, r6
 8000bee:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bf2:	0c20      	lsrs	r0, r4, #16
 8000bf4:	fa1f fe8c 	uxth.w	lr, ip
 8000bf8:	fb09 1118 	mls	r1, r9, r8, r1
 8000bfc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c00:	fb08 f00e 	mul.w	r0, r8, lr
 8000c04:	4288      	cmp	r0, r1
 8000c06:	fa02 f206 	lsl.w	r2, r2, r6
 8000c0a:	d90b      	bls.n	8000c24 <__udivmoddi4+0x1b8>
 8000c0c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c10:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c14:	f080 8088 	bcs.w	8000d28 <__udivmoddi4+0x2bc>
 8000c18:	4288      	cmp	r0, r1
 8000c1a:	f240 8085 	bls.w	8000d28 <__udivmoddi4+0x2bc>
 8000c1e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c22:	4461      	add	r1, ip
 8000c24:	1a09      	subs	r1, r1, r0
 8000c26:	b2a4      	uxth	r4, r4
 8000c28:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c2c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c30:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c34:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c38:	458e      	cmp	lr, r1
 8000c3a:	d908      	bls.n	8000c4e <__udivmoddi4+0x1e2>
 8000c3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c40:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c44:	d26c      	bcs.n	8000d20 <__udivmoddi4+0x2b4>
 8000c46:	458e      	cmp	lr, r1
 8000c48:	d96a      	bls.n	8000d20 <__udivmoddi4+0x2b4>
 8000c4a:	3802      	subs	r0, #2
 8000c4c:	4461      	add	r1, ip
 8000c4e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c52:	fba0 9402 	umull	r9, r4, r0, r2
 8000c56:	eba1 010e 	sub.w	r1, r1, lr
 8000c5a:	42a1      	cmp	r1, r4
 8000c5c:	46c8      	mov	r8, r9
 8000c5e:	46a6      	mov	lr, r4
 8000c60:	d356      	bcc.n	8000d10 <__udivmoddi4+0x2a4>
 8000c62:	d053      	beq.n	8000d0c <__udivmoddi4+0x2a0>
 8000c64:	b15d      	cbz	r5, 8000c7e <__udivmoddi4+0x212>
 8000c66:	ebb3 0208 	subs.w	r2, r3, r8
 8000c6a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c6e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c72:	fa22 f306 	lsr.w	r3, r2, r6
 8000c76:	40f1      	lsrs	r1, r6
 8000c78:	431f      	orrs	r7, r3
 8000c7a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c7e:	2600      	movs	r6, #0
 8000c80:	4631      	mov	r1, r6
 8000c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c86:	f1c2 0320 	rsb	r3, r2, #32
 8000c8a:	40d8      	lsrs	r0, r3
 8000c8c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c90:	fa21 f303 	lsr.w	r3, r1, r3
 8000c94:	4091      	lsls	r1, r2
 8000c96:	4301      	orrs	r1, r0
 8000c98:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c9c:	fa1f fe8c 	uxth.w	lr, ip
 8000ca0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ca4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ca8:	0c0b      	lsrs	r3, r1, #16
 8000caa:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cae:	fb00 f60e 	mul.w	r6, r0, lr
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cb8:	d908      	bls.n	8000ccc <__udivmoddi4+0x260>
 8000cba:	eb1c 0303 	adds.w	r3, ip, r3
 8000cbe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cc2:	d22f      	bcs.n	8000d24 <__udivmoddi4+0x2b8>
 8000cc4:	429e      	cmp	r6, r3
 8000cc6:	d92d      	bls.n	8000d24 <__udivmoddi4+0x2b8>
 8000cc8:	3802      	subs	r0, #2
 8000cca:	4463      	add	r3, ip
 8000ccc:	1b9b      	subs	r3, r3, r6
 8000cce:	b289      	uxth	r1, r1
 8000cd0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cd4:	fb07 3316 	mls	r3, r7, r6, r3
 8000cd8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cdc:	fb06 f30e 	mul.w	r3, r6, lr
 8000ce0:	428b      	cmp	r3, r1
 8000ce2:	d908      	bls.n	8000cf6 <__udivmoddi4+0x28a>
 8000ce4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cec:	d216      	bcs.n	8000d1c <__udivmoddi4+0x2b0>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d914      	bls.n	8000d1c <__udivmoddi4+0x2b0>
 8000cf2:	3e02      	subs	r6, #2
 8000cf4:	4461      	add	r1, ip
 8000cf6:	1ac9      	subs	r1, r1, r3
 8000cf8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cfc:	e738      	b.n	8000b70 <__udivmoddi4+0x104>
 8000cfe:	462e      	mov	r6, r5
 8000d00:	4628      	mov	r0, r5
 8000d02:	e705      	b.n	8000b10 <__udivmoddi4+0xa4>
 8000d04:	4606      	mov	r6, r0
 8000d06:	e6e3      	b.n	8000ad0 <__udivmoddi4+0x64>
 8000d08:	4618      	mov	r0, r3
 8000d0a:	e6f8      	b.n	8000afe <__udivmoddi4+0x92>
 8000d0c:	454b      	cmp	r3, r9
 8000d0e:	d2a9      	bcs.n	8000c64 <__udivmoddi4+0x1f8>
 8000d10:	ebb9 0802 	subs.w	r8, r9, r2
 8000d14:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d18:	3801      	subs	r0, #1
 8000d1a:	e7a3      	b.n	8000c64 <__udivmoddi4+0x1f8>
 8000d1c:	4646      	mov	r6, r8
 8000d1e:	e7ea      	b.n	8000cf6 <__udivmoddi4+0x28a>
 8000d20:	4620      	mov	r0, r4
 8000d22:	e794      	b.n	8000c4e <__udivmoddi4+0x1e2>
 8000d24:	4640      	mov	r0, r8
 8000d26:	e7d1      	b.n	8000ccc <__udivmoddi4+0x260>
 8000d28:	46d0      	mov	r8, sl
 8000d2a:	e77b      	b.n	8000c24 <__udivmoddi4+0x1b8>
 8000d2c:	3b02      	subs	r3, #2
 8000d2e:	4461      	add	r1, ip
 8000d30:	e732      	b.n	8000b98 <__udivmoddi4+0x12c>
 8000d32:	4630      	mov	r0, r6
 8000d34:	e709      	b.n	8000b4a <__udivmoddi4+0xde>
 8000d36:	4464      	add	r4, ip
 8000d38:	3802      	subs	r0, #2
 8000d3a:	e742      	b.n	8000bc2 <__udivmoddi4+0x156>

08000d3c <__aeabi_idiv0>:
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop

08000d40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 8000d44:	f002 ff34 	bl	8003bb0 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d48:	f000 fb82 	bl	8001450 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d4c:	f000 f838 	bl	8000dc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d50:	f000 f970 	bl	8001034 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d54:	f000 f94e 	bl	8000ff4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000d58:	f000 f89c 	bl	8000e94 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000d5c:	f000 f8fc 	bl	8000f58 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)Adc.Raw, 2);
 8000d60:	2202      	movs	r2, #2
 8000d62:	4912      	ldr	r1, [pc, #72]	; (8000dac <main+0x6c>)
 8000d64:	4812      	ldr	r0, [pc, #72]	; (8000db0 <main+0x70>)
 8000d66:	f000 fd39 	bl	80017dc <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim3);
 8000d6a:	4812      	ldr	r0, [pc, #72]	; (8000db4 <main+0x74>)
 8000d6c:	f002 fa14 	bl	8003198 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (Flg.ADCCMPLT){
 8000d70:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <main+0x78>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d011      	beq.n	8000d9c <main+0x5c>
		  Adc.IntSensTmp = TMPSENSOR_getTemperature(Adc.Raw[1], Adc.Raw[0]);
 8000d78:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <main+0x6c>)
 8000d7a:	885b      	ldrh	r3, [r3, #2]
 8000d7c:	4a0b      	ldr	r2, [pc, #44]	; (8000dac <main+0x6c>)
 8000d7e:	8812      	ldrh	r2, [r2, #0]
 8000d80:	4611      	mov	r1, r2
 8000d82:	4618      	mov	r0, r3
 8000d84:	f000 fac8 	bl	8001318 <TMPSENSOR_getTemperature>
 8000d88:	eeb0 7a40 	vmov.f32	s14, s0
 8000d8c:	eef0 7a60 	vmov.f32	s15, s1
 8000d90:	4b06      	ldr	r3, [pc, #24]	; (8000dac <main+0x6c>)
 8000d92:	ed83 7b02 	vstr	d7, [r3, #8]
		  Flg.ADCCMPLT = 0;
 8000d96:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <main+0x78>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	701a      	strb	r2, [r3, #0]

    /* USER CODE BEGIN 3 */
//	  printf("Hello count = %d \n", count);
//	  count++;
//	  HAL_Delay(250);
	  printf("temp = %f\n", Adc.IntSensTmp);
 8000d9c:	4b03      	ldr	r3, [pc, #12]	; (8000dac <main+0x6c>)
 8000d9e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000da2:	4806      	ldr	r0, [pc, #24]	; (8000dbc <main+0x7c>)
 8000da4:	f003 f940 	bl	8004028 <iprintf>
	  if (Flg.ADCCMPLT){
 8000da8:	e7e2      	b.n	8000d70 <main+0x30>
 8000daa:	bf00      	nop
 8000dac:	20000098 	.word	0x20000098
 8000db0:	200000ac 	.word	0x200000ac
 8000db4:	20000154 	.word	0x20000154
 8000db8:	200000a8 	.word	0x200000a8
 8000dbc:	08004c44 	.word	0x08004c44

08000dc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b094      	sub	sp, #80	; 0x50
 8000dc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dc6:	f107 0320 	add.w	r3, r7, #32
 8000dca:	2230      	movs	r2, #48	; 0x30
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f003 f88d 	bl	8003eee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dd4:	f107 030c 	add.w	r3, r7, #12
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000de4:	2300      	movs	r3, #0
 8000de6:	60bb      	str	r3, [r7, #8]
 8000de8:	4b28      	ldr	r3, [pc, #160]	; (8000e8c <SystemClock_Config+0xcc>)
 8000dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dec:	4a27      	ldr	r2, [pc, #156]	; (8000e8c <SystemClock_Config+0xcc>)
 8000dee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df2:	6413      	str	r3, [r2, #64]	; 0x40
 8000df4:	4b25      	ldr	r3, [pc, #148]	; (8000e8c <SystemClock_Config+0xcc>)
 8000df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dfc:	60bb      	str	r3, [r7, #8]
 8000dfe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e00:	2300      	movs	r3, #0
 8000e02:	607b      	str	r3, [r7, #4]
 8000e04:	4b22      	ldr	r3, [pc, #136]	; (8000e90 <SystemClock_Config+0xd0>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e0c:	4a20      	ldr	r2, [pc, #128]	; (8000e90 <SystemClock_Config+0xd0>)
 8000e0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e12:	6013      	str	r3, [r2, #0]
 8000e14:	4b1e      	ldr	r3, [pc, #120]	; (8000e90 <SystemClock_Config+0xd0>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e1c:	607b      	str	r3, [r7, #4]
 8000e1e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e20:	2301      	movs	r3, #1
 8000e22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e28:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e2e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000e34:	2319      	movs	r3, #25
 8000e36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000e38:	23a8      	movs	r3, #168	; 0xa8
 8000e3a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e40:	2304      	movs	r3, #4
 8000e42:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e44:	f107 0320 	add.w	r3, r7, #32
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f001 fd31 	bl	80028b0 <HAL_RCC_OscConfig>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000e54:	f000 f92c 	bl	80010b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e58:	230f      	movs	r3, #15
 8000e5a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e60:	2300      	movs	r3, #0
 8000e62:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e68:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e6e:	f107 030c 	add.w	r3, r7, #12
 8000e72:	2102      	movs	r1, #2
 8000e74:	4618      	mov	r0, r3
 8000e76:	f001 ff93 	bl	8002da0 <HAL_RCC_ClockConfig>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000e80:	f000 f916 	bl	80010b0 <Error_Handler>
  }
}
 8000e84:	bf00      	nop
 8000e86:	3750      	adds	r7, #80	; 0x50
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40023800 	.word	0x40023800
 8000e90:	40007000 	.word	0x40007000

08000e94 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ea6:	4b29      	ldr	r3, [pc, #164]	; (8000f4c <MX_ADC1_Init+0xb8>)
 8000ea8:	4a29      	ldr	r2, [pc, #164]	; (8000f50 <MX_ADC1_Init+0xbc>)
 8000eaa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000eac:	4b27      	ldr	r3, [pc, #156]	; (8000f4c <MX_ADC1_Init+0xb8>)
 8000eae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000eb2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000eb4:	4b25      	ldr	r3, [pc, #148]	; (8000f4c <MX_ADC1_Init+0xb8>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000eba:	4b24      	ldr	r3, [pc, #144]	; (8000f4c <MX_ADC1_Init+0xb8>)
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ec0:	4b22      	ldr	r3, [pc, #136]	; (8000f4c <MX_ADC1_Init+0xb8>)
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ec6:	4b21      	ldr	r3, [pc, #132]	; (8000f4c <MX_ADC1_Init+0xb8>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000ece:	4b1f      	ldr	r3, [pc, #124]	; (8000f4c <MX_ADC1_Init+0xb8>)
 8000ed0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ed4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000ed6:	4b1d      	ldr	r3, [pc, #116]	; (8000f4c <MX_ADC1_Init+0xb8>)
 8000ed8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000edc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ede:	4b1b      	ldr	r3, [pc, #108]	; (8000f4c <MX_ADC1_Init+0xb8>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000ee4:	4b19      	ldr	r3, [pc, #100]	; (8000f4c <MX_ADC1_Init+0xb8>)
 8000ee6:	2202      	movs	r2, #2
 8000ee8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000eea:	4b18      	ldr	r3, [pc, #96]	; (8000f4c <MX_ADC1_Init+0xb8>)
 8000eec:	2201      	movs	r2, #1
 8000eee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ef2:	4b16      	ldr	r3, [pc, #88]	; (8000f4c <MX_ADC1_Init+0xb8>)
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ef8:	4814      	ldr	r0, [pc, #80]	; (8000f4c <MX_ADC1_Init+0xb8>)
 8000efa:	f000 fb1b 	bl	8001534 <HAL_ADC_Init>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000f04:	f000 f8d4 	bl	80010b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000f08:	2311      	movs	r3, #17
 8000f0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000f10:	2307      	movs	r3, #7
 8000f12:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f14:	463b      	mov	r3, r7
 8000f16:	4619      	mov	r1, r3
 8000f18:	480c      	ldr	r0, [pc, #48]	; (8000f4c <MX_ADC1_Init+0xb8>)
 8000f1a:	f000 fd8d 	bl	8001a38 <HAL_ADC_ConfigChannel>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000f24:	f000 f8c4 	bl	80010b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000f28:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <MX_ADC1_Init+0xc0>)
 8000f2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f30:	463b      	mov	r3, r7
 8000f32:	4619      	mov	r1, r3
 8000f34:	4805      	ldr	r0, [pc, #20]	; (8000f4c <MX_ADC1_Init+0xb8>)
 8000f36:	f000 fd7f 	bl	8001a38 <HAL_ADC_ConfigChannel>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000f40:	f000 f8b6 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f44:	bf00      	nop
 8000f46:	3710      	adds	r7, #16
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	200000ac 	.word	0x200000ac
 8000f50:	40012000 	.word	0x40012000
 8000f54:	10000012 	.word	0x10000012

08000f58 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f5e:	f107 0308 	add.w	r3, r7, #8
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
 8000f6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f6c:	463b      	mov	r3, r7
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f74:	4b1d      	ldr	r3, [pc, #116]	; (8000fec <MX_TIM3_Init+0x94>)
 8000f76:	4a1e      	ldr	r2, [pc, #120]	; (8000ff0 <MX_TIM3_Init+0x98>)
 8000f78:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 840-1;
 8000f7a:	4b1c      	ldr	r3, [pc, #112]	; (8000fec <MX_TIM3_Init+0x94>)
 8000f7c:	f240 3247 	movw	r2, #839	; 0x347
 8000f80:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f82:	4b1a      	ldr	r3, [pc, #104]	; (8000fec <MX_TIM3_Init+0x94>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8000f88:	4b18      	ldr	r3, [pc, #96]	; (8000fec <MX_TIM3_Init+0x94>)
 8000f8a:	f242 720f 	movw	r2, #9999	; 0x270f
 8000f8e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f90:	4b16      	ldr	r3, [pc, #88]	; (8000fec <MX_TIM3_Init+0x94>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f96:	4b15      	ldr	r3, [pc, #84]	; (8000fec <MX_TIM3_Init+0x94>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f9c:	4813      	ldr	r0, [pc, #76]	; (8000fec <MX_TIM3_Init+0x94>)
 8000f9e:	f002 f8ab 	bl	80030f8 <HAL_TIM_Base_Init>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000fa8:	f000 f882 	bl	80010b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fb0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000fb2:	f107 0308 	add.w	r3, r7, #8
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	480c      	ldr	r0, [pc, #48]	; (8000fec <MX_TIM3_Init+0x94>)
 8000fba:	f002 f955 	bl	8003268 <HAL_TIM_ConfigClockSource>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000fc4:	f000 f874 	bl	80010b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000fc8:	2320      	movs	r3, #32
 8000fca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fd0:	463b      	mov	r3, r7
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4805      	ldr	r0, [pc, #20]	; (8000fec <MX_TIM3_Init+0x94>)
 8000fd6:	f002 fb49 	bl	800366c <HAL_TIMEx_MasterConfigSynchronization>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000fe0:	f000 f866 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000fe4:	bf00      	nop
 8000fe6:	3718      	adds	r7, #24
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000154 	.word	0x20000154
 8000ff0:	40000400 	.word	0x40000400

08000ff4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	607b      	str	r3, [r7, #4]
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <MX_DMA_Init+0x3c>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	4a0b      	ldr	r2, [pc, #44]	; (8001030 <MX_DMA_Init+0x3c>)
 8001004:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001008:	6313      	str	r3, [r2, #48]	; 0x30
 800100a:	4b09      	ldr	r3, [pc, #36]	; (8001030 <MX_DMA_Init+0x3c>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001016:	2200      	movs	r2, #0
 8001018:	2100      	movs	r1, #0
 800101a:	2038      	movs	r0, #56	; 0x38
 800101c:	f001 f8a1 	bl	8002162 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001020:	2038      	movs	r0, #56	; 0x38
 8001022:	f001 f8ba 	bl	800219a <HAL_NVIC_EnableIRQ>

}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40023800 	.word	0x40023800

08001034 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	607b      	str	r3, [r7, #4]
 800103e:	4b10      	ldr	r3, [pc, #64]	; (8001080 <MX_GPIO_Init+0x4c>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	4a0f      	ldr	r2, [pc, #60]	; (8001080 <MX_GPIO_Init+0x4c>)
 8001044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001048:	6313      	str	r3, [r2, #48]	; 0x30
 800104a:	4b0d      	ldr	r3, [pc, #52]	; (8001080 <MX_GPIO_Init+0x4c>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	603b      	str	r3, [r7, #0]
 800105a:	4b09      	ldr	r3, [pc, #36]	; (8001080 <MX_GPIO_Init+0x4c>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	4a08      	ldr	r2, [pc, #32]	; (8001080 <MX_GPIO_Init+0x4c>)
 8001060:	f043 0301 	orr.w	r3, r3, #1
 8001064:	6313      	str	r3, [r2, #48]	; 0x30
 8001066:	4b06      	ldr	r3, [pc, #24]	; (8001080 <MX_GPIO_Init+0x4c>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	603b      	str	r3, [r7, #0]
 8001070:	683b      	ldr	r3, [r7, #0]

}
 8001072:	bf00      	nop
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	40023800 	.word	0x40023800

08001084 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1){
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a05      	ldr	r2, [pc, #20]	; (80010a8 <HAL_ADC_ConvCpltCallback+0x24>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d102      	bne.n	800109c <HAL_ADC_ConvCpltCallback+0x18>
		Flg.ADCCMPLT = 255;
 8001096:	4b05      	ldr	r3, [pc, #20]	; (80010ac <HAL_ADC_ConvCpltCallback+0x28>)
 8001098:	22ff      	movs	r2, #255	; 0xff
 800109a:	701a      	strb	r2, [r3, #0]
	}
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	40012000 	.word	0x40012000
 80010ac:	200000a8 	.word	0x200000a8

080010b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b4:	b672      	cpsid	i
}
 80010b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010b8:	e7fe      	b.n	80010b8 <Error_Handler+0x8>
	...

080010bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	607b      	str	r3, [r7, #4]
 80010c6:	4b10      	ldr	r3, [pc, #64]	; (8001108 <HAL_MspInit+0x4c>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ca:	4a0f      	ldr	r2, [pc, #60]	; (8001108 <HAL_MspInit+0x4c>)
 80010cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010d0:	6453      	str	r3, [r2, #68]	; 0x44
 80010d2:	4b0d      	ldr	r3, [pc, #52]	; (8001108 <HAL_MspInit+0x4c>)
 80010d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010da:	607b      	str	r3, [r7, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	603b      	str	r3, [r7, #0]
 80010e2:	4b09      	ldr	r3, [pc, #36]	; (8001108 <HAL_MspInit+0x4c>)
 80010e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e6:	4a08      	ldr	r2, [pc, #32]	; (8001108 <HAL_MspInit+0x4c>)
 80010e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ec:	6413      	str	r3, [r2, #64]	; 0x40
 80010ee:	4b06      	ldr	r3, [pc, #24]	; (8001108 <HAL_MspInit+0x4c>)
 80010f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f6:	603b      	str	r3, [r7, #0]
 80010f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	40023800 	.word	0x40023800

0800110c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a26      	ldr	r2, [pc, #152]	; (80011b4 <HAL_ADC_MspInit+0xa8>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d145      	bne.n	80011aa <HAL_ADC_MspInit+0x9e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	4b25      	ldr	r3, [pc, #148]	; (80011b8 <HAL_ADC_MspInit+0xac>)
 8001124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001126:	4a24      	ldr	r2, [pc, #144]	; (80011b8 <HAL_ADC_MspInit+0xac>)
 8001128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800112c:	6453      	str	r3, [r2, #68]	; 0x44
 800112e:	4b22      	ldr	r3, [pc, #136]	; (80011b8 <HAL_ADC_MspInit+0xac>)
 8001130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800113a:	4b20      	ldr	r3, [pc, #128]	; (80011bc <HAL_ADC_MspInit+0xb0>)
 800113c:	4a20      	ldr	r2, [pc, #128]	; (80011c0 <HAL_ADC_MspInit+0xb4>)
 800113e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001140:	4b1e      	ldr	r3, [pc, #120]	; (80011bc <HAL_ADC_MspInit+0xb0>)
 8001142:	2200      	movs	r2, #0
 8001144:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001146:	4b1d      	ldr	r3, [pc, #116]	; (80011bc <HAL_ADC_MspInit+0xb0>)
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800114c:	4b1b      	ldr	r3, [pc, #108]	; (80011bc <HAL_ADC_MspInit+0xb0>)
 800114e:	2200      	movs	r2, #0
 8001150:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001152:	4b1a      	ldr	r3, [pc, #104]	; (80011bc <HAL_ADC_MspInit+0xb0>)
 8001154:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001158:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800115a:	4b18      	ldr	r3, [pc, #96]	; (80011bc <HAL_ADC_MspInit+0xb0>)
 800115c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001160:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001162:	4b16      	ldr	r3, [pc, #88]	; (80011bc <HAL_ADC_MspInit+0xb0>)
 8001164:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001168:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800116a:	4b14      	ldr	r3, [pc, #80]	; (80011bc <HAL_ADC_MspInit+0xb0>)
 800116c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001170:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001172:	4b12      	ldr	r3, [pc, #72]	; (80011bc <HAL_ADC_MspInit+0xb0>)
 8001174:	2200      	movs	r2, #0
 8001176:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001178:	4b10      	ldr	r3, [pc, #64]	; (80011bc <HAL_ADC_MspInit+0xb0>)
 800117a:	2200      	movs	r2, #0
 800117c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800117e:	480f      	ldr	r0, [pc, #60]	; (80011bc <HAL_ADC_MspInit+0xb0>)
 8001180:	f001 f826 	bl	80021d0 <HAL_DMA_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <HAL_ADC_MspInit+0x82>
    {
      Error_Handler();
 800118a:	f7ff ff91 	bl	80010b0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a0a      	ldr	r2, [pc, #40]	; (80011bc <HAL_ADC_MspInit+0xb0>)
 8001192:	639a      	str	r2, [r3, #56]	; 0x38
 8001194:	4a09      	ldr	r2, [pc, #36]	; (80011bc <HAL_ADC_MspInit+0xb0>)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800119a:	2200      	movs	r2, #0
 800119c:	2100      	movs	r1, #0
 800119e:	2012      	movs	r0, #18
 80011a0:	f000 ffdf 	bl	8002162 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80011a4:	2012      	movs	r0, #18
 80011a6:	f000 fff8 	bl	800219a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80011aa:	bf00      	nop
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40012000 	.word	0x40012000
 80011b8:	40023800 	.word	0x40023800
 80011bc:	200000f4 	.word	0x200000f4
 80011c0:	40026410 	.word	0x40026410

080011c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a0b      	ldr	r2, [pc, #44]	; (8001200 <HAL_TIM_Base_MspInit+0x3c>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d10d      	bne.n	80011f2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	4b0a      	ldr	r3, [pc, #40]	; (8001204 <HAL_TIM_Base_MspInit+0x40>)
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	4a09      	ldr	r2, [pc, #36]	; (8001204 <HAL_TIM_Base_MspInit+0x40>)
 80011e0:	f043 0302 	orr.w	r3, r3, #2
 80011e4:	6413      	str	r3, [r2, #64]	; 0x40
 80011e6:	4b07      	ldr	r3, [pc, #28]	; (8001204 <HAL_TIM_Base_MspInit+0x40>)
 80011e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80011f2:	bf00      	nop
 80011f4:	3714      	adds	r7, #20
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	40000400 	.word	0x40000400
 8001204:	40023800 	.word	0x40023800

08001208 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800120c:	e7fe      	b.n	800120c <NMI_Handler+0x4>

0800120e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800120e:	b480      	push	{r7}
 8001210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001212:	e7fe      	b.n	8001212 <HardFault_Handler+0x4>

08001214 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001218:	e7fe      	b.n	8001218 <MemManage_Handler+0x4>

0800121a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800121a:	b480      	push	{r7}
 800121c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800121e:	e7fe      	b.n	800121e <BusFault_Handler+0x4>

08001220 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001224:	e7fe      	b.n	8001224 <UsageFault_Handler+0x4>

08001226 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001226:	b480      	push	{r7}
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001254:	f000 f94e 	bl	80014f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001258:	bf00      	nop
 800125a:	bd80      	pop	{r7, pc}

0800125c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001260:	4802      	ldr	r0, [pc, #8]	; (800126c <ADC_IRQHandler+0x10>)
 8001262:	f000 f9aa 	bl	80015ba <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	200000ac 	.word	0x200000ac

08001270 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001274:	4802      	ldr	r0, [pc, #8]	; (8001280 <DMA2_Stream0_IRQHandler+0x10>)
 8001276:	f001 f8b1 	bl	80023dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	200000f4 	.word	0x200000f4

08001284 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800128c:	4a14      	ldr	r2, [pc, #80]	; (80012e0 <_sbrk+0x5c>)
 800128e:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <_sbrk+0x60>)
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001298:	4b13      	ldr	r3, [pc, #76]	; (80012e8 <_sbrk+0x64>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d102      	bne.n	80012a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012a0:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <_sbrk+0x64>)
 80012a2:	4a12      	ldr	r2, [pc, #72]	; (80012ec <_sbrk+0x68>)
 80012a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012a6:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <_sbrk+0x64>)
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4413      	add	r3, r2
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d207      	bcs.n	80012c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012b4:	f002 fcf8 	bl	8003ca8 <__errno>
 80012b8:	4603      	mov	r3, r0
 80012ba:	220c      	movs	r2, #12
 80012bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012be:	f04f 33ff 	mov.w	r3, #4294967295
 80012c2:	e009      	b.n	80012d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012c4:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <_sbrk+0x64>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012ca:	4b07      	ldr	r3, [pc, #28]	; (80012e8 <_sbrk+0x64>)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4413      	add	r3, r2
 80012d2:	4a05      	ldr	r2, [pc, #20]	; (80012e8 <_sbrk+0x64>)
 80012d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012d6:	68fb      	ldr	r3, [r7, #12]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3718      	adds	r7, #24
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20030000 	.word	0x20030000
 80012e4:	00000400 	.word	0x00000400
 80012e8:	2000019c 	.word	0x2000019c
 80012ec:	20000260 	.word	0x20000260

080012f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012f4:	4b06      	ldr	r3, [pc, #24]	; (8001310 <SystemInit+0x20>)
 80012f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012fa:	4a05      	ldr	r2, [pc, #20]	; (8001310 <SystemInit+0x20>)
 80012fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001300:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	e000ed00 	.word	0xe000ed00
 8001314:	00000000 	.word	0x00000000

08001318 <TMPSENSOR_getTemperature>:
  * @brief Calculate temperature (tested on STM32F401, other MCU may have different constants!)
  * @note If IntRef not use, set it [ex.: #define TMPSENSOR_USE_INTREF 0]
  * @param Temperature sensor's ADC 16-bit value, Internal Reference ADC 16-bit value (if use)
  * @retval Internal sensor temperature
  */
double TMPSENSOR_getTemperature(uint16_t adc_sensor, uint16_t adc_intref){
 8001318:	b580      	push	{r7, lr}
 800131a:	b088      	sub	sp, #32
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	460a      	mov	r2, r1
 8001322:	80fb      	strh	r3, [r7, #6]
 8001324:	4613      	mov	r3, r2
 8001326:	80bb      	strh	r3, [r7, #4]

#if(TMPSENSOR_USE_INTREF)

	double intref_vol = (TMPSENSOR_ADCMAX*TMPSENSOR_ADCVREFINT)/adc_intref;
 8001328:	88bb      	ldrh	r3, [r7, #4]
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff f90a 	bl	8000544 <__aeabi_i2d>
 8001330:	4602      	mov	r2, r0
 8001332:	460b      	mov	r3, r1
 8001334:	a12b      	add	r1, pc, #172	; (adr r1, 80013e4 <TMPSENSOR_getTemperature+0xcc>)
 8001336:	e9d1 0100 	ldrd	r0, r1, [r1]
 800133a:	f7ff fa97 	bl	800086c <__aeabi_ddiv>
 800133e:	4602      	mov	r2, r0
 8001340:	460b      	mov	r3, r1
 8001342:	e9c7 2306 	strd	r2, r3, [r7, #24]

#else
	double intref_vol = TMPSENSOR_ADCREFVOL;
#endif

	double sensor_vol = adc_sensor * intref_vol/TMPSENSOR_ADCMAX;
 8001346:	88fb      	ldrh	r3, [r7, #6]
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff f8fb 	bl	8000544 <__aeabi_i2d>
 800134e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001352:	f7ff f961 	bl	8000618 <__aeabi_dmul>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	4610      	mov	r0, r2
 800135c:	4619      	mov	r1, r3
 800135e:	a323      	add	r3, pc, #140	; (adr r3, 80013ec <TMPSENSOR_getTemperature+0xd4>)
 8001360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001364:	f7ff fa82 	bl	800086c <__aeabi_ddiv>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	e9c7 2304 	strd	r2, r3, [r7, #16]

	double sensor_tmp = (sensor_vol - TMPSENSOR_V25) *1000.0/TMPSENSOR_AVGSLOPE + 25.0;
 8001370:	a320      	add	r3, pc, #128	; (adr r3, 80013f4 <TMPSENSOR_getTemperature+0xdc>)
 8001372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001376:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800137a:	f7fe ff95 	bl	80002a8 <__aeabi_dsub>
 800137e:	4602      	mov	r2, r0
 8001380:	460b      	mov	r3, r1
 8001382:	4610      	mov	r0, r2
 8001384:	4619      	mov	r1, r3
 8001386:	f04f 0200 	mov.w	r2, #0
 800138a:	4b13      	ldr	r3, [pc, #76]	; (80013d8 <TMPSENSOR_getTemperature+0xc0>)
 800138c:	f7ff f944 	bl	8000618 <__aeabi_dmul>
 8001390:	4602      	mov	r2, r0
 8001392:	460b      	mov	r3, r1
 8001394:	4610      	mov	r0, r2
 8001396:	4619      	mov	r1, r3
 8001398:	f04f 0200 	mov.w	r2, #0
 800139c:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <TMPSENSOR_getTemperature+0xc4>)
 800139e:	f7ff fa65 	bl	800086c <__aeabi_ddiv>
 80013a2:	4602      	mov	r2, r0
 80013a4:	460b      	mov	r3, r1
 80013a6:	4610      	mov	r0, r2
 80013a8:	4619      	mov	r1, r3
 80013aa:	f04f 0200 	mov.w	r2, #0
 80013ae:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <TMPSENSOR_getTemperature+0xc8>)
 80013b0:	f7fe ff7c 	bl	80002ac <__adddf3>
 80013b4:	4602      	mov	r2, r0
 80013b6:	460b      	mov	r3, r1
 80013b8:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return sensor_tmp;
 80013bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80013c0:	ec43 2b17 	vmov	d7, r2, r3
}
 80013c4:	eeb0 0a47 	vmov.f32	s0, s14
 80013c8:	eef0 0a67 	vmov.f32	s1, s15
 80013cc:	3720      	adds	r7, #32
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	f3af 8000 	nop.w
 80013d8:	408f4000 	.word	0x408f4000
 80013dc:	40040000 	.word	0x40040000
 80013e0:	40390000 	.word	0x40390000
 80013e4:	33333333 	.word	0x33333333
 80013e8:	40b35af3 	.word	0x40b35af3
 80013ec:	00000000 	.word	0x00000000
 80013f0:	40affe00 	.word	0x40affe00
 80013f4:	851eb852 	.word	0x851eb852
 80013f8:	3fe851eb 	.word	0x3fe851eb

080013fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80013fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001434 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001400:	480d      	ldr	r0, [pc, #52]	; (8001438 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001402:	490e      	ldr	r1, [pc, #56]	; (800143c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001404:	4a0e      	ldr	r2, [pc, #56]	; (8001440 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001406:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001408:	e002      	b.n	8001410 <LoopCopyDataInit>

0800140a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800140a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800140c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800140e:	3304      	adds	r3, #4

08001410 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001410:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001412:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001414:	d3f9      	bcc.n	800140a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001416:	4a0b      	ldr	r2, [pc, #44]	; (8001444 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001418:	4c0b      	ldr	r4, [pc, #44]	; (8001448 <LoopFillZerobss+0x26>)
  movs r3, #0
 800141a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800141c:	e001      	b.n	8001422 <LoopFillZerobss>

0800141e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800141e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001420:	3204      	adds	r2, #4

08001422 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001422:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001424:	d3fb      	bcc.n	800141e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001426:	f7ff ff63 	bl	80012f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800142a:	f002 fd39 	bl	8003ea0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800142e:	f7ff fc87 	bl	8000d40 <main>
  bx  lr    
 8001432:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001434:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001438:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800143c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001440:	08004d2c 	.word	0x08004d2c
  ldr r2, =_sbss
 8001444:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001448:	20000260 	.word	0x20000260

0800144c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800144c:	e7fe      	b.n	800144c <CAN1_RX0_IRQHandler>
	...

08001450 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001454:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <HAL_Init+0x40>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a0d      	ldr	r2, [pc, #52]	; (8001490 <HAL_Init+0x40>)
 800145a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800145e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001460:	4b0b      	ldr	r3, [pc, #44]	; (8001490 <HAL_Init+0x40>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a0a      	ldr	r2, [pc, #40]	; (8001490 <HAL_Init+0x40>)
 8001466:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800146a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800146c:	4b08      	ldr	r3, [pc, #32]	; (8001490 <HAL_Init+0x40>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a07      	ldr	r2, [pc, #28]	; (8001490 <HAL_Init+0x40>)
 8001472:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001476:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001478:	2003      	movs	r0, #3
 800147a:	f000 fe67 	bl	800214c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800147e:	200f      	movs	r0, #15
 8001480:	f000 f808 	bl	8001494 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001484:	f7ff fe1a 	bl	80010bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40023c00 	.word	0x40023c00

08001494 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800149c:	4b12      	ldr	r3, [pc, #72]	; (80014e8 <HAL_InitTick+0x54>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	4b12      	ldr	r3, [pc, #72]	; (80014ec <HAL_InitTick+0x58>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	4619      	mov	r1, r3
 80014a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80014b2:	4618      	mov	r0, r3
 80014b4:	f000 fe7f 	bl	80021b6 <HAL_SYSTICK_Config>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e00e      	b.n	80014e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2b0f      	cmp	r3, #15
 80014c6:	d80a      	bhi.n	80014de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014c8:	2200      	movs	r2, #0
 80014ca:	6879      	ldr	r1, [r7, #4]
 80014cc:	f04f 30ff 	mov.w	r0, #4294967295
 80014d0:	f000 fe47 	bl	8002162 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014d4:	4a06      	ldr	r2, [pc, #24]	; (80014f0 <HAL_InitTick+0x5c>)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014da:	2300      	movs	r3, #0
 80014dc:	e000      	b.n	80014e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20000000 	.word	0x20000000
 80014ec:	20000008 	.word	0x20000008
 80014f0:	20000004 	.word	0x20000004

080014f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014f8:	4b06      	ldr	r3, [pc, #24]	; (8001514 <HAL_IncTick+0x20>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	461a      	mov	r2, r3
 80014fe:	4b06      	ldr	r3, [pc, #24]	; (8001518 <HAL_IncTick+0x24>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4413      	add	r3, r2
 8001504:	4a04      	ldr	r2, [pc, #16]	; (8001518 <HAL_IncTick+0x24>)
 8001506:	6013      	str	r3, [r2, #0]
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	20000008 	.word	0x20000008
 8001518:	200001a0 	.word	0x200001a0

0800151c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  return uwTick;
 8001520:	4b03      	ldr	r3, [pc, #12]	; (8001530 <HAL_GetTick+0x14>)
 8001522:	681b      	ldr	r3, [r3, #0]
}
 8001524:	4618      	mov	r0, r3
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	200001a0 	.word	0x200001a0

08001534 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800153c:	2300      	movs	r3, #0
 800153e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d101      	bne.n	800154a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e033      	b.n	80015b2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	2b00      	cmp	r3, #0
 8001550:	d109      	bne.n	8001566 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f7ff fdda 	bl	800110c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156a:	f003 0310 	and.w	r3, r3, #16
 800156e:	2b00      	cmp	r3, #0
 8001570:	d118      	bne.n	80015a4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001576:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800157a:	f023 0302 	bic.w	r3, r3, #2
 800157e:	f043 0202 	orr.w	r2, r3, #2
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f000 fb88 	bl	8001c9c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2200      	movs	r2, #0
 8001590:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	f023 0303 	bic.w	r3, r3, #3
 800159a:	f043 0201 	orr.w	r2, r3, #1
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	641a      	str	r2, [r3, #64]	; 0x40
 80015a2:	e001      	b.n	80015a8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2200      	movs	r2, #0
 80015ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80015b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b086      	sub	sp, #24
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80015c2:	2300      	movs	r3, #0
 80015c4:	617b      	str	r3, [r7, #20]
 80015c6:	2300      	movs	r3, #0
 80015c8:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	f003 0320 	and.w	r3, r3, #32
 80015e8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d049      	beq.n	8001684 <HAL_ADC_IRQHandler+0xca>
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d046      	beq.n	8001684 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	f003 0310 	and.w	r3, r3, #16
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d105      	bne.n	800160e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d12b      	bne.n	8001674 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001620:	2b00      	cmp	r3, #0
 8001622:	d127      	bne.n	8001674 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800162a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800162e:	2b00      	cmp	r3, #0
 8001630:	d006      	beq.n	8001640 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800163c:	2b00      	cmp	r3, #0
 800163e:	d119      	bne.n	8001674 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	685a      	ldr	r2, [r3, #4]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f022 0220 	bic.w	r2, r2, #32
 800164e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001654:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001660:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d105      	bne.n	8001674 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166c:	f043 0201 	orr.w	r2, r3, #1
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f7ff fd05 	bl	8001084 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f06f 0212 	mvn.w	r2, #18
 8001682:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f003 0304 	and.w	r3, r3, #4
 800168a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001692:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d057      	beq.n	800174a <HAL_ADC_IRQHandler+0x190>
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d054      	beq.n	800174a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a4:	f003 0310 	and.w	r3, r3, #16
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d105      	bne.n	80016b8 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d139      	bne.n	800173a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016cc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d006      	beq.n	80016e2 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d12b      	bne.n	800173a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d124      	bne.n	800173a <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d11d      	bne.n	800173a <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001702:	2b00      	cmp	r3, #0
 8001704:	d119      	bne.n	800173a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	685a      	ldr	r2, [r3, #4]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001714:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800172a:	2b00      	cmp	r3, #0
 800172c:	d105      	bne.n	800173a <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	f043 0201 	orr.w	r2, r3, #1
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f000 fc2c 	bl	8001f98 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f06f 020c 	mvn.w	r2, #12
 8001748:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	f003 0301 	and.w	r3, r3, #1
 8001750:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001758:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d017      	beq.n	8001790 <HAL_ADC_IRQHandler+0x1d6>
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d014      	beq.n	8001790 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0301 	and.w	r3, r3, #1
 8001770:	2b01      	cmp	r3, #1
 8001772:	d10d      	bne.n	8001790 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001778:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f000 f945 	bl	8001a10 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f06f 0201 	mvn.w	r2, #1
 800178e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f003 0320 	and.w	r3, r3, #32
 8001796:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800179e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d015      	beq.n	80017d2 <HAL_ADC_IRQHandler+0x218>
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d012      	beq.n	80017d2 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b0:	f043 0202 	orr.w	r2, r3, #2
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f06f 0220 	mvn.w	r2, #32
 80017c0:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f000 f92e 	bl	8001a24 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f06f 0220 	mvn.w	r2, #32
 80017d0:	601a      	str	r2, [r3, #0]
  }
}
 80017d2:	bf00      	nop
 80017d4:	3718      	adds	r7, #24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
	...

080017dc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b086      	sub	sp, #24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80017e8:	2300      	movs	r3, #0
 80017ea:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d101      	bne.n	80017fa <HAL_ADC_Start_DMA+0x1e>
 80017f6:	2302      	movs	r3, #2
 80017f8:	e0e9      	b.n	80019ce <HAL_ADC_Start_DMA+0x1f2>
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2201      	movs	r2, #1
 80017fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	f003 0301 	and.w	r3, r3, #1
 800180c:	2b01      	cmp	r3, #1
 800180e:	d018      	beq.n	8001842 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	689a      	ldr	r2, [r3, #8]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f042 0201 	orr.w	r2, r2, #1
 800181e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001820:	4b6d      	ldr	r3, [pc, #436]	; (80019d8 <HAL_ADC_Start_DMA+0x1fc>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a6d      	ldr	r2, [pc, #436]	; (80019dc <HAL_ADC_Start_DMA+0x200>)
 8001826:	fba2 2303 	umull	r2, r3, r2, r3
 800182a:	0c9a      	lsrs	r2, r3, #18
 800182c:	4613      	mov	r3, r2
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	4413      	add	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001834:	e002      	b.n	800183c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	3b01      	subs	r3, #1
 800183a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1f9      	bne.n	8001836 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800184c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001850:	d107      	bne.n	8001862 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	689a      	ldr	r2, [r3, #8]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001860:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	2b01      	cmp	r3, #1
 800186e:	f040 80a1 	bne.w	80019b4 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001876:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800187a:	f023 0301 	bic.w	r3, r3, #1
 800187e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001890:	2b00      	cmp	r3, #0
 8001892:	d007      	beq.n	80018a4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001898:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800189c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018b0:	d106      	bne.n	80018c0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b6:	f023 0206 	bic.w	r2, r3, #6
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	645a      	str	r2, [r3, #68]	; 0x44
 80018be:	e002      	b.n	80018c6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2200      	movs	r2, #0
 80018c4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018ce:	4b44      	ldr	r3, [pc, #272]	; (80019e0 <HAL_ADC_Start_DMA+0x204>)
 80018d0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018d6:	4a43      	ldr	r2, [pc, #268]	; (80019e4 <HAL_ADC_Start_DMA+0x208>)
 80018d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018de:	4a42      	ldr	r2, [pc, #264]	; (80019e8 <HAL_ADC_Start_DMA+0x20c>)
 80018e0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018e6:	4a41      	ldr	r2, [pc, #260]	; (80019ec <HAL_ADC_Start_DMA+0x210>)
 80018e8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80018f2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	685a      	ldr	r2, [r3, #4]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001902:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	689a      	ldr	r2, [r3, #8]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001912:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	334c      	adds	r3, #76	; 0x4c
 800191e:	4619      	mov	r1, r3
 8001920:	68ba      	ldr	r2, [r7, #8]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f000 fd02 	bl	800232c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f003 031f 	and.w	r3, r3, #31
 8001930:	2b00      	cmp	r3, #0
 8001932:	d12a      	bne.n	800198a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a2d      	ldr	r2, [pc, #180]	; (80019f0 <HAL_ADC_Start_DMA+0x214>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d015      	beq.n	800196a <HAL_ADC_Start_DMA+0x18e>
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a2c      	ldr	r2, [pc, #176]	; (80019f4 <HAL_ADC_Start_DMA+0x218>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d105      	bne.n	8001954 <HAL_ADC_Start_DMA+0x178>
 8001948:	4b25      	ldr	r3, [pc, #148]	; (80019e0 <HAL_ADC_Start_DMA+0x204>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 031f 	and.w	r3, r3, #31
 8001950:	2b00      	cmp	r3, #0
 8001952:	d00a      	beq.n	800196a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a27      	ldr	r2, [pc, #156]	; (80019f8 <HAL_ADC_Start_DMA+0x21c>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d136      	bne.n	80019cc <HAL_ADC_Start_DMA+0x1f0>
 800195e:	4b20      	ldr	r3, [pc, #128]	; (80019e0 <HAL_ADC_Start_DMA+0x204>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f003 0310 	and.w	r3, r3, #16
 8001966:	2b00      	cmp	r3, #0
 8001968:	d130      	bne.n	80019cc <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d129      	bne.n	80019cc <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	689a      	ldr	r2, [r3, #8]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	e020      	b.n	80019cc <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a18      	ldr	r2, [pc, #96]	; (80019f0 <HAL_ADC_Start_DMA+0x214>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d11b      	bne.n	80019cc <HAL_ADC_Start_DMA+0x1f0>
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d114      	bne.n	80019cc <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	689a      	ldr	r2, [r3, #8]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80019b0:	609a      	str	r2, [r3, #8]
 80019b2:	e00b      	b.n	80019cc <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b8:	f043 0210 	orr.w	r2, r3, #16
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c4:	f043 0201 	orr.w	r2, r3, #1
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3718      	adds	r7, #24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20000000 	.word	0x20000000
 80019dc:	431bde83 	.word	0x431bde83
 80019e0:	40012300 	.word	0x40012300
 80019e4:	08001e95 	.word	0x08001e95
 80019e8:	08001f4f 	.word	0x08001f4f
 80019ec:	08001f6b 	.word	0x08001f6b
 80019f0:	40012000 	.word	0x40012000
 80019f4:	40012100 	.word	0x40012100
 80019f8:	40012200 	.word	0x40012200

080019fc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001a42:	2300      	movs	r3, #0
 8001a44:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d101      	bne.n	8001a54 <HAL_ADC_ConfigChannel+0x1c>
 8001a50:	2302      	movs	r3, #2
 8001a52:	e113      	b.n	8001c7c <HAL_ADC_ConfigChannel+0x244>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2b09      	cmp	r3, #9
 8001a62:	d925      	bls.n	8001ab0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	68d9      	ldr	r1, [r3, #12]
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	461a      	mov	r2, r3
 8001a72:	4613      	mov	r3, r2
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	4413      	add	r3, r2
 8001a78:	3b1e      	subs	r3, #30
 8001a7a:	2207      	movs	r2, #7
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	43da      	mvns	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	400a      	ands	r2, r1
 8001a88:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	68d9      	ldr	r1, [r3, #12]
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	4403      	add	r3, r0
 8001aa2:	3b1e      	subs	r3, #30
 8001aa4:	409a      	lsls	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	60da      	str	r2, [r3, #12]
 8001aae:	e022      	b.n	8001af6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6919      	ldr	r1, [r3, #16]
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	461a      	mov	r2, r3
 8001abe:	4613      	mov	r3, r2
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	4413      	add	r3, r2
 8001ac4:	2207      	movs	r2, #7
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	43da      	mvns	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	400a      	ands	r2, r1
 8001ad2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6919      	ldr	r1, [r3, #16]
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	689a      	ldr	r2, [r3, #8]
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	4403      	add	r3, r0
 8001aec:	409a      	lsls	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	430a      	orrs	r2, r1
 8001af4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2b06      	cmp	r3, #6
 8001afc:	d824      	bhi.n	8001b48 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685a      	ldr	r2, [r3, #4]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	4413      	add	r3, r2
 8001b0e:	3b05      	subs	r3, #5
 8001b10:	221f      	movs	r2, #31
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	43da      	mvns	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	400a      	ands	r2, r1
 8001b1e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	4613      	mov	r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	4413      	add	r3, r2
 8001b38:	3b05      	subs	r3, #5
 8001b3a:	fa00 f203 	lsl.w	r2, r0, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	430a      	orrs	r2, r1
 8001b44:	635a      	str	r2, [r3, #52]	; 0x34
 8001b46:	e04c      	b.n	8001be2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	2b0c      	cmp	r3, #12
 8001b4e:	d824      	bhi.n	8001b9a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685a      	ldr	r2, [r3, #4]
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	4413      	add	r3, r2
 8001b60:	3b23      	subs	r3, #35	; 0x23
 8001b62:	221f      	movs	r2, #31
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	43da      	mvns	r2, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	400a      	ands	r2, r1
 8001b70:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	4618      	mov	r0, r3
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685a      	ldr	r2, [r3, #4]
 8001b84:	4613      	mov	r3, r2
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	4413      	add	r3, r2
 8001b8a:	3b23      	subs	r3, #35	; 0x23
 8001b8c:	fa00 f203 	lsl.w	r2, r0, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	430a      	orrs	r2, r1
 8001b96:	631a      	str	r2, [r3, #48]	; 0x30
 8001b98:	e023      	b.n	8001be2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685a      	ldr	r2, [r3, #4]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	4413      	add	r3, r2
 8001baa:	3b41      	subs	r3, #65	; 0x41
 8001bac:	221f      	movs	r2, #31
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	43da      	mvns	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	400a      	ands	r2, r1
 8001bba:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	4618      	mov	r0, r3
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685a      	ldr	r2, [r3, #4]
 8001bce:	4613      	mov	r3, r2
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	4413      	add	r3, r2
 8001bd4:	3b41      	subs	r3, #65	; 0x41
 8001bd6:	fa00 f203 	lsl.w	r2, r0, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	430a      	orrs	r2, r1
 8001be0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001be2:	4b29      	ldr	r3, [pc, #164]	; (8001c88 <HAL_ADC_ConfigChannel+0x250>)
 8001be4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a28      	ldr	r2, [pc, #160]	; (8001c8c <HAL_ADC_ConfigChannel+0x254>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d10f      	bne.n	8001c10 <HAL_ADC_ConfigChannel+0x1d8>
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2b12      	cmp	r3, #18
 8001bf6:	d10b      	bne.n	8001c10 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a1d      	ldr	r2, [pc, #116]	; (8001c8c <HAL_ADC_ConfigChannel+0x254>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d12b      	bne.n	8001c72 <HAL_ADC_ConfigChannel+0x23a>
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a1c      	ldr	r2, [pc, #112]	; (8001c90 <HAL_ADC_ConfigChannel+0x258>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d003      	beq.n	8001c2c <HAL_ADC_ConfigChannel+0x1f4>
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2b11      	cmp	r3, #17
 8001c2a:	d122      	bne.n	8001c72 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a11      	ldr	r2, [pc, #68]	; (8001c90 <HAL_ADC_ConfigChannel+0x258>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d111      	bne.n	8001c72 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c4e:	4b11      	ldr	r3, [pc, #68]	; (8001c94 <HAL_ADC_ConfigChannel+0x25c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a11      	ldr	r2, [pc, #68]	; (8001c98 <HAL_ADC_ConfigChannel+0x260>)
 8001c54:	fba2 2303 	umull	r2, r3, r2, r3
 8001c58:	0c9a      	lsrs	r2, r3, #18
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	4413      	add	r3, r2
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c64:	e002      	b.n	8001c6c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d1f9      	bne.n	8001c66 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3714      	adds	r7, #20
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	40012300 	.word	0x40012300
 8001c8c:	40012000 	.word	0x40012000
 8001c90:	10000012 	.word	0x10000012
 8001c94:	20000000 	.word	0x20000000
 8001c98:	431bde83 	.word	0x431bde83

08001c9c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ca4:	4b79      	ldr	r3, [pc, #484]	; (8001e8c <ADC_Init+0x1f0>)
 8001ca6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	685a      	ldr	r2, [r3, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	685a      	ldr	r2, [r3, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cd0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	6859      	ldr	r1, [r3, #4]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	691b      	ldr	r3, [r3, #16]
 8001cdc:	021a      	lsls	r2, r3, #8
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	685a      	ldr	r2, [r3, #4]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001cf4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	6859      	ldr	r1, [r3, #4]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689a      	ldr	r2, [r3, #8]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	430a      	orrs	r2, r1
 8001d06:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	689a      	ldr	r2, [r3, #8]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d16:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6899      	ldr	r1, [r3, #8]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	68da      	ldr	r2, [r3, #12]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	430a      	orrs	r2, r1
 8001d28:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d2e:	4a58      	ldr	r2, [pc, #352]	; (8001e90 <ADC_Init+0x1f4>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d022      	beq.n	8001d7a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	689a      	ldr	r2, [r3, #8]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d42:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	6899      	ldr	r1, [r3, #8]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	430a      	orrs	r2, r1
 8001d54:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	689a      	ldr	r2, [r3, #8]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d64:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	6899      	ldr	r1, [r3, #8]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	430a      	orrs	r2, r1
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	e00f      	b.n	8001d9a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	689a      	ldr	r2, [r3, #8]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d88:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	689a      	ldr	r2, [r3, #8]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d98:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f022 0202 	bic.w	r2, r2, #2
 8001da8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	6899      	ldr	r1, [r3, #8]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	7e1b      	ldrb	r3, [r3, #24]
 8001db4:	005a      	lsls	r2, r3, #1
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d01b      	beq.n	8001e00 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	685a      	ldr	r2, [r3, #4]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001dd6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	685a      	ldr	r2, [r3, #4]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001de6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6859      	ldr	r1, [r3, #4]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df2:	3b01      	subs	r3, #1
 8001df4:	035a      	lsls	r2, r3, #13
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	605a      	str	r2, [r3, #4]
 8001dfe:	e007      	b.n	8001e10 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	685a      	ldr	r2, [r3, #4]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e0e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001e1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	69db      	ldr	r3, [r3, #28]
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	051a      	lsls	r2, r3, #20
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	430a      	orrs	r2, r1
 8001e34:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	689a      	ldr	r2, [r3, #8]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	6899      	ldr	r1, [r3, #8]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e52:	025a      	lsls	r2, r3, #9
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	689a      	ldr	r2, [r3, #8]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e6a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6899      	ldr	r1, [r3, #8]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	695b      	ldr	r3, [r3, #20]
 8001e76:	029a      	lsls	r2, r3, #10
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	609a      	str	r2, [r3, #8]
}
 8001e80:	bf00      	nop
 8001e82:	3714      	adds	r7, #20
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	40012300 	.word	0x40012300
 8001e90:	0f000001 	.word	0x0f000001

08001e94 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d13c      	bne.n	8001f28 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d12b      	bne.n	8001f20 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d127      	bne.n	8001f20 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d006      	beq.n	8001eec <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d119      	bne.n	8001f20 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	685a      	ldr	r2, [r3, #4]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f022 0220 	bic.w	r2, r2, #32
 8001efa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f00:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d105      	bne.n	8001f20 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f18:	f043 0201 	orr.w	r2, r3, #1
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f20:	68f8      	ldr	r0, [r7, #12]
 8001f22:	f7ff f8af 	bl	8001084 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001f26:	e00e      	b.n	8001f46 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2c:	f003 0310 	and.w	r3, r3, #16
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d003      	beq.n	8001f3c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001f34:	68f8      	ldr	r0, [r7, #12]
 8001f36:	f7ff fd75 	bl	8001a24 <HAL_ADC_ErrorCallback>
}
 8001f3a:	e004      	b.n	8001f46 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	4798      	blx	r3
}
 8001f46:	bf00      	nop
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b084      	sub	sp, #16
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f5a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001f5c:	68f8      	ldr	r0, [r7, #12]
 8001f5e:	f7ff fd4d 	bl	80019fc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f62:	bf00      	nop
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b084      	sub	sp, #16
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f76:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2240      	movs	r2, #64	; 0x40
 8001f7c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f82:	f043 0204 	orr.w	r2, r3, #4
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001f8a:	68f8      	ldr	r0, [r7, #12]
 8001f8c:	f7ff fd4a 	bl	8001a24 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f90:	bf00      	nop
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f003 0307 	and.w	r3, r3, #7
 8001fba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fbc:	4b0c      	ldr	r3, [pc, #48]	; (8001ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fc2:	68ba      	ldr	r2, [r7, #8]
 8001fc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fc8:	4013      	ands	r3, r2
 8001fca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fde:	4a04      	ldr	r2, [pc, #16]	; (8001ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	60d3      	str	r3, [r2, #12]
}
 8001fe4:	bf00      	nop
 8001fe6:	3714      	adds	r7, #20
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	e000ed00 	.word	0xe000ed00

08001ff4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ff8:	4b04      	ldr	r3, [pc, #16]	; (800200c <__NVIC_GetPriorityGrouping+0x18>)
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	0a1b      	lsrs	r3, r3, #8
 8001ffe:	f003 0307 	and.w	r3, r3, #7
}
 8002002:	4618      	mov	r0, r3
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	e000ed00 	.word	0xe000ed00

08002010 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	4603      	mov	r3, r0
 8002018:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800201a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201e:	2b00      	cmp	r3, #0
 8002020:	db0b      	blt.n	800203a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002022:	79fb      	ldrb	r3, [r7, #7]
 8002024:	f003 021f 	and.w	r2, r3, #31
 8002028:	4907      	ldr	r1, [pc, #28]	; (8002048 <__NVIC_EnableIRQ+0x38>)
 800202a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202e:	095b      	lsrs	r3, r3, #5
 8002030:	2001      	movs	r0, #1
 8002032:	fa00 f202 	lsl.w	r2, r0, r2
 8002036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800203a:	bf00      	nop
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	e000e100 	.word	0xe000e100

0800204c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	4603      	mov	r3, r0
 8002054:	6039      	str	r1, [r7, #0]
 8002056:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205c:	2b00      	cmp	r3, #0
 800205e:	db0a      	blt.n	8002076 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	b2da      	uxtb	r2, r3
 8002064:	490c      	ldr	r1, [pc, #48]	; (8002098 <__NVIC_SetPriority+0x4c>)
 8002066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206a:	0112      	lsls	r2, r2, #4
 800206c:	b2d2      	uxtb	r2, r2
 800206e:	440b      	add	r3, r1
 8002070:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002074:	e00a      	b.n	800208c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	b2da      	uxtb	r2, r3
 800207a:	4908      	ldr	r1, [pc, #32]	; (800209c <__NVIC_SetPriority+0x50>)
 800207c:	79fb      	ldrb	r3, [r7, #7]
 800207e:	f003 030f 	and.w	r3, r3, #15
 8002082:	3b04      	subs	r3, #4
 8002084:	0112      	lsls	r2, r2, #4
 8002086:	b2d2      	uxtb	r2, r2
 8002088:	440b      	add	r3, r1
 800208a:	761a      	strb	r2, [r3, #24]
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr
 8002098:	e000e100 	.word	0xe000e100
 800209c:	e000ed00 	.word	0xe000ed00

080020a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b089      	sub	sp, #36	; 0x24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f003 0307 	and.w	r3, r3, #7
 80020b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	f1c3 0307 	rsb	r3, r3, #7
 80020ba:	2b04      	cmp	r3, #4
 80020bc:	bf28      	it	cs
 80020be:	2304      	movcs	r3, #4
 80020c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	3304      	adds	r3, #4
 80020c6:	2b06      	cmp	r3, #6
 80020c8:	d902      	bls.n	80020d0 <NVIC_EncodePriority+0x30>
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	3b03      	subs	r3, #3
 80020ce:	e000      	b.n	80020d2 <NVIC_EncodePriority+0x32>
 80020d0:	2300      	movs	r3, #0
 80020d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d4:	f04f 32ff 	mov.w	r2, #4294967295
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	43da      	mvns	r2, r3
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	401a      	ands	r2, r3
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020e8:	f04f 31ff 	mov.w	r1, #4294967295
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	fa01 f303 	lsl.w	r3, r1, r3
 80020f2:	43d9      	mvns	r1, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f8:	4313      	orrs	r3, r2
         );
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3724      	adds	r7, #36	; 0x24
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
	...

08002108 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	3b01      	subs	r3, #1
 8002114:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002118:	d301      	bcc.n	800211e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800211a:	2301      	movs	r3, #1
 800211c:	e00f      	b.n	800213e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800211e:	4a0a      	ldr	r2, [pc, #40]	; (8002148 <SysTick_Config+0x40>)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	3b01      	subs	r3, #1
 8002124:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002126:	210f      	movs	r1, #15
 8002128:	f04f 30ff 	mov.w	r0, #4294967295
 800212c:	f7ff ff8e 	bl	800204c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002130:	4b05      	ldr	r3, [pc, #20]	; (8002148 <SysTick_Config+0x40>)
 8002132:	2200      	movs	r2, #0
 8002134:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002136:	4b04      	ldr	r3, [pc, #16]	; (8002148 <SysTick_Config+0x40>)
 8002138:	2207      	movs	r2, #7
 800213a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	e000e010 	.word	0xe000e010

0800214c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f7ff ff29 	bl	8001fac <__NVIC_SetPriorityGrouping>
}
 800215a:	bf00      	nop
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002162:	b580      	push	{r7, lr}
 8002164:	b086      	sub	sp, #24
 8002166:	af00      	add	r7, sp, #0
 8002168:	4603      	mov	r3, r0
 800216a:	60b9      	str	r1, [r7, #8]
 800216c:	607a      	str	r2, [r7, #4]
 800216e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002170:	2300      	movs	r3, #0
 8002172:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002174:	f7ff ff3e 	bl	8001ff4 <__NVIC_GetPriorityGrouping>
 8002178:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	68b9      	ldr	r1, [r7, #8]
 800217e:	6978      	ldr	r0, [r7, #20]
 8002180:	f7ff ff8e 	bl	80020a0 <NVIC_EncodePriority>
 8002184:	4602      	mov	r2, r0
 8002186:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800218a:	4611      	mov	r1, r2
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff ff5d 	bl	800204c <__NVIC_SetPriority>
}
 8002192:	bf00      	nop
 8002194:	3718      	adds	r7, #24
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b082      	sub	sp, #8
 800219e:	af00      	add	r7, sp, #0
 80021a0:	4603      	mov	r3, r0
 80021a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff ff31 	bl	8002010 <__NVIC_EnableIRQ>
}
 80021ae:	bf00      	nop
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b082      	sub	sp, #8
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f7ff ffa2 	bl	8002108 <SysTick_Config>
 80021c4:	4603      	mov	r3, r0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
	...

080021d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80021d8:	2300      	movs	r3, #0
 80021da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80021dc:	f7ff f99e 	bl	800151c <HAL_GetTick>
 80021e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d101      	bne.n	80021ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e099      	b.n	8002320 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2202      	movs	r2, #2
 80021f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f022 0201 	bic.w	r2, r2, #1
 800220a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800220c:	e00f      	b.n	800222e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800220e:	f7ff f985 	bl	800151c <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	2b05      	cmp	r3, #5
 800221a:	d908      	bls.n	800222e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2220      	movs	r2, #32
 8002220:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2203      	movs	r2, #3
 8002226:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e078      	b.n	8002320 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0301 	and.w	r3, r3, #1
 8002238:	2b00      	cmp	r3, #0
 800223a:	d1e8      	bne.n	800220e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002244:	697a      	ldr	r2, [r7, #20]
 8002246:	4b38      	ldr	r3, [pc, #224]	; (8002328 <HAL_DMA_Init+0x158>)
 8002248:	4013      	ands	r3, r2
 800224a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685a      	ldr	r2, [r3, #4]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800225a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002266:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002272:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800227a:	697a      	ldr	r2, [r7, #20]
 800227c:	4313      	orrs	r3, r2
 800227e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002284:	2b04      	cmp	r3, #4
 8002286:	d107      	bne.n	8002298 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002290:	4313      	orrs	r3, r2
 8002292:	697a      	ldr	r2, [r7, #20]
 8002294:	4313      	orrs	r3, r2
 8002296:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	697a      	ldr	r2, [r7, #20]
 800229e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	695b      	ldr	r3, [r3, #20]
 80022a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	f023 0307 	bic.w	r3, r3, #7
 80022ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b4:	697a      	ldr	r2, [r7, #20]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022be:	2b04      	cmp	r3, #4
 80022c0:	d117      	bne.n	80022f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00e      	beq.n	80022f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f000 fa6f 	bl	80027b8 <DMA_CheckFifoParam>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d008      	beq.n	80022f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2240      	movs	r2, #64	; 0x40
 80022e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80022ee:	2301      	movs	r3, #1
 80022f0:	e016      	b.n	8002320 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	697a      	ldr	r2, [r7, #20]
 80022f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f000 fa26 	bl	800274c <DMA_CalcBaseAndBitshift>
 8002300:	4603      	mov	r3, r0
 8002302:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002308:	223f      	movs	r2, #63	; 0x3f
 800230a:	409a      	lsls	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2201      	movs	r2, #1
 800231a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800231e:	2300      	movs	r3, #0
}
 8002320:	4618      	mov	r0, r3
 8002322:	3718      	adds	r7, #24
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	f010803f 	.word	0xf010803f

0800232c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
 8002338:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800233a:	2300      	movs	r3, #0
 800233c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002342:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800234a:	2b01      	cmp	r3, #1
 800234c:	d101      	bne.n	8002352 <HAL_DMA_Start_IT+0x26>
 800234e:	2302      	movs	r3, #2
 8002350:	e040      	b.n	80023d4 <HAL_DMA_Start_IT+0xa8>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2201      	movs	r2, #1
 8002356:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b01      	cmp	r3, #1
 8002364:	d12f      	bne.n	80023c6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2202      	movs	r2, #2
 800236a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2200      	movs	r2, #0
 8002372:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	68b9      	ldr	r1, [r7, #8]
 800237a:	68f8      	ldr	r0, [r7, #12]
 800237c:	f000 f9b8 	bl	80026f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002384:	223f      	movs	r2, #63	; 0x3f
 8002386:	409a      	lsls	r2, r3
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f042 0216 	orr.w	r2, r2, #22
 800239a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d007      	beq.n	80023b4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f042 0208 	orr.w	r2, r2, #8
 80023b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f042 0201 	orr.w	r2, r2, #1
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	e005      	b.n	80023d2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80023ce:	2302      	movs	r3, #2
 80023d0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80023d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3718      	adds	r7, #24
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80023e4:	2300      	movs	r3, #0
 80023e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80023e8:	4b8e      	ldr	r3, [pc, #568]	; (8002624 <HAL_DMA_IRQHandler+0x248>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a8e      	ldr	r2, [pc, #568]	; (8002628 <HAL_DMA_IRQHandler+0x24c>)
 80023ee:	fba2 2303 	umull	r2, r3, r2, r3
 80023f2:	0a9b      	lsrs	r3, r3, #10
 80023f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002406:	2208      	movs	r2, #8
 8002408:	409a      	lsls	r2, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	4013      	ands	r3, r2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d01a      	beq.n	8002448 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0304 	and.w	r3, r3, #4
 800241c:	2b00      	cmp	r3, #0
 800241e:	d013      	beq.n	8002448 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f022 0204 	bic.w	r2, r2, #4
 800242e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002434:	2208      	movs	r2, #8
 8002436:	409a      	lsls	r2, r3
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002440:	f043 0201 	orr.w	r2, r3, #1
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800244c:	2201      	movs	r2, #1
 800244e:	409a      	lsls	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	4013      	ands	r3, r2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d012      	beq.n	800247e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	695b      	ldr	r3, [r3, #20]
 800245e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00b      	beq.n	800247e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800246a:	2201      	movs	r2, #1
 800246c:	409a      	lsls	r2, r3
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002476:	f043 0202 	orr.w	r2, r3, #2
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002482:	2204      	movs	r2, #4
 8002484:	409a      	lsls	r2, r3
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	4013      	ands	r3, r2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d012      	beq.n	80024b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d00b      	beq.n	80024b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a0:	2204      	movs	r2, #4
 80024a2:	409a      	lsls	r2, r3
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ac:	f043 0204 	orr.w	r2, r3, #4
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b8:	2210      	movs	r2, #16
 80024ba:	409a      	lsls	r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	4013      	ands	r3, r2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d043      	beq.n	800254c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0308 	and.w	r3, r3, #8
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d03c      	beq.n	800254c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d6:	2210      	movs	r2, #16
 80024d8:	409a      	lsls	r2, r3
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d018      	beq.n	800251e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d108      	bne.n	800250c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d024      	beq.n	800254c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	4798      	blx	r3
 800250a:	e01f      	b.n	800254c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002510:	2b00      	cmp	r3, #0
 8002512:	d01b      	beq.n	800254c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	4798      	blx	r3
 800251c:	e016      	b.n	800254c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002528:	2b00      	cmp	r3, #0
 800252a:	d107      	bne.n	800253c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 0208 	bic.w	r2, r2, #8
 800253a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002540:	2b00      	cmp	r3, #0
 8002542:	d003      	beq.n	800254c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002550:	2220      	movs	r2, #32
 8002552:	409a      	lsls	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	4013      	ands	r3, r2
 8002558:	2b00      	cmp	r3, #0
 800255a:	f000 808f 	beq.w	800267c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0310 	and.w	r3, r3, #16
 8002568:	2b00      	cmp	r3, #0
 800256a:	f000 8087 	beq.w	800267c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002572:	2220      	movs	r2, #32
 8002574:	409a      	lsls	r2, r3
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b05      	cmp	r3, #5
 8002584:	d136      	bne.n	80025f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f022 0216 	bic.w	r2, r2, #22
 8002594:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	695a      	ldr	r2, [r3, #20]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d103      	bne.n	80025b6 <HAL_DMA_IRQHandler+0x1da>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d007      	beq.n	80025c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f022 0208 	bic.w	r2, r2, #8
 80025c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ca:	223f      	movs	r2, #63	; 0x3f
 80025cc:	409a      	lsls	r2, r3
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d07e      	beq.n	80026e8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	4798      	blx	r3
        }
        return;
 80025f2:	e079      	b.n	80026e8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d01d      	beq.n	800263e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d10d      	bne.n	800262c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002614:	2b00      	cmp	r3, #0
 8002616:	d031      	beq.n	800267c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	4798      	blx	r3
 8002620:	e02c      	b.n	800267c <HAL_DMA_IRQHandler+0x2a0>
 8002622:	bf00      	nop
 8002624:	20000000 	.word	0x20000000
 8002628:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002630:	2b00      	cmp	r3, #0
 8002632:	d023      	beq.n	800267c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	4798      	blx	r3
 800263c:	e01e      	b.n	800267c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002648:	2b00      	cmp	r3, #0
 800264a:	d10f      	bne.n	800266c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f022 0210 	bic.w	r2, r2, #16
 800265a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002670:	2b00      	cmp	r3, #0
 8002672:	d003      	beq.n	800267c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002680:	2b00      	cmp	r3, #0
 8002682:	d032      	beq.n	80026ea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002688:	f003 0301 	and.w	r3, r3, #1
 800268c:	2b00      	cmp	r3, #0
 800268e:	d022      	beq.n	80026d6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2205      	movs	r2, #5
 8002694:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f022 0201 	bic.w	r2, r2, #1
 80026a6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	3301      	adds	r3, #1
 80026ac:	60bb      	str	r3, [r7, #8]
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d307      	bcc.n	80026c4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1f2      	bne.n	80026a8 <HAL_DMA_IRQHandler+0x2cc>
 80026c2:	e000      	b.n	80026c6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80026c4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2201      	movs	r2, #1
 80026ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d005      	beq.n	80026ea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	4798      	blx	r3
 80026e6:	e000      	b.n	80026ea <HAL_DMA_IRQHandler+0x30e>
        return;
 80026e8:	bf00      	nop
    }
  }
}
 80026ea:	3718      	adds	r7, #24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
 80026fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800270c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	2b40      	cmp	r3, #64	; 0x40
 800271c:	d108      	bne.n	8002730 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68ba      	ldr	r2, [r7, #8]
 800272c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800272e:	e007      	b.n	8002740 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68ba      	ldr	r2, [r7, #8]
 8002736:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	60da      	str	r2, [r3, #12]
}
 8002740:	bf00      	nop
 8002742:	3714      	adds	r7, #20
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	b2db      	uxtb	r3, r3
 800275a:	3b10      	subs	r3, #16
 800275c:	4a14      	ldr	r2, [pc, #80]	; (80027b0 <DMA_CalcBaseAndBitshift+0x64>)
 800275e:	fba2 2303 	umull	r2, r3, r2, r3
 8002762:	091b      	lsrs	r3, r3, #4
 8002764:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002766:	4a13      	ldr	r2, [pc, #76]	; (80027b4 <DMA_CalcBaseAndBitshift+0x68>)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	4413      	add	r3, r2
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	461a      	mov	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2b03      	cmp	r3, #3
 8002778:	d909      	bls.n	800278e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002782:	f023 0303 	bic.w	r3, r3, #3
 8002786:	1d1a      	adds	r2, r3, #4
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	659a      	str	r2, [r3, #88]	; 0x58
 800278c:	e007      	b.n	800279e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002796:	f023 0303 	bic.w	r3, r3, #3
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3714      	adds	r7, #20
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	aaaaaaab 	.word	0xaaaaaaab
 80027b4:	08004c60 	.word	0x08004c60

080027b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b085      	sub	sp, #20
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027c0:	2300      	movs	r3, #0
 80027c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d11f      	bne.n	8002812 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	2b03      	cmp	r3, #3
 80027d6:	d856      	bhi.n	8002886 <DMA_CheckFifoParam+0xce>
 80027d8:	a201      	add	r2, pc, #4	; (adr r2, 80027e0 <DMA_CheckFifoParam+0x28>)
 80027da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027de:	bf00      	nop
 80027e0:	080027f1 	.word	0x080027f1
 80027e4:	08002803 	.word	0x08002803
 80027e8:	080027f1 	.word	0x080027f1
 80027ec:	08002887 	.word	0x08002887
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d046      	beq.n	800288a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002800:	e043      	b.n	800288a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002806:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800280a:	d140      	bne.n	800288e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002810:	e03d      	b.n	800288e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800281a:	d121      	bne.n	8002860 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	2b03      	cmp	r3, #3
 8002820:	d837      	bhi.n	8002892 <DMA_CheckFifoParam+0xda>
 8002822:	a201      	add	r2, pc, #4	; (adr r2, 8002828 <DMA_CheckFifoParam+0x70>)
 8002824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002828:	08002839 	.word	0x08002839
 800282c:	0800283f 	.word	0x0800283f
 8002830:	08002839 	.word	0x08002839
 8002834:	08002851 	.word	0x08002851
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	73fb      	strb	r3, [r7, #15]
      break;
 800283c:	e030      	b.n	80028a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002842:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d025      	beq.n	8002896 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800284e:	e022      	b.n	8002896 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002854:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002858:	d11f      	bne.n	800289a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800285e:	e01c      	b.n	800289a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	2b02      	cmp	r3, #2
 8002864:	d903      	bls.n	800286e <DMA_CheckFifoParam+0xb6>
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	2b03      	cmp	r3, #3
 800286a:	d003      	beq.n	8002874 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800286c:	e018      	b.n	80028a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	73fb      	strb	r3, [r7, #15]
      break;
 8002872:	e015      	b.n	80028a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002878:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d00e      	beq.n	800289e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	73fb      	strb	r3, [r7, #15]
      break;
 8002884:	e00b      	b.n	800289e <DMA_CheckFifoParam+0xe6>
      break;
 8002886:	bf00      	nop
 8002888:	e00a      	b.n	80028a0 <DMA_CheckFifoParam+0xe8>
      break;
 800288a:	bf00      	nop
 800288c:	e008      	b.n	80028a0 <DMA_CheckFifoParam+0xe8>
      break;
 800288e:	bf00      	nop
 8002890:	e006      	b.n	80028a0 <DMA_CheckFifoParam+0xe8>
      break;
 8002892:	bf00      	nop
 8002894:	e004      	b.n	80028a0 <DMA_CheckFifoParam+0xe8>
      break;
 8002896:	bf00      	nop
 8002898:	e002      	b.n	80028a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800289a:	bf00      	nop
 800289c:	e000      	b.n	80028a0 <DMA_CheckFifoParam+0xe8>
      break;
 800289e:	bf00      	nop
    }
  } 
  
  return status; 
 80028a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3714      	adds	r7, #20
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop

080028b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e267      	b.n	8002d92 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d075      	beq.n	80029ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028ce:	4b88      	ldr	r3, [pc, #544]	; (8002af0 <HAL_RCC_OscConfig+0x240>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f003 030c 	and.w	r3, r3, #12
 80028d6:	2b04      	cmp	r3, #4
 80028d8:	d00c      	beq.n	80028f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028da:	4b85      	ldr	r3, [pc, #532]	; (8002af0 <HAL_RCC_OscConfig+0x240>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028e2:	2b08      	cmp	r3, #8
 80028e4:	d112      	bne.n	800290c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028e6:	4b82      	ldr	r3, [pc, #520]	; (8002af0 <HAL_RCC_OscConfig+0x240>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028f2:	d10b      	bne.n	800290c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028f4:	4b7e      	ldr	r3, [pc, #504]	; (8002af0 <HAL_RCC_OscConfig+0x240>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d05b      	beq.n	80029b8 <HAL_RCC_OscConfig+0x108>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d157      	bne.n	80029b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e242      	b.n	8002d92 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002914:	d106      	bne.n	8002924 <HAL_RCC_OscConfig+0x74>
 8002916:	4b76      	ldr	r3, [pc, #472]	; (8002af0 <HAL_RCC_OscConfig+0x240>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a75      	ldr	r2, [pc, #468]	; (8002af0 <HAL_RCC_OscConfig+0x240>)
 800291c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002920:	6013      	str	r3, [r2, #0]
 8002922:	e01d      	b.n	8002960 <HAL_RCC_OscConfig+0xb0>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800292c:	d10c      	bne.n	8002948 <HAL_RCC_OscConfig+0x98>
 800292e:	4b70      	ldr	r3, [pc, #448]	; (8002af0 <HAL_RCC_OscConfig+0x240>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a6f      	ldr	r2, [pc, #444]	; (8002af0 <HAL_RCC_OscConfig+0x240>)
 8002934:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002938:	6013      	str	r3, [r2, #0]
 800293a:	4b6d      	ldr	r3, [pc, #436]	; (8002af0 <HAL_RCC_OscConfig+0x240>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a6c      	ldr	r2, [pc, #432]	; (8002af0 <HAL_RCC_OscConfig+0x240>)
 8002940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002944:	6013      	str	r3, [r2, #0]
 8002946:	e00b      	b.n	8002960 <HAL_RCC_OscConfig+0xb0>
 8002948:	4b69      	ldr	r3, [pc, #420]	; (8002af0 <HAL_RCC_OscConfig+0x240>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a68      	ldr	r2, [pc, #416]	; (8002af0 <HAL_RCC_OscConfig+0x240>)
 800294e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002952:	6013      	str	r3, [r2, #0]
 8002954:	4b66      	ldr	r3, [pc, #408]	; (8002af0 <HAL_RCC_OscConfig+0x240>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a65      	ldr	r2, [pc, #404]	; (8002af0 <HAL_RCC_OscConfig+0x240>)
 800295a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800295e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d013      	beq.n	8002990 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002968:	f7fe fdd8 	bl	800151c <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800296e:	e008      	b.n	8002982 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002970:	f7fe fdd4 	bl	800151c <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b64      	cmp	r3, #100	; 0x64
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e207      	b.n	8002d92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002982:	4b5b      	ldr	r3, [pc, #364]	; (8002af0 <HAL_RCC_OscConfig+0x240>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d0f0      	beq.n	8002970 <HAL_RCC_OscConfig+0xc0>
 800298e:	e014      	b.n	80029ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002990:	f7fe fdc4 	bl	800151c <HAL_GetTick>
 8002994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002996:	e008      	b.n	80029aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002998:	f7fe fdc0 	bl	800151c <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b64      	cmp	r3, #100	; 0x64
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e1f3      	b.n	8002d92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029aa:	4b51      	ldr	r3, [pc, #324]	; (8002af0 <HAL_RCC_OscConfig+0x240>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1f0      	bne.n	8002998 <HAL_RCC_OscConfig+0xe8>
 80029b6:	e000      	b.n	80029ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d063      	beq.n	8002a8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029c6:	4b4a      	ldr	r3, [pc, #296]	; (8002af0 <HAL_RCC_OscConfig+0x240>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f003 030c 	and.w	r3, r3, #12
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00b      	beq.n	80029ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029d2:	4b47      	ldr	r3, [pc, #284]	; (8002af0 <HAL_RCC_OscConfig+0x240>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029da:	2b08      	cmp	r3, #8
 80029dc:	d11c      	bne.n	8002a18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029de:	4b44      	ldr	r3, [pc, #272]	; (8002af0 <HAL_RCC_OscConfig+0x240>)
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d116      	bne.n	8002a18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ea:	4b41      	ldr	r3, [pc, #260]	; (8002af0 <HAL_RCC_OscConfig+0x240>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d005      	beq.n	8002a02 <HAL_RCC_OscConfig+0x152>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d001      	beq.n	8002a02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e1c7      	b.n	8002d92 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a02:	4b3b      	ldr	r3, [pc, #236]	; (8002af0 <HAL_RCC_OscConfig+0x240>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	4937      	ldr	r1, [pc, #220]	; (8002af0 <HAL_RCC_OscConfig+0x240>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a16:	e03a      	b.n	8002a8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d020      	beq.n	8002a62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a20:	4b34      	ldr	r3, [pc, #208]	; (8002af4 <HAL_RCC_OscConfig+0x244>)
 8002a22:	2201      	movs	r2, #1
 8002a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a26:	f7fe fd79 	bl	800151c <HAL_GetTick>
 8002a2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a2c:	e008      	b.n	8002a40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a2e:	f7fe fd75 	bl	800151c <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d901      	bls.n	8002a40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e1a8      	b.n	8002d92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a40:	4b2b      	ldr	r3, [pc, #172]	; (8002af0 <HAL_RCC_OscConfig+0x240>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0302 	and.w	r3, r3, #2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d0f0      	beq.n	8002a2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a4c:	4b28      	ldr	r3, [pc, #160]	; (8002af0 <HAL_RCC_OscConfig+0x240>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	4925      	ldr	r1, [pc, #148]	; (8002af0 <HAL_RCC_OscConfig+0x240>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	600b      	str	r3, [r1, #0]
 8002a60:	e015      	b.n	8002a8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a62:	4b24      	ldr	r3, [pc, #144]	; (8002af4 <HAL_RCC_OscConfig+0x244>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a68:	f7fe fd58 	bl	800151c <HAL_GetTick>
 8002a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a6e:	e008      	b.n	8002a82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a70:	f7fe fd54 	bl	800151c <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e187      	b.n	8002d92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a82:	4b1b      	ldr	r3, [pc, #108]	; (8002af0 <HAL_RCC_OscConfig+0x240>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1f0      	bne.n	8002a70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0308 	and.w	r3, r3, #8
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d036      	beq.n	8002b08 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d016      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aa2:	4b15      	ldr	r3, [pc, #84]	; (8002af8 <HAL_RCC_OscConfig+0x248>)
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa8:	f7fe fd38 	bl	800151c <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ab0:	f7fe fd34 	bl	800151c <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e167      	b.n	8002d92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ac2:	4b0b      	ldr	r3, [pc, #44]	; (8002af0 <HAL_RCC_OscConfig+0x240>)
 8002ac4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d0f0      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x200>
 8002ace:	e01b      	b.n	8002b08 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ad0:	4b09      	ldr	r3, [pc, #36]	; (8002af8 <HAL_RCC_OscConfig+0x248>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ad6:	f7fe fd21 	bl	800151c <HAL_GetTick>
 8002ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002adc:	e00e      	b.n	8002afc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ade:	f7fe fd1d 	bl	800151c <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d907      	bls.n	8002afc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e150      	b.n	8002d92 <HAL_RCC_OscConfig+0x4e2>
 8002af0:	40023800 	.word	0x40023800
 8002af4:	42470000 	.word	0x42470000
 8002af8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002afc:	4b88      	ldr	r3, [pc, #544]	; (8002d20 <HAL_RCC_OscConfig+0x470>)
 8002afe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1ea      	bne.n	8002ade <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0304 	and.w	r3, r3, #4
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	f000 8097 	beq.w	8002c44 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b16:	2300      	movs	r3, #0
 8002b18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b1a:	4b81      	ldr	r3, [pc, #516]	; (8002d20 <HAL_RCC_OscConfig+0x470>)
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d10f      	bne.n	8002b46 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b26:	2300      	movs	r3, #0
 8002b28:	60bb      	str	r3, [r7, #8]
 8002b2a:	4b7d      	ldr	r3, [pc, #500]	; (8002d20 <HAL_RCC_OscConfig+0x470>)
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	4a7c      	ldr	r2, [pc, #496]	; (8002d20 <HAL_RCC_OscConfig+0x470>)
 8002b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b34:	6413      	str	r3, [r2, #64]	; 0x40
 8002b36:	4b7a      	ldr	r3, [pc, #488]	; (8002d20 <HAL_RCC_OscConfig+0x470>)
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b3e:	60bb      	str	r3, [r7, #8]
 8002b40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b42:	2301      	movs	r3, #1
 8002b44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b46:	4b77      	ldr	r3, [pc, #476]	; (8002d24 <HAL_RCC_OscConfig+0x474>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d118      	bne.n	8002b84 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b52:	4b74      	ldr	r3, [pc, #464]	; (8002d24 <HAL_RCC_OscConfig+0x474>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a73      	ldr	r2, [pc, #460]	; (8002d24 <HAL_RCC_OscConfig+0x474>)
 8002b58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b5e:	f7fe fcdd 	bl	800151c <HAL_GetTick>
 8002b62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b64:	e008      	b.n	8002b78 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b66:	f7fe fcd9 	bl	800151c <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d901      	bls.n	8002b78 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e10c      	b.n	8002d92 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b78:	4b6a      	ldr	r3, [pc, #424]	; (8002d24 <HAL_RCC_OscConfig+0x474>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d0f0      	beq.n	8002b66 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d106      	bne.n	8002b9a <HAL_RCC_OscConfig+0x2ea>
 8002b8c:	4b64      	ldr	r3, [pc, #400]	; (8002d20 <HAL_RCC_OscConfig+0x470>)
 8002b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b90:	4a63      	ldr	r2, [pc, #396]	; (8002d20 <HAL_RCC_OscConfig+0x470>)
 8002b92:	f043 0301 	orr.w	r3, r3, #1
 8002b96:	6713      	str	r3, [r2, #112]	; 0x70
 8002b98:	e01c      	b.n	8002bd4 <HAL_RCC_OscConfig+0x324>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	2b05      	cmp	r3, #5
 8002ba0:	d10c      	bne.n	8002bbc <HAL_RCC_OscConfig+0x30c>
 8002ba2:	4b5f      	ldr	r3, [pc, #380]	; (8002d20 <HAL_RCC_OscConfig+0x470>)
 8002ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba6:	4a5e      	ldr	r2, [pc, #376]	; (8002d20 <HAL_RCC_OscConfig+0x470>)
 8002ba8:	f043 0304 	orr.w	r3, r3, #4
 8002bac:	6713      	str	r3, [r2, #112]	; 0x70
 8002bae:	4b5c      	ldr	r3, [pc, #368]	; (8002d20 <HAL_RCC_OscConfig+0x470>)
 8002bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb2:	4a5b      	ldr	r2, [pc, #364]	; (8002d20 <HAL_RCC_OscConfig+0x470>)
 8002bb4:	f043 0301 	orr.w	r3, r3, #1
 8002bb8:	6713      	str	r3, [r2, #112]	; 0x70
 8002bba:	e00b      	b.n	8002bd4 <HAL_RCC_OscConfig+0x324>
 8002bbc:	4b58      	ldr	r3, [pc, #352]	; (8002d20 <HAL_RCC_OscConfig+0x470>)
 8002bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc0:	4a57      	ldr	r2, [pc, #348]	; (8002d20 <HAL_RCC_OscConfig+0x470>)
 8002bc2:	f023 0301 	bic.w	r3, r3, #1
 8002bc6:	6713      	str	r3, [r2, #112]	; 0x70
 8002bc8:	4b55      	ldr	r3, [pc, #340]	; (8002d20 <HAL_RCC_OscConfig+0x470>)
 8002bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bcc:	4a54      	ldr	r2, [pc, #336]	; (8002d20 <HAL_RCC_OscConfig+0x470>)
 8002bce:	f023 0304 	bic.w	r3, r3, #4
 8002bd2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d015      	beq.n	8002c08 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bdc:	f7fe fc9e 	bl	800151c <HAL_GetTick>
 8002be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002be2:	e00a      	b.n	8002bfa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002be4:	f7fe fc9a 	bl	800151c <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e0cb      	b.n	8002d92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bfa:	4b49      	ldr	r3, [pc, #292]	; (8002d20 <HAL_RCC_OscConfig+0x470>)
 8002bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d0ee      	beq.n	8002be4 <HAL_RCC_OscConfig+0x334>
 8002c06:	e014      	b.n	8002c32 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c08:	f7fe fc88 	bl	800151c <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c0e:	e00a      	b.n	8002c26 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c10:	f7fe fc84 	bl	800151c <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e0b5      	b.n	8002d92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c26:	4b3e      	ldr	r3, [pc, #248]	; (8002d20 <HAL_RCC_OscConfig+0x470>)
 8002c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1ee      	bne.n	8002c10 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c32:	7dfb      	ldrb	r3, [r7, #23]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d105      	bne.n	8002c44 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c38:	4b39      	ldr	r3, [pc, #228]	; (8002d20 <HAL_RCC_OscConfig+0x470>)
 8002c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3c:	4a38      	ldr	r2, [pc, #224]	; (8002d20 <HAL_RCC_OscConfig+0x470>)
 8002c3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c42:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f000 80a1 	beq.w	8002d90 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c4e:	4b34      	ldr	r3, [pc, #208]	; (8002d20 <HAL_RCC_OscConfig+0x470>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 030c 	and.w	r3, r3, #12
 8002c56:	2b08      	cmp	r3, #8
 8002c58:	d05c      	beq.n	8002d14 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d141      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c62:	4b31      	ldr	r3, [pc, #196]	; (8002d28 <HAL_RCC_OscConfig+0x478>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c68:	f7fe fc58 	bl	800151c <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c70:	f7fe fc54 	bl	800151c <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e087      	b.n	8002d92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c82:	4b27      	ldr	r3, [pc, #156]	; (8002d20 <HAL_RCC_OscConfig+0x470>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1f0      	bne.n	8002c70 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	69da      	ldr	r2, [r3, #28]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a1b      	ldr	r3, [r3, #32]
 8002c96:	431a      	orrs	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9c:	019b      	lsls	r3, r3, #6
 8002c9e:	431a      	orrs	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca4:	085b      	lsrs	r3, r3, #1
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	041b      	lsls	r3, r3, #16
 8002caa:	431a      	orrs	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb0:	061b      	lsls	r3, r3, #24
 8002cb2:	491b      	ldr	r1, [pc, #108]	; (8002d20 <HAL_RCC_OscConfig+0x470>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cb8:	4b1b      	ldr	r3, [pc, #108]	; (8002d28 <HAL_RCC_OscConfig+0x478>)
 8002cba:	2201      	movs	r2, #1
 8002cbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cbe:	f7fe fc2d 	bl	800151c <HAL_GetTick>
 8002cc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cc4:	e008      	b.n	8002cd8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cc6:	f7fe fc29 	bl	800151c <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d901      	bls.n	8002cd8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e05c      	b.n	8002d92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cd8:	4b11      	ldr	r3, [pc, #68]	; (8002d20 <HAL_RCC_OscConfig+0x470>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d0f0      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x416>
 8002ce4:	e054      	b.n	8002d90 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ce6:	4b10      	ldr	r3, [pc, #64]	; (8002d28 <HAL_RCC_OscConfig+0x478>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cec:	f7fe fc16 	bl	800151c <HAL_GetTick>
 8002cf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cf2:	e008      	b.n	8002d06 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cf4:	f7fe fc12 	bl	800151c <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e045      	b.n	8002d92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d06:	4b06      	ldr	r3, [pc, #24]	; (8002d20 <HAL_RCC_OscConfig+0x470>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1f0      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x444>
 8002d12:	e03d      	b.n	8002d90 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d107      	bne.n	8002d2c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e038      	b.n	8002d92 <HAL_RCC_OscConfig+0x4e2>
 8002d20:	40023800 	.word	0x40023800
 8002d24:	40007000 	.word	0x40007000
 8002d28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d2c:	4b1b      	ldr	r3, [pc, #108]	; (8002d9c <HAL_RCC_OscConfig+0x4ec>)
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d028      	beq.n	8002d8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d121      	bne.n	8002d8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d11a      	bne.n	8002d8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d111      	bne.n	8002d8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d72:	085b      	lsrs	r3, r3, #1
 8002d74:	3b01      	subs	r3, #1
 8002d76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d107      	bne.n	8002d8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d001      	beq.n	8002d90 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e000      	b.n	8002d92 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3718      	adds	r7, #24
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	40023800 	.word	0x40023800

08002da0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d101      	bne.n	8002db4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e0cc      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002db4:	4b68      	ldr	r3, [pc, #416]	; (8002f58 <HAL_RCC_ClockConfig+0x1b8>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 030f 	and.w	r3, r3, #15
 8002dbc:	683a      	ldr	r2, [r7, #0]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d90c      	bls.n	8002ddc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dc2:	4b65      	ldr	r3, [pc, #404]	; (8002f58 <HAL_RCC_ClockConfig+0x1b8>)
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	b2d2      	uxtb	r2, r2
 8002dc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dca:	4b63      	ldr	r3, [pc, #396]	; (8002f58 <HAL_RCC_ClockConfig+0x1b8>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 030f 	and.w	r3, r3, #15
 8002dd2:	683a      	ldr	r2, [r7, #0]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d001      	beq.n	8002ddc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e0b8      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0302 	and.w	r3, r3, #2
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d020      	beq.n	8002e2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0304 	and.w	r3, r3, #4
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d005      	beq.n	8002e00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002df4:	4b59      	ldr	r3, [pc, #356]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	4a58      	ldr	r2, [pc, #352]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002dfa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002dfe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0308 	and.w	r3, r3, #8
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d005      	beq.n	8002e18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e0c:	4b53      	ldr	r3, [pc, #332]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	4a52      	ldr	r2, [pc, #328]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002e12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e18:	4b50      	ldr	r3, [pc, #320]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	494d      	ldr	r1, [pc, #308]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d044      	beq.n	8002ec0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d107      	bne.n	8002e4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e3e:	4b47      	ldr	r3, [pc, #284]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d119      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e07f      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d003      	beq.n	8002e5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e5a:	2b03      	cmp	r3, #3
 8002e5c:	d107      	bne.n	8002e6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e5e:	4b3f      	ldr	r3, [pc, #252]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d109      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e06f      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e6e:	4b3b      	ldr	r3, [pc, #236]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e067      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e7e:	4b37      	ldr	r3, [pc, #220]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f023 0203 	bic.w	r2, r3, #3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	4934      	ldr	r1, [pc, #208]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e90:	f7fe fb44 	bl	800151c <HAL_GetTick>
 8002e94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e96:	e00a      	b.n	8002eae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e98:	f7fe fb40 	bl	800151c <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e04f      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eae:	4b2b      	ldr	r3, [pc, #172]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f003 020c 	and.w	r2, r3, #12
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d1eb      	bne.n	8002e98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ec0:	4b25      	ldr	r3, [pc, #148]	; (8002f58 <HAL_RCC_ClockConfig+0x1b8>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 030f 	and.w	r3, r3, #15
 8002ec8:	683a      	ldr	r2, [r7, #0]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d20c      	bcs.n	8002ee8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ece:	4b22      	ldr	r3, [pc, #136]	; (8002f58 <HAL_RCC_ClockConfig+0x1b8>)
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	b2d2      	uxtb	r2, r2
 8002ed4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ed6:	4b20      	ldr	r3, [pc, #128]	; (8002f58 <HAL_RCC_ClockConfig+0x1b8>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 030f 	and.w	r3, r3, #15
 8002ede:	683a      	ldr	r2, [r7, #0]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d001      	beq.n	8002ee8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e032      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0304 	and.w	r3, r3, #4
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d008      	beq.n	8002f06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ef4:	4b19      	ldr	r3, [pc, #100]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	4916      	ldr	r1, [pc, #88]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0308 	and.w	r3, r3, #8
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d009      	beq.n	8002f26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f12:	4b12      	ldr	r3, [pc, #72]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	490e      	ldr	r1, [pc, #56]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f26:	f000 f821 	bl	8002f6c <HAL_RCC_GetSysClockFreq>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	4b0b      	ldr	r3, [pc, #44]	; (8002f5c <HAL_RCC_ClockConfig+0x1bc>)
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	091b      	lsrs	r3, r3, #4
 8002f32:	f003 030f 	and.w	r3, r3, #15
 8002f36:	490a      	ldr	r1, [pc, #40]	; (8002f60 <HAL_RCC_ClockConfig+0x1c0>)
 8002f38:	5ccb      	ldrb	r3, [r1, r3]
 8002f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f3e:	4a09      	ldr	r2, [pc, #36]	; (8002f64 <HAL_RCC_ClockConfig+0x1c4>)
 8002f40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f42:	4b09      	ldr	r3, [pc, #36]	; (8002f68 <HAL_RCC_ClockConfig+0x1c8>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7fe faa4 	bl	8001494 <HAL_InitTick>

  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	40023c00 	.word	0x40023c00
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	08004c50 	.word	0x08004c50
 8002f64:	20000000 	.word	0x20000000
 8002f68:	20000004 	.word	0x20000004

08002f6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f70:	b090      	sub	sp, #64	; 0x40
 8002f72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f74:	2300      	movs	r3, #0
 8002f76:	637b      	str	r3, [r7, #52]	; 0x34
 8002f78:	2300      	movs	r3, #0
 8002f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002f80:	2300      	movs	r3, #0
 8002f82:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f84:	4b59      	ldr	r3, [pc, #356]	; (80030ec <HAL_RCC_GetSysClockFreq+0x180>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f003 030c 	and.w	r3, r3, #12
 8002f8c:	2b08      	cmp	r3, #8
 8002f8e:	d00d      	beq.n	8002fac <HAL_RCC_GetSysClockFreq+0x40>
 8002f90:	2b08      	cmp	r3, #8
 8002f92:	f200 80a1 	bhi.w	80030d8 <HAL_RCC_GetSysClockFreq+0x16c>
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d002      	beq.n	8002fa0 <HAL_RCC_GetSysClockFreq+0x34>
 8002f9a:	2b04      	cmp	r3, #4
 8002f9c:	d003      	beq.n	8002fa6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002f9e:	e09b      	b.n	80030d8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fa0:	4b53      	ldr	r3, [pc, #332]	; (80030f0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002fa2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002fa4:	e09b      	b.n	80030de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fa6:	4b53      	ldr	r3, [pc, #332]	; (80030f4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002fa8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002faa:	e098      	b.n	80030de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fac:	4b4f      	ldr	r3, [pc, #316]	; (80030ec <HAL_RCC_GetSysClockFreq+0x180>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fb4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fb6:	4b4d      	ldr	r3, [pc, #308]	; (80030ec <HAL_RCC_GetSysClockFreq+0x180>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d028      	beq.n	8003014 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fc2:	4b4a      	ldr	r3, [pc, #296]	; (80030ec <HAL_RCC_GetSysClockFreq+0x180>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	099b      	lsrs	r3, r3, #6
 8002fc8:	2200      	movs	r2, #0
 8002fca:	623b      	str	r3, [r7, #32]
 8002fcc:	627a      	str	r2, [r7, #36]	; 0x24
 8002fce:	6a3b      	ldr	r3, [r7, #32]
 8002fd0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	4b47      	ldr	r3, [pc, #284]	; (80030f4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002fd8:	fb03 f201 	mul.w	r2, r3, r1
 8002fdc:	2300      	movs	r3, #0
 8002fde:	fb00 f303 	mul.w	r3, r0, r3
 8002fe2:	4413      	add	r3, r2
 8002fe4:	4a43      	ldr	r2, [pc, #268]	; (80030f4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002fe6:	fba0 1202 	umull	r1, r2, r0, r2
 8002fea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002fec:	460a      	mov	r2, r1
 8002fee:	62ba      	str	r2, [r7, #40]	; 0x28
 8002ff0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ff2:	4413      	add	r3, r2
 8002ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	61bb      	str	r3, [r7, #24]
 8002ffc:	61fa      	str	r2, [r7, #28]
 8002ffe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003002:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003006:	f7fd fd19 	bl	8000a3c <__aeabi_uldivmod>
 800300a:	4602      	mov	r2, r0
 800300c:	460b      	mov	r3, r1
 800300e:	4613      	mov	r3, r2
 8003010:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003012:	e053      	b.n	80030bc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003014:	4b35      	ldr	r3, [pc, #212]	; (80030ec <HAL_RCC_GetSysClockFreq+0x180>)
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	099b      	lsrs	r3, r3, #6
 800301a:	2200      	movs	r2, #0
 800301c:	613b      	str	r3, [r7, #16]
 800301e:	617a      	str	r2, [r7, #20]
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003026:	f04f 0b00 	mov.w	fp, #0
 800302a:	4652      	mov	r2, sl
 800302c:	465b      	mov	r3, fp
 800302e:	f04f 0000 	mov.w	r0, #0
 8003032:	f04f 0100 	mov.w	r1, #0
 8003036:	0159      	lsls	r1, r3, #5
 8003038:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800303c:	0150      	lsls	r0, r2, #5
 800303e:	4602      	mov	r2, r0
 8003040:	460b      	mov	r3, r1
 8003042:	ebb2 080a 	subs.w	r8, r2, sl
 8003046:	eb63 090b 	sbc.w	r9, r3, fp
 800304a:	f04f 0200 	mov.w	r2, #0
 800304e:	f04f 0300 	mov.w	r3, #0
 8003052:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003056:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800305a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800305e:	ebb2 0408 	subs.w	r4, r2, r8
 8003062:	eb63 0509 	sbc.w	r5, r3, r9
 8003066:	f04f 0200 	mov.w	r2, #0
 800306a:	f04f 0300 	mov.w	r3, #0
 800306e:	00eb      	lsls	r3, r5, #3
 8003070:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003074:	00e2      	lsls	r2, r4, #3
 8003076:	4614      	mov	r4, r2
 8003078:	461d      	mov	r5, r3
 800307a:	eb14 030a 	adds.w	r3, r4, sl
 800307e:	603b      	str	r3, [r7, #0]
 8003080:	eb45 030b 	adc.w	r3, r5, fp
 8003084:	607b      	str	r3, [r7, #4]
 8003086:	f04f 0200 	mov.w	r2, #0
 800308a:	f04f 0300 	mov.w	r3, #0
 800308e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003092:	4629      	mov	r1, r5
 8003094:	028b      	lsls	r3, r1, #10
 8003096:	4621      	mov	r1, r4
 8003098:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800309c:	4621      	mov	r1, r4
 800309e:	028a      	lsls	r2, r1, #10
 80030a0:	4610      	mov	r0, r2
 80030a2:	4619      	mov	r1, r3
 80030a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030a6:	2200      	movs	r2, #0
 80030a8:	60bb      	str	r3, [r7, #8]
 80030aa:	60fa      	str	r2, [r7, #12]
 80030ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030b0:	f7fd fcc4 	bl	8000a3c <__aeabi_uldivmod>
 80030b4:	4602      	mov	r2, r0
 80030b6:	460b      	mov	r3, r1
 80030b8:	4613      	mov	r3, r2
 80030ba:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030bc:	4b0b      	ldr	r3, [pc, #44]	; (80030ec <HAL_RCC_GetSysClockFreq+0x180>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	0c1b      	lsrs	r3, r3, #16
 80030c2:	f003 0303 	and.w	r3, r3, #3
 80030c6:	3301      	adds	r3, #1
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80030cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80030d6:	e002      	b.n	80030de <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030d8:	4b05      	ldr	r3, [pc, #20]	; (80030f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80030da:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80030dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3740      	adds	r7, #64	; 0x40
 80030e4:	46bd      	mov	sp, r7
 80030e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030ea:	bf00      	nop
 80030ec:	40023800 	.word	0x40023800
 80030f0:	00f42400 	.word	0x00f42400
 80030f4:	017d7840 	.word	0x017d7840

080030f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d101      	bne.n	800310a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e041      	b.n	800318e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d106      	bne.n	8003124 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f7fe f850 	bl	80011c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2202      	movs	r2, #2
 8003128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	3304      	adds	r3, #4
 8003134:	4619      	mov	r1, r3
 8003136:	4610      	mov	r0, r2
 8003138:	f000 f95e 	bl	80033f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
	...

08003198 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003198:	b480      	push	{r7}
 800319a:	b085      	sub	sp, #20
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d001      	beq.n	80031b0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e046      	b.n	800323e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2202      	movs	r2, #2
 80031b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a23      	ldr	r2, [pc, #140]	; (800324c <HAL_TIM_Base_Start+0xb4>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d022      	beq.n	8003208 <HAL_TIM_Base_Start+0x70>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ca:	d01d      	beq.n	8003208 <HAL_TIM_Base_Start+0x70>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a1f      	ldr	r2, [pc, #124]	; (8003250 <HAL_TIM_Base_Start+0xb8>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d018      	beq.n	8003208 <HAL_TIM_Base_Start+0x70>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a1e      	ldr	r2, [pc, #120]	; (8003254 <HAL_TIM_Base_Start+0xbc>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d013      	beq.n	8003208 <HAL_TIM_Base_Start+0x70>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a1c      	ldr	r2, [pc, #112]	; (8003258 <HAL_TIM_Base_Start+0xc0>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d00e      	beq.n	8003208 <HAL_TIM_Base_Start+0x70>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a1b      	ldr	r2, [pc, #108]	; (800325c <HAL_TIM_Base_Start+0xc4>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d009      	beq.n	8003208 <HAL_TIM_Base_Start+0x70>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a19      	ldr	r2, [pc, #100]	; (8003260 <HAL_TIM_Base_Start+0xc8>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d004      	beq.n	8003208 <HAL_TIM_Base_Start+0x70>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a18      	ldr	r2, [pc, #96]	; (8003264 <HAL_TIM_Base_Start+0xcc>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d111      	bne.n	800322c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f003 0307 	and.w	r3, r3, #7
 8003212:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2b06      	cmp	r3, #6
 8003218:	d010      	beq.n	800323c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f042 0201 	orr.w	r2, r2, #1
 8003228:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800322a:	e007      	b.n	800323c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f042 0201 	orr.w	r2, r2, #1
 800323a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3714      	adds	r7, #20
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	40010000 	.word	0x40010000
 8003250:	40000400 	.word	0x40000400
 8003254:	40000800 	.word	0x40000800
 8003258:	40000c00 	.word	0x40000c00
 800325c:	40010400 	.word	0x40010400
 8003260:	40014000 	.word	0x40014000
 8003264:	40001800 	.word	0x40001800

08003268 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003272:	2300      	movs	r3, #0
 8003274:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800327c:	2b01      	cmp	r3, #1
 800327e:	d101      	bne.n	8003284 <HAL_TIM_ConfigClockSource+0x1c>
 8003280:	2302      	movs	r3, #2
 8003282:	e0b4      	b.n	80033ee <HAL_TIM_ConfigClockSource+0x186>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2202      	movs	r2, #2
 8003290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80032a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68ba      	ldr	r2, [r7, #8]
 80032b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032bc:	d03e      	beq.n	800333c <HAL_TIM_ConfigClockSource+0xd4>
 80032be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032c2:	f200 8087 	bhi.w	80033d4 <HAL_TIM_ConfigClockSource+0x16c>
 80032c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032ca:	f000 8086 	beq.w	80033da <HAL_TIM_ConfigClockSource+0x172>
 80032ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032d2:	d87f      	bhi.n	80033d4 <HAL_TIM_ConfigClockSource+0x16c>
 80032d4:	2b70      	cmp	r3, #112	; 0x70
 80032d6:	d01a      	beq.n	800330e <HAL_TIM_ConfigClockSource+0xa6>
 80032d8:	2b70      	cmp	r3, #112	; 0x70
 80032da:	d87b      	bhi.n	80033d4 <HAL_TIM_ConfigClockSource+0x16c>
 80032dc:	2b60      	cmp	r3, #96	; 0x60
 80032de:	d050      	beq.n	8003382 <HAL_TIM_ConfigClockSource+0x11a>
 80032e0:	2b60      	cmp	r3, #96	; 0x60
 80032e2:	d877      	bhi.n	80033d4 <HAL_TIM_ConfigClockSource+0x16c>
 80032e4:	2b50      	cmp	r3, #80	; 0x50
 80032e6:	d03c      	beq.n	8003362 <HAL_TIM_ConfigClockSource+0xfa>
 80032e8:	2b50      	cmp	r3, #80	; 0x50
 80032ea:	d873      	bhi.n	80033d4 <HAL_TIM_ConfigClockSource+0x16c>
 80032ec:	2b40      	cmp	r3, #64	; 0x40
 80032ee:	d058      	beq.n	80033a2 <HAL_TIM_ConfigClockSource+0x13a>
 80032f0:	2b40      	cmp	r3, #64	; 0x40
 80032f2:	d86f      	bhi.n	80033d4 <HAL_TIM_ConfigClockSource+0x16c>
 80032f4:	2b30      	cmp	r3, #48	; 0x30
 80032f6:	d064      	beq.n	80033c2 <HAL_TIM_ConfigClockSource+0x15a>
 80032f8:	2b30      	cmp	r3, #48	; 0x30
 80032fa:	d86b      	bhi.n	80033d4 <HAL_TIM_ConfigClockSource+0x16c>
 80032fc:	2b20      	cmp	r3, #32
 80032fe:	d060      	beq.n	80033c2 <HAL_TIM_ConfigClockSource+0x15a>
 8003300:	2b20      	cmp	r3, #32
 8003302:	d867      	bhi.n	80033d4 <HAL_TIM_ConfigClockSource+0x16c>
 8003304:	2b00      	cmp	r3, #0
 8003306:	d05c      	beq.n	80033c2 <HAL_TIM_ConfigClockSource+0x15a>
 8003308:	2b10      	cmp	r3, #16
 800330a:	d05a      	beq.n	80033c2 <HAL_TIM_ConfigClockSource+0x15a>
 800330c:	e062      	b.n	80033d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6818      	ldr	r0, [r3, #0]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	6899      	ldr	r1, [r3, #8]
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685a      	ldr	r2, [r3, #4]
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	f000 f985 	bl	800362c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003330:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68ba      	ldr	r2, [r7, #8]
 8003338:	609a      	str	r2, [r3, #8]
      break;
 800333a:	e04f      	b.n	80033dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6818      	ldr	r0, [r3, #0]
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	6899      	ldr	r1, [r3, #8]
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	f000 f96e 	bl	800362c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689a      	ldr	r2, [r3, #8]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800335e:	609a      	str	r2, [r3, #8]
      break;
 8003360:	e03c      	b.n	80033dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6818      	ldr	r0, [r3, #0]
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	6859      	ldr	r1, [r3, #4]
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	461a      	mov	r2, r3
 8003370:	f000 f8e2 	bl	8003538 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2150      	movs	r1, #80	; 0x50
 800337a:	4618      	mov	r0, r3
 800337c:	f000 f93b 	bl	80035f6 <TIM_ITRx_SetConfig>
      break;
 8003380:	e02c      	b.n	80033dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6818      	ldr	r0, [r3, #0]
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	6859      	ldr	r1, [r3, #4]
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	461a      	mov	r2, r3
 8003390:	f000 f901 	bl	8003596 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2160      	movs	r1, #96	; 0x60
 800339a:	4618      	mov	r0, r3
 800339c:	f000 f92b 	bl	80035f6 <TIM_ITRx_SetConfig>
      break;
 80033a0:	e01c      	b.n	80033dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6818      	ldr	r0, [r3, #0]
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	6859      	ldr	r1, [r3, #4]
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	461a      	mov	r2, r3
 80033b0:	f000 f8c2 	bl	8003538 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2140      	movs	r1, #64	; 0x40
 80033ba:	4618      	mov	r0, r3
 80033bc:	f000 f91b 	bl	80035f6 <TIM_ITRx_SetConfig>
      break;
 80033c0:	e00c      	b.n	80033dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4619      	mov	r1, r3
 80033cc:	4610      	mov	r0, r2
 80033ce:	f000 f912 	bl	80035f6 <TIM_ITRx_SetConfig>
      break;
 80033d2:	e003      	b.n	80033dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	73fb      	strb	r3, [r7, #15]
      break;
 80033d8:	e000      	b.n	80033dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80033da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80033ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
	...

080033f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b085      	sub	sp, #20
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a40      	ldr	r2, [pc, #256]	; (800350c <TIM_Base_SetConfig+0x114>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d013      	beq.n	8003438 <TIM_Base_SetConfig+0x40>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003416:	d00f      	beq.n	8003438 <TIM_Base_SetConfig+0x40>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a3d      	ldr	r2, [pc, #244]	; (8003510 <TIM_Base_SetConfig+0x118>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d00b      	beq.n	8003438 <TIM_Base_SetConfig+0x40>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a3c      	ldr	r2, [pc, #240]	; (8003514 <TIM_Base_SetConfig+0x11c>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d007      	beq.n	8003438 <TIM_Base_SetConfig+0x40>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a3b      	ldr	r2, [pc, #236]	; (8003518 <TIM_Base_SetConfig+0x120>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d003      	beq.n	8003438 <TIM_Base_SetConfig+0x40>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a3a      	ldr	r2, [pc, #232]	; (800351c <TIM_Base_SetConfig+0x124>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d108      	bne.n	800344a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800343e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	4313      	orrs	r3, r2
 8003448:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a2f      	ldr	r2, [pc, #188]	; (800350c <TIM_Base_SetConfig+0x114>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d02b      	beq.n	80034aa <TIM_Base_SetConfig+0xb2>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003458:	d027      	beq.n	80034aa <TIM_Base_SetConfig+0xb2>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a2c      	ldr	r2, [pc, #176]	; (8003510 <TIM_Base_SetConfig+0x118>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d023      	beq.n	80034aa <TIM_Base_SetConfig+0xb2>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a2b      	ldr	r2, [pc, #172]	; (8003514 <TIM_Base_SetConfig+0x11c>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d01f      	beq.n	80034aa <TIM_Base_SetConfig+0xb2>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a2a      	ldr	r2, [pc, #168]	; (8003518 <TIM_Base_SetConfig+0x120>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d01b      	beq.n	80034aa <TIM_Base_SetConfig+0xb2>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a29      	ldr	r2, [pc, #164]	; (800351c <TIM_Base_SetConfig+0x124>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d017      	beq.n	80034aa <TIM_Base_SetConfig+0xb2>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a28      	ldr	r2, [pc, #160]	; (8003520 <TIM_Base_SetConfig+0x128>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d013      	beq.n	80034aa <TIM_Base_SetConfig+0xb2>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a27      	ldr	r2, [pc, #156]	; (8003524 <TIM_Base_SetConfig+0x12c>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d00f      	beq.n	80034aa <TIM_Base_SetConfig+0xb2>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a26      	ldr	r2, [pc, #152]	; (8003528 <TIM_Base_SetConfig+0x130>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d00b      	beq.n	80034aa <TIM_Base_SetConfig+0xb2>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a25      	ldr	r2, [pc, #148]	; (800352c <TIM_Base_SetConfig+0x134>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d007      	beq.n	80034aa <TIM_Base_SetConfig+0xb2>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a24      	ldr	r2, [pc, #144]	; (8003530 <TIM_Base_SetConfig+0x138>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d003      	beq.n	80034aa <TIM_Base_SetConfig+0xb2>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a23      	ldr	r2, [pc, #140]	; (8003534 <TIM_Base_SetConfig+0x13c>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d108      	bne.n	80034bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	68fa      	ldr	r2, [r7, #12]
 80034ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	689a      	ldr	r2, [r3, #8]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a0a      	ldr	r2, [pc, #40]	; (800350c <TIM_Base_SetConfig+0x114>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d003      	beq.n	80034f0 <TIM_Base_SetConfig+0xf8>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a0c      	ldr	r2, [pc, #48]	; (800351c <TIM_Base_SetConfig+0x124>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d103      	bne.n	80034f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	691a      	ldr	r2, [r3, #16]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	615a      	str	r2, [r3, #20]
}
 80034fe:	bf00      	nop
 8003500:	3714      	adds	r7, #20
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	40010000 	.word	0x40010000
 8003510:	40000400 	.word	0x40000400
 8003514:	40000800 	.word	0x40000800
 8003518:	40000c00 	.word	0x40000c00
 800351c:	40010400 	.word	0x40010400
 8003520:	40014000 	.word	0x40014000
 8003524:	40014400 	.word	0x40014400
 8003528:	40014800 	.word	0x40014800
 800352c:	40001800 	.word	0x40001800
 8003530:	40001c00 	.word	0x40001c00
 8003534:	40002000 	.word	0x40002000

08003538 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003538:	b480      	push	{r7}
 800353a:	b087      	sub	sp, #28
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6a1b      	ldr	r3, [r3, #32]
 8003548:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	f023 0201 	bic.w	r2, r3, #1
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003562:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	011b      	lsls	r3, r3, #4
 8003568:	693a      	ldr	r2, [r7, #16]
 800356a:	4313      	orrs	r3, r2
 800356c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	f023 030a 	bic.w	r3, r3, #10
 8003574:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003576:	697a      	ldr	r2, [r7, #20]
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	4313      	orrs	r3, r2
 800357c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	693a      	ldr	r2, [r7, #16]
 8003582:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	621a      	str	r2, [r3, #32]
}
 800358a:	bf00      	nop
 800358c:	371c      	adds	r7, #28
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr

08003596 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003596:	b480      	push	{r7}
 8003598:	b087      	sub	sp, #28
 800359a:	af00      	add	r7, sp, #0
 800359c:	60f8      	str	r0, [r7, #12]
 800359e:	60b9      	str	r1, [r7, #8]
 80035a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6a1b      	ldr	r3, [r3, #32]
 80035a6:	f023 0210 	bic.w	r2, r3, #16
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	031b      	lsls	r3, r3, #12
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	011b      	lsls	r3, r3, #4
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	4313      	orrs	r3, r2
 80035dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	697a      	ldr	r2, [r7, #20]
 80035e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	621a      	str	r2, [r3, #32]
}
 80035ea:	bf00      	nop
 80035ec:	371c      	adds	r7, #28
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr

080035f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035f6:	b480      	push	{r7}
 80035f8:	b085      	sub	sp, #20
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
 80035fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800360c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800360e:	683a      	ldr	r2, [r7, #0]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	4313      	orrs	r3, r2
 8003614:	f043 0307 	orr.w	r3, r3, #7
 8003618:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	609a      	str	r2, [r3, #8]
}
 8003620:	bf00      	nop
 8003622:	3714      	adds	r7, #20
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800362c:	b480      	push	{r7}
 800362e:	b087      	sub	sp, #28
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
 8003638:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003646:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	021a      	lsls	r2, r3, #8
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	431a      	orrs	r2, r3
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	4313      	orrs	r3, r2
 8003654:	697a      	ldr	r2, [r7, #20]
 8003656:	4313      	orrs	r3, r2
 8003658:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	697a      	ldr	r2, [r7, #20]
 800365e:	609a      	str	r2, [r3, #8]
}
 8003660:	bf00      	nop
 8003662:	371c      	adds	r7, #28
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800367c:	2b01      	cmp	r3, #1
 800367e:	d101      	bne.n	8003684 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003680:	2302      	movs	r3, #2
 8003682:	e05a      	b.n	800373a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2202      	movs	r2, #2
 8003690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a21      	ldr	r2, [pc, #132]	; (8003748 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d022      	beq.n	800370e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036d0:	d01d      	beq.n	800370e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a1d      	ldr	r2, [pc, #116]	; (800374c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d018      	beq.n	800370e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a1b      	ldr	r2, [pc, #108]	; (8003750 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d013      	beq.n	800370e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a1a      	ldr	r2, [pc, #104]	; (8003754 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d00e      	beq.n	800370e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a18      	ldr	r2, [pc, #96]	; (8003758 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d009      	beq.n	800370e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a17      	ldr	r2, [pc, #92]	; (800375c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d004      	beq.n	800370e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a15      	ldr	r2, [pc, #84]	; (8003760 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d10c      	bne.n	8003728 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003714:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	68ba      	ldr	r2, [r7, #8]
 800371c:	4313      	orrs	r3, r2
 800371e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68ba      	ldr	r2, [r7, #8]
 8003726:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3714      	adds	r7, #20
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	40010000 	.word	0x40010000
 800374c:	40000400 	.word	0x40000400
 8003750:	40000800 	.word	0x40000800
 8003754:	40000c00 	.word	0x40000c00
 8003758:	40010400 	.word	0x40010400
 800375c:	40014000 	.word	0x40014000
 8003760:	40001800 	.word	0x40001800

08003764 <findslot>:
 8003764:	4b0a      	ldr	r3, [pc, #40]	; (8003790 <findslot+0x2c>)
 8003766:	b510      	push	{r4, lr}
 8003768:	4604      	mov	r4, r0
 800376a:	6818      	ldr	r0, [r3, #0]
 800376c:	b118      	cbz	r0, 8003776 <findslot+0x12>
 800376e:	6983      	ldr	r3, [r0, #24]
 8003770:	b90b      	cbnz	r3, 8003776 <findslot+0x12>
 8003772:	f000 faf7 	bl	8003d64 <__sinit>
 8003776:	2c13      	cmp	r4, #19
 8003778:	d807      	bhi.n	800378a <findslot+0x26>
 800377a:	4806      	ldr	r0, [pc, #24]	; (8003794 <findslot+0x30>)
 800377c:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8003780:	3201      	adds	r2, #1
 8003782:	d002      	beq.n	800378a <findslot+0x26>
 8003784:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8003788:	bd10      	pop	{r4, pc}
 800378a:	2000      	movs	r0, #0
 800378c:	e7fc      	b.n	8003788 <findslot+0x24>
 800378e:	bf00      	nop
 8003790:	20000014 	.word	0x20000014
 8003794:	200001b0 	.word	0x200001b0

08003798 <error>:
 8003798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800379a:	4604      	mov	r4, r0
 800379c:	f000 fa84 	bl	8003ca8 <__errno>
 80037a0:	2613      	movs	r6, #19
 80037a2:	4605      	mov	r5, r0
 80037a4:	2700      	movs	r7, #0
 80037a6:	4630      	mov	r0, r6
 80037a8:	4639      	mov	r1, r7
 80037aa:	beab      	bkpt	0x00ab
 80037ac:	4606      	mov	r6, r0
 80037ae:	602e      	str	r6, [r5, #0]
 80037b0:	4620      	mov	r0, r4
 80037b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080037b4 <checkerror>:
 80037b4:	1c43      	adds	r3, r0, #1
 80037b6:	d101      	bne.n	80037bc <checkerror+0x8>
 80037b8:	f7ff bfee 	b.w	8003798 <error>
 80037bc:	4770      	bx	lr

080037be <_swiread>:
 80037be:	b530      	push	{r4, r5, lr}
 80037c0:	b085      	sub	sp, #20
 80037c2:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80037c6:	9203      	str	r2, [sp, #12]
 80037c8:	2406      	movs	r4, #6
 80037ca:	ad01      	add	r5, sp, #4
 80037cc:	4620      	mov	r0, r4
 80037ce:	4629      	mov	r1, r5
 80037d0:	beab      	bkpt	0x00ab
 80037d2:	4604      	mov	r4, r0
 80037d4:	4620      	mov	r0, r4
 80037d6:	f7ff ffed 	bl	80037b4 <checkerror>
 80037da:	b005      	add	sp, #20
 80037dc:	bd30      	pop	{r4, r5, pc}

080037de <_read>:
 80037de:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80037e0:	4615      	mov	r5, r2
 80037e2:	9101      	str	r1, [sp, #4]
 80037e4:	f7ff ffbe 	bl	8003764 <findslot>
 80037e8:	9901      	ldr	r1, [sp, #4]
 80037ea:	4604      	mov	r4, r0
 80037ec:	b938      	cbnz	r0, 80037fe <_read+0x20>
 80037ee:	f000 fa5b 	bl	8003ca8 <__errno>
 80037f2:	2309      	movs	r3, #9
 80037f4:	6003      	str	r3, [r0, #0]
 80037f6:	f04f 30ff 	mov.w	r0, #4294967295
 80037fa:	b003      	add	sp, #12
 80037fc:	bd30      	pop	{r4, r5, pc}
 80037fe:	6800      	ldr	r0, [r0, #0]
 8003800:	462a      	mov	r2, r5
 8003802:	f7ff ffdc 	bl	80037be <_swiread>
 8003806:	1c43      	adds	r3, r0, #1
 8003808:	d0f7      	beq.n	80037fa <_read+0x1c>
 800380a:	6863      	ldr	r3, [r4, #4]
 800380c:	1a2a      	subs	r2, r5, r0
 800380e:	4413      	add	r3, r2
 8003810:	6063      	str	r3, [r4, #4]
 8003812:	4610      	mov	r0, r2
 8003814:	e7f1      	b.n	80037fa <_read+0x1c>

08003816 <_swilseek>:
 8003816:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003818:	460c      	mov	r4, r1
 800381a:	4616      	mov	r6, r2
 800381c:	f7ff ffa2 	bl	8003764 <findslot>
 8003820:	4605      	mov	r5, r0
 8003822:	b940      	cbnz	r0, 8003836 <_swilseek+0x20>
 8003824:	f000 fa40 	bl	8003ca8 <__errno>
 8003828:	2309      	movs	r3, #9
 800382a:	6003      	str	r3, [r0, #0]
 800382c:	f04f 34ff 	mov.w	r4, #4294967295
 8003830:	4620      	mov	r0, r4
 8003832:	b003      	add	sp, #12
 8003834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003836:	2e02      	cmp	r6, #2
 8003838:	d903      	bls.n	8003842 <_swilseek+0x2c>
 800383a:	f000 fa35 	bl	8003ca8 <__errno>
 800383e:	2316      	movs	r3, #22
 8003840:	e7f3      	b.n	800382a <_swilseek+0x14>
 8003842:	2e01      	cmp	r6, #1
 8003844:	d112      	bne.n	800386c <_swilseek+0x56>
 8003846:	6843      	ldr	r3, [r0, #4]
 8003848:	18e4      	adds	r4, r4, r3
 800384a:	d4f6      	bmi.n	800383a <_swilseek+0x24>
 800384c:	682b      	ldr	r3, [r5, #0]
 800384e:	260a      	movs	r6, #10
 8003850:	e9cd 3400 	strd	r3, r4, [sp]
 8003854:	466f      	mov	r7, sp
 8003856:	4630      	mov	r0, r6
 8003858:	4639      	mov	r1, r7
 800385a:	beab      	bkpt	0x00ab
 800385c:	4606      	mov	r6, r0
 800385e:	4630      	mov	r0, r6
 8003860:	f7ff ffa8 	bl	80037b4 <checkerror>
 8003864:	2800      	cmp	r0, #0
 8003866:	dbe1      	blt.n	800382c <_swilseek+0x16>
 8003868:	606c      	str	r4, [r5, #4]
 800386a:	e7e1      	b.n	8003830 <_swilseek+0x1a>
 800386c:	2e02      	cmp	r6, #2
 800386e:	d1ed      	bne.n	800384c <_swilseek+0x36>
 8003870:	6803      	ldr	r3, [r0, #0]
 8003872:	9300      	str	r3, [sp, #0]
 8003874:	260c      	movs	r6, #12
 8003876:	466f      	mov	r7, sp
 8003878:	4630      	mov	r0, r6
 800387a:	4639      	mov	r1, r7
 800387c:	beab      	bkpt	0x00ab
 800387e:	4606      	mov	r6, r0
 8003880:	4630      	mov	r0, r6
 8003882:	f7ff ff97 	bl	80037b4 <checkerror>
 8003886:	1c43      	adds	r3, r0, #1
 8003888:	d0d0      	beq.n	800382c <_swilseek+0x16>
 800388a:	4404      	add	r4, r0
 800388c:	e7de      	b.n	800384c <_swilseek+0x36>

0800388e <_lseek>:
 800388e:	f7ff bfc2 	b.w	8003816 <_swilseek>

08003892 <_swiwrite>:
 8003892:	b530      	push	{r4, r5, lr}
 8003894:	b085      	sub	sp, #20
 8003896:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800389a:	9203      	str	r2, [sp, #12]
 800389c:	2405      	movs	r4, #5
 800389e:	ad01      	add	r5, sp, #4
 80038a0:	4620      	mov	r0, r4
 80038a2:	4629      	mov	r1, r5
 80038a4:	beab      	bkpt	0x00ab
 80038a6:	4604      	mov	r4, r0
 80038a8:	4620      	mov	r0, r4
 80038aa:	f7ff ff83 	bl	80037b4 <checkerror>
 80038ae:	b005      	add	sp, #20
 80038b0:	bd30      	pop	{r4, r5, pc}

080038b2 <_write>:
 80038b2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80038b4:	4615      	mov	r5, r2
 80038b6:	9101      	str	r1, [sp, #4]
 80038b8:	f7ff ff54 	bl	8003764 <findslot>
 80038bc:	9901      	ldr	r1, [sp, #4]
 80038be:	4604      	mov	r4, r0
 80038c0:	b930      	cbnz	r0, 80038d0 <_write+0x1e>
 80038c2:	f000 f9f1 	bl	8003ca8 <__errno>
 80038c6:	2309      	movs	r3, #9
 80038c8:	6003      	str	r3, [r0, #0]
 80038ca:	f04f 30ff 	mov.w	r0, #4294967295
 80038ce:	e012      	b.n	80038f6 <_write+0x44>
 80038d0:	6800      	ldr	r0, [r0, #0]
 80038d2:	462a      	mov	r2, r5
 80038d4:	f7ff ffdd 	bl	8003892 <_swiwrite>
 80038d8:	2800      	cmp	r0, #0
 80038da:	dbf6      	blt.n	80038ca <_write+0x18>
 80038dc:	6862      	ldr	r2, [r4, #4]
 80038de:	1a2b      	subs	r3, r5, r0
 80038e0:	441a      	add	r2, r3
 80038e2:	42a8      	cmp	r0, r5
 80038e4:	6062      	str	r2, [r4, #4]
 80038e6:	d105      	bne.n	80038f4 <_write+0x42>
 80038e8:	2000      	movs	r0, #0
 80038ea:	b003      	add	sp, #12
 80038ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80038f0:	f7ff bf52 	b.w	8003798 <error>
 80038f4:	4618      	mov	r0, r3
 80038f6:	b003      	add	sp, #12
 80038f8:	bd30      	pop	{r4, r5, pc}

080038fa <_swiclose>:
 80038fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80038fc:	2402      	movs	r4, #2
 80038fe:	9001      	str	r0, [sp, #4]
 8003900:	ad01      	add	r5, sp, #4
 8003902:	4620      	mov	r0, r4
 8003904:	4629      	mov	r1, r5
 8003906:	beab      	bkpt	0x00ab
 8003908:	4604      	mov	r4, r0
 800390a:	4620      	mov	r0, r4
 800390c:	f7ff ff52 	bl	80037b4 <checkerror>
 8003910:	b003      	add	sp, #12
 8003912:	bd30      	pop	{r4, r5, pc}

08003914 <_close>:
 8003914:	b538      	push	{r3, r4, r5, lr}
 8003916:	4605      	mov	r5, r0
 8003918:	f7ff ff24 	bl	8003764 <findslot>
 800391c:	4604      	mov	r4, r0
 800391e:	b930      	cbnz	r0, 800392e <_close+0x1a>
 8003920:	f000 f9c2 	bl	8003ca8 <__errno>
 8003924:	2309      	movs	r3, #9
 8003926:	6003      	str	r3, [r0, #0]
 8003928:	f04f 30ff 	mov.w	r0, #4294967295
 800392c:	bd38      	pop	{r3, r4, r5, pc}
 800392e:	3d01      	subs	r5, #1
 8003930:	2d01      	cmp	r5, #1
 8003932:	d809      	bhi.n	8003948 <_close+0x34>
 8003934:	4b09      	ldr	r3, [pc, #36]	; (800395c <_close+0x48>)
 8003936:	689a      	ldr	r2, [r3, #8]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	429a      	cmp	r2, r3
 800393c:	d104      	bne.n	8003948 <_close+0x34>
 800393e:	f04f 33ff 	mov.w	r3, #4294967295
 8003942:	6003      	str	r3, [r0, #0]
 8003944:	2000      	movs	r0, #0
 8003946:	e7f1      	b.n	800392c <_close+0x18>
 8003948:	6820      	ldr	r0, [r4, #0]
 800394a:	f7ff ffd6 	bl	80038fa <_swiclose>
 800394e:	2800      	cmp	r0, #0
 8003950:	d1ec      	bne.n	800392c <_close+0x18>
 8003952:	f04f 33ff 	mov.w	r3, #4294967295
 8003956:	6023      	str	r3, [r4, #0]
 8003958:	e7e8      	b.n	800392c <_close+0x18>
 800395a:	bf00      	nop
 800395c:	200001b0 	.word	0x200001b0

08003960 <_swistat>:
 8003960:	b570      	push	{r4, r5, r6, lr}
 8003962:	460c      	mov	r4, r1
 8003964:	f7ff fefe 	bl	8003764 <findslot>
 8003968:	4605      	mov	r5, r0
 800396a:	b930      	cbnz	r0, 800397a <_swistat+0x1a>
 800396c:	f000 f99c 	bl	8003ca8 <__errno>
 8003970:	2309      	movs	r3, #9
 8003972:	6003      	str	r3, [r0, #0]
 8003974:	f04f 30ff 	mov.w	r0, #4294967295
 8003978:	bd70      	pop	{r4, r5, r6, pc}
 800397a:	6863      	ldr	r3, [r4, #4]
 800397c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003980:	6063      	str	r3, [r4, #4]
 8003982:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003986:	64a3      	str	r3, [r4, #72]	; 0x48
 8003988:	260c      	movs	r6, #12
 800398a:	4630      	mov	r0, r6
 800398c:	4629      	mov	r1, r5
 800398e:	beab      	bkpt	0x00ab
 8003990:	4605      	mov	r5, r0
 8003992:	4628      	mov	r0, r5
 8003994:	f7ff ff0e 	bl	80037b4 <checkerror>
 8003998:	1c43      	adds	r3, r0, #1
 800399a:	bf1c      	itt	ne
 800399c:	6120      	strne	r0, [r4, #16]
 800399e:	2000      	movne	r0, #0
 80039a0:	e7ea      	b.n	8003978 <_swistat+0x18>

080039a2 <_fstat>:
 80039a2:	460b      	mov	r3, r1
 80039a4:	b510      	push	{r4, lr}
 80039a6:	2100      	movs	r1, #0
 80039a8:	4604      	mov	r4, r0
 80039aa:	2258      	movs	r2, #88	; 0x58
 80039ac:	4618      	mov	r0, r3
 80039ae:	f000 fa9e 	bl	8003eee <memset>
 80039b2:	4601      	mov	r1, r0
 80039b4:	4620      	mov	r0, r4
 80039b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039ba:	f7ff bfd1 	b.w	8003960 <_swistat>

080039be <_stat>:
 80039be:	b538      	push	{r3, r4, r5, lr}
 80039c0:	460d      	mov	r5, r1
 80039c2:	4604      	mov	r4, r0
 80039c4:	2258      	movs	r2, #88	; 0x58
 80039c6:	2100      	movs	r1, #0
 80039c8:	4628      	mov	r0, r5
 80039ca:	f000 fa90 	bl	8003eee <memset>
 80039ce:	4620      	mov	r0, r4
 80039d0:	2100      	movs	r1, #0
 80039d2:	f000 f811 	bl	80039f8 <_swiopen>
 80039d6:	1c43      	adds	r3, r0, #1
 80039d8:	4604      	mov	r4, r0
 80039da:	d00b      	beq.n	80039f4 <_stat+0x36>
 80039dc:	686b      	ldr	r3, [r5, #4]
 80039de:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80039e2:	606b      	str	r3, [r5, #4]
 80039e4:	4629      	mov	r1, r5
 80039e6:	f7ff ffbb 	bl	8003960 <_swistat>
 80039ea:	4605      	mov	r5, r0
 80039ec:	4620      	mov	r0, r4
 80039ee:	f7ff ff91 	bl	8003914 <_close>
 80039f2:	462c      	mov	r4, r5
 80039f4:	4620      	mov	r0, r4
 80039f6:	bd38      	pop	{r3, r4, r5, pc}

080039f8 <_swiopen>:
 80039f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80039fc:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8003aa8 <_swiopen+0xb0>
 8003a00:	b097      	sub	sp, #92	; 0x5c
 8003a02:	4607      	mov	r7, r0
 8003a04:	460e      	mov	r6, r1
 8003a06:	2500      	movs	r5, #0
 8003a08:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 8003a0c:	1c61      	adds	r1, r4, #1
 8003a0e:	d037      	beq.n	8003a80 <_swiopen+0x88>
 8003a10:	3501      	adds	r5, #1
 8003a12:	2d14      	cmp	r5, #20
 8003a14:	d1f8      	bne.n	8003a08 <_swiopen+0x10>
 8003a16:	f000 f947 	bl	8003ca8 <__errno>
 8003a1a:	2318      	movs	r3, #24
 8003a1c:	6003      	str	r3, [r0, #0]
 8003a1e:	f04f 34ff 	mov.w	r4, #4294967295
 8003a22:	e03d      	b.n	8003aa0 <_swiopen+0xa8>
 8003a24:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8003a28:	f240 6301 	movw	r3, #1537	; 0x601
 8003a2c:	07b2      	lsls	r2, r6, #30
 8003a2e:	bf48      	it	mi
 8003a30:	f044 0402 	orrmi.w	r4, r4, #2
 8003a34:	421e      	tst	r6, r3
 8003a36:	bf18      	it	ne
 8003a38:	f044 0404 	orrne.w	r4, r4, #4
 8003a3c:	0733      	lsls	r3, r6, #28
 8003a3e:	bf48      	it	mi
 8003a40:	f024 0404 	bicmi.w	r4, r4, #4
 8003a44:	4638      	mov	r0, r7
 8003a46:	bf48      	it	mi
 8003a48:	f044 0408 	orrmi.w	r4, r4, #8
 8003a4c:	9700      	str	r7, [sp, #0]
 8003a4e:	f7fc fbcf 	bl	80001f0 <strlen>
 8003a52:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8003a56:	2401      	movs	r4, #1
 8003a58:	4620      	mov	r0, r4
 8003a5a:	4649      	mov	r1, r9
 8003a5c:	beab      	bkpt	0x00ab
 8003a5e:	4604      	mov	r4, r0
 8003a60:	2c00      	cmp	r4, #0
 8003a62:	db08      	blt.n	8003a76 <_swiopen+0x7e>
 8003a64:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8003a68:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	f8c8 3004 	str.w	r3, [r8, #4]
 8003a72:	462c      	mov	r4, r5
 8003a74:	e014      	b.n	8003aa0 <_swiopen+0xa8>
 8003a76:	4620      	mov	r0, r4
 8003a78:	f7ff fe8e 	bl	8003798 <error>
 8003a7c:	4604      	mov	r4, r0
 8003a7e:	e00f      	b.n	8003aa0 <_swiopen+0xa8>
 8003a80:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8003a84:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003a88:	46e9      	mov	r9, sp
 8003a8a:	d1cb      	bne.n	8003a24 <_swiopen+0x2c>
 8003a8c:	4649      	mov	r1, r9
 8003a8e:	4638      	mov	r0, r7
 8003a90:	f7ff ff95 	bl	80039be <_stat>
 8003a94:	3001      	adds	r0, #1
 8003a96:	d0c5      	beq.n	8003a24 <_swiopen+0x2c>
 8003a98:	f000 f906 	bl	8003ca8 <__errno>
 8003a9c:	2311      	movs	r3, #17
 8003a9e:	6003      	str	r3, [r0, #0]
 8003aa0:	4620      	mov	r0, r4
 8003aa2:	b017      	add	sp, #92	; 0x5c
 8003aa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003aa8:	200001b0 	.word	0x200001b0

08003aac <_get_semihosting_exts>:
 8003aac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003ab0:	4606      	mov	r6, r0
 8003ab2:	460f      	mov	r7, r1
 8003ab4:	482a      	ldr	r0, [pc, #168]	; (8003b60 <_get_semihosting_exts+0xb4>)
 8003ab6:	2100      	movs	r1, #0
 8003ab8:	4615      	mov	r5, r2
 8003aba:	f7ff ff9d 	bl	80039f8 <_swiopen>
 8003abe:	462a      	mov	r2, r5
 8003ac0:	4604      	mov	r4, r0
 8003ac2:	2100      	movs	r1, #0
 8003ac4:	4630      	mov	r0, r6
 8003ac6:	f000 fa12 	bl	8003eee <memset>
 8003aca:	1c63      	adds	r3, r4, #1
 8003acc:	d016      	beq.n	8003afc <_get_semihosting_exts+0x50>
 8003ace:	4620      	mov	r0, r4
 8003ad0:	f7ff fe48 	bl	8003764 <findslot>
 8003ad4:	f04f 090c 	mov.w	r9, #12
 8003ad8:	4680      	mov	r8, r0
 8003ada:	4648      	mov	r0, r9
 8003adc:	4641      	mov	r1, r8
 8003ade:	beab      	bkpt	0x00ab
 8003ae0:	4680      	mov	r8, r0
 8003ae2:	4640      	mov	r0, r8
 8003ae4:	f7ff fe66 	bl	80037b4 <checkerror>
 8003ae8:	2803      	cmp	r0, #3
 8003aea:	dd02      	ble.n	8003af2 <_get_semihosting_exts+0x46>
 8003aec:	1ec3      	subs	r3, r0, #3
 8003aee:	42ab      	cmp	r3, r5
 8003af0:	dc08      	bgt.n	8003b04 <_get_semihosting_exts+0x58>
 8003af2:	4620      	mov	r0, r4
 8003af4:	f7ff ff0e 	bl	8003914 <_close>
 8003af8:	f04f 34ff 	mov.w	r4, #4294967295
 8003afc:	4620      	mov	r0, r4
 8003afe:	b003      	add	sp, #12
 8003b00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003b04:	2204      	movs	r2, #4
 8003b06:	eb0d 0102 	add.w	r1, sp, r2
 8003b0a:	4620      	mov	r0, r4
 8003b0c:	f7ff fe67 	bl	80037de <_read>
 8003b10:	2803      	cmp	r0, #3
 8003b12:	ddee      	ble.n	8003af2 <_get_semihosting_exts+0x46>
 8003b14:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003b18:	2b53      	cmp	r3, #83	; 0x53
 8003b1a:	d1ea      	bne.n	8003af2 <_get_semihosting_exts+0x46>
 8003b1c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003b20:	2b48      	cmp	r3, #72	; 0x48
 8003b22:	d1e6      	bne.n	8003af2 <_get_semihosting_exts+0x46>
 8003b24:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8003b28:	2b46      	cmp	r3, #70	; 0x46
 8003b2a:	d1e2      	bne.n	8003af2 <_get_semihosting_exts+0x46>
 8003b2c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003b30:	2b42      	cmp	r3, #66	; 0x42
 8003b32:	d1de      	bne.n	8003af2 <_get_semihosting_exts+0x46>
 8003b34:	2201      	movs	r2, #1
 8003b36:	4639      	mov	r1, r7
 8003b38:	4620      	mov	r0, r4
 8003b3a:	f7ff fe6c 	bl	8003816 <_swilseek>
 8003b3e:	2800      	cmp	r0, #0
 8003b40:	dbd7      	blt.n	8003af2 <_get_semihosting_exts+0x46>
 8003b42:	462a      	mov	r2, r5
 8003b44:	4631      	mov	r1, r6
 8003b46:	4620      	mov	r0, r4
 8003b48:	f7ff fe49 	bl	80037de <_read>
 8003b4c:	4605      	mov	r5, r0
 8003b4e:	4620      	mov	r0, r4
 8003b50:	f7ff fee0 	bl	8003914 <_close>
 8003b54:	4628      	mov	r0, r5
 8003b56:	f7ff fe2d 	bl	80037b4 <checkerror>
 8003b5a:	4604      	mov	r4, r0
 8003b5c:	e7ce      	b.n	8003afc <_get_semihosting_exts+0x50>
 8003b5e:	bf00      	nop
 8003b60:	08004c68 	.word	0x08004c68

08003b64 <initialise_semihosting_exts>:
 8003b64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003b66:	4d0a      	ldr	r5, [pc, #40]	; (8003b90 <initialise_semihosting_exts+0x2c>)
 8003b68:	4c0a      	ldr	r4, [pc, #40]	; (8003b94 <initialise_semihosting_exts+0x30>)
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	a801      	add	r0, sp, #4
 8003b70:	6029      	str	r1, [r5, #0]
 8003b72:	6022      	str	r2, [r4, #0]
 8003b74:	f7ff ff9a 	bl	8003aac <_get_semihosting_exts>
 8003b78:	2800      	cmp	r0, #0
 8003b7a:	dd07      	ble.n	8003b8c <initialise_semihosting_exts+0x28>
 8003b7c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003b80:	f003 0201 	and.w	r2, r3, #1
 8003b84:	f003 0302 	and.w	r3, r3, #2
 8003b88:	602a      	str	r2, [r5, #0]
 8003b8a:	6023      	str	r3, [r4, #0]
 8003b8c:	b003      	add	sp, #12
 8003b8e:	bd30      	pop	{r4, r5, pc}
 8003b90:	2000000c 	.word	0x2000000c
 8003b94:	20000010 	.word	0x20000010

08003b98 <_has_ext_stdout_stderr>:
 8003b98:	b510      	push	{r4, lr}
 8003b9a:	4c04      	ldr	r4, [pc, #16]	; (8003bac <_has_ext_stdout_stderr+0x14>)
 8003b9c:	6823      	ldr	r3, [r4, #0]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	da01      	bge.n	8003ba6 <_has_ext_stdout_stderr+0xe>
 8003ba2:	f7ff ffdf 	bl	8003b64 <initialise_semihosting_exts>
 8003ba6:	6820      	ldr	r0, [r4, #0]
 8003ba8:	bd10      	pop	{r4, pc}
 8003baa:	bf00      	nop
 8003bac:	20000010 	.word	0x20000010

08003bb0 <initialise_monitor_handles>:
 8003bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bb4:	b085      	sub	sp, #20
 8003bb6:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8003c68 <initialise_monitor_handles+0xb8>
 8003bba:	f8cd 9004 	str.w	r9, [sp, #4]
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	2400      	movs	r4, #0
 8003bc2:	9303      	str	r3, [sp, #12]
 8003bc4:	af01      	add	r7, sp, #4
 8003bc6:	9402      	str	r4, [sp, #8]
 8003bc8:	2501      	movs	r5, #1
 8003bca:	4628      	mov	r0, r5
 8003bcc:	4639      	mov	r1, r7
 8003bce:	beab      	bkpt	0x00ab
 8003bd0:	4605      	mov	r5, r0
 8003bd2:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8003c6c <initialise_monitor_handles+0xbc>
 8003bd6:	4623      	mov	r3, r4
 8003bd8:	4c20      	ldr	r4, [pc, #128]	; (8003c5c <initialise_monitor_handles+0xac>)
 8003bda:	f8c8 5000 	str.w	r5, [r8]
 8003bde:	f04f 32ff 	mov.w	r2, #4294967295
 8003be2:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8003be6:	3301      	adds	r3, #1
 8003be8:	2b14      	cmp	r3, #20
 8003bea:	d1fa      	bne.n	8003be2 <initialise_monitor_handles+0x32>
 8003bec:	f7ff ffd4 	bl	8003b98 <_has_ext_stdout_stderr>
 8003bf0:	4d1b      	ldr	r5, [pc, #108]	; (8003c60 <initialise_monitor_handles+0xb0>)
 8003bf2:	b1d0      	cbz	r0, 8003c2a <initialise_monitor_handles+0x7a>
 8003bf4:	f04f 0a03 	mov.w	sl, #3
 8003bf8:	2304      	movs	r3, #4
 8003bfa:	f8cd 9004 	str.w	r9, [sp, #4]
 8003bfe:	2601      	movs	r6, #1
 8003c00:	f8cd a00c 	str.w	sl, [sp, #12]
 8003c04:	9302      	str	r3, [sp, #8]
 8003c06:	4630      	mov	r0, r6
 8003c08:	4639      	mov	r1, r7
 8003c0a:	beab      	bkpt	0x00ab
 8003c0c:	4683      	mov	fp, r0
 8003c0e:	4b15      	ldr	r3, [pc, #84]	; (8003c64 <initialise_monitor_handles+0xb4>)
 8003c10:	f8cd 9004 	str.w	r9, [sp, #4]
 8003c14:	f8c3 b000 	str.w	fp, [r3]
 8003c18:	2308      	movs	r3, #8
 8003c1a:	f8cd a00c 	str.w	sl, [sp, #12]
 8003c1e:	9302      	str	r3, [sp, #8]
 8003c20:	4630      	mov	r0, r6
 8003c22:	4639      	mov	r1, r7
 8003c24:	beab      	bkpt	0x00ab
 8003c26:	4606      	mov	r6, r0
 8003c28:	602e      	str	r6, [r5, #0]
 8003c2a:	682b      	ldr	r3, [r5, #0]
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	bf02      	ittt	eq
 8003c30:	4b0c      	ldreq	r3, [pc, #48]	; (8003c64 <initialise_monitor_handles+0xb4>)
 8003c32:	681b      	ldreq	r3, [r3, #0]
 8003c34:	602b      	streq	r3, [r5, #0]
 8003c36:	2600      	movs	r6, #0
 8003c38:	f8d8 3000 	ldr.w	r3, [r8]
 8003c3c:	6023      	str	r3, [r4, #0]
 8003c3e:	6066      	str	r6, [r4, #4]
 8003c40:	f7ff ffaa 	bl	8003b98 <_has_ext_stdout_stderr>
 8003c44:	b130      	cbz	r0, 8003c54 <initialise_monitor_handles+0xa4>
 8003c46:	4b07      	ldr	r3, [pc, #28]	; (8003c64 <initialise_monitor_handles+0xb4>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8003c4e:	682b      	ldr	r3, [r5, #0]
 8003c50:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8003c54:	b005      	add	sp, #20
 8003c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c5a:	bf00      	nop
 8003c5c:	200001b0 	.word	0x200001b0
 8003c60:	200001a4 	.word	0x200001a4
 8003c64:	200001ac 	.word	0x200001ac
 8003c68:	08004c7e 	.word	0x08004c7e
 8003c6c:	200001a8 	.word	0x200001a8

08003c70 <_isatty>:
 8003c70:	b570      	push	{r4, r5, r6, lr}
 8003c72:	f7ff fd77 	bl	8003764 <findslot>
 8003c76:	2509      	movs	r5, #9
 8003c78:	4604      	mov	r4, r0
 8003c7a:	b920      	cbnz	r0, 8003c86 <_isatty+0x16>
 8003c7c:	f000 f814 	bl	8003ca8 <__errno>
 8003c80:	6005      	str	r5, [r0, #0]
 8003c82:	4620      	mov	r0, r4
 8003c84:	bd70      	pop	{r4, r5, r6, pc}
 8003c86:	4628      	mov	r0, r5
 8003c88:	4621      	mov	r1, r4
 8003c8a:	beab      	bkpt	0x00ab
 8003c8c:	4604      	mov	r4, r0
 8003c8e:	2c01      	cmp	r4, #1
 8003c90:	d0f7      	beq.n	8003c82 <_isatty+0x12>
 8003c92:	f000 f809 	bl	8003ca8 <__errno>
 8003c96:	2400      	movs	r4, #0
 8003c98:	4605      	mov	r5, r0
 8003c9a:	2613      	movs	r6, #19
 8003c9c:	4630      	mov	r0, r6
 8003c9e:	4621      	mov	r1, r4
 8003ca0:	beab      	bkpt	0x00ab
 8003ca2:	4606      	mov	r6, r0
 8003ca4:	602e      	str	r6, [r5, #0]
 8003ca6:	e7ec      	b.n	8003c82 <_isatty+0x12>

08003ca8 <__errno>:
 8003ca8:	4b01      	ldr	r3, [pc, #4]	; (8003cb0 <__errno+0x8>)
 8003caa:	6818      	ldr	r0, [r3, #0]
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	20000014 	.word	0x20000014

08003cb4 <std>:
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	b510      	push	{r4, lr}
 8003cb8:	4604      	mov	r4, r0
 8003cba:	e9c0 3300 	strd	r3, r3, [r0]
 8003cbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003cc2:	6083      	str	r3, [r0, #8]
 8003cc4:	8181      	strh	r1, [r0, #12]
 8003cc6:	6643      	str	r3, [r0, #100]	; 0x64
 8003cc8:	81c2      	strh	r2, [r0, #14]
 8003cca:	6183      	str	r3, [r0, #24]
 8003ccc:	4619      	mov	r1, r3
 8003cce:	2208      	movs	r2, #8
 8003cd0:	305c      	adds	r0, #92	; 0x5c
 8003cd2:	f000 f90c 	bl	8003eee <memset>
 8003cd6:	4b05      	ldr	r3, [pc, #20]	; (8003cec <std+0x38>)
 8003cd8:	6263      	str	r3, [r4, #36]	; 0x24
 8003cda:	4b05      	ldr	r3, [pc, #20]	; (8003cf0 <std+0x3c>)
 8003cdc:	62a3      	str	r3, [r4, #40]	; 0x28
 8003cde:	4b05      	ldr	r3, [pc, #20]	; (8003cf4 <std+0x40>)
 8003ce0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003ce2:	4b05      	ldr	r3, [pc, #20]	; (8003cf8 <std+0x44>)
 8003ce4:	6224      	str	r4, [r4, #32]
 8003ce6:	6323      	str	r3, [r4, #48]	; 0x30
 8003ce8:	bd10      	pop	{r4, pc}
 8003cea:	bf00      	nop
 8003cec:	08004079 	.word	0x08004079
 8003cf0:	0800409b 	.word	0x0800409b
 8003cf4:	080040d3 	.word	0x080040d3
 8003cf8:	080040f7 	.word	0x080040f7

08003cfc <_cleanup_r>:
 8003cfc:	4901      	ldr	r1, [pc, #4]	; (8003d04 <_cleanup_r+0x8>)
 8003cfe:	f000 b8af 	b.w	8003e60 <_fwalk_reent>
 8003d02:	bf00      	nop
 8003d04:	08004251 	.word	0x08004251

08003d08 <__sfmoreglue>:
 8003d08:	b570      	push	{r4, r5, r6, lr}
 8003d0a:	2268      	movs	r2, #104	; 0x68
 8003d0c:	1e4d      	subs	r5, r1, #1
 8003d0e:	4355      	muls	r5, r2
 8003d10:	460e      	mov	r6, r1
 8003d12:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003d16:	f000 f913 	bl	8003f40 <_malloc_r>
 8003d1a:	4604      	mov	r4, r0
 8003d1c:	b140      	cbz	r0, 8003d30 <__sfmoreglue+0x28>
 8003d1e:	2100      	movs	r1, #0
 8003d20:	e9c0 1600 	strd	r1, r6, [r0]
 8003d24:	300c      	adds	r0, #12
 8003d26:	60a0      	str	r0, [r4, #8]
 8003d28:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003d2c:	f000 f8df 	bl	8003eee <memset>
 8003d30:	4620      	mov	r0, r4
 8003d32:	bd70      	pop	{r4, r5, r6, pc}

08003d34 <__sfp_lock_acquire>:
 8003d34:	4801      	ldr	r0, [pc, #4]	; (8003d3c <__sfp_lock_acquire+0x8>)
 8003d36:	f000 b8d8 	b.w	8003eea <__retarget_lock_acquire_recursive>
 8003d3a:	bf00      	nop
 8003d3c:	20000251 	.word	0x20000251

08003d40 <__sfp_lock_release>:
 8003d40:	4801      	ldr	r0, [pc, #4]	; (8003d48 <__sfp_lock_release+0x8>)
 8003d42:	f000 b8d3 	b.w	8003eec <__retarget_lock_release_recursive>
 8003d46:	bf00      	nop
 8003d48:	20000251 	.word	0x20000251

08003d4c <__sinit_lock_acquire>:
 8003d4c:	4801      	ldr	r0, [pc, #4]	; (8003d54 <__sinit_lock_acquire+0x8>)
 8003d4e:	f000 b8cc 	b.w	8003eea <__retarget_lock_acquire_recursive>
 8003d52:	bf00      	nop
 8003d54:	20000252 	.word	0x20000252

08003d58 <__sinit_lock_release>:
 8003d58:	4801      	ldr	r0, [pc, #4]	; (8003d60 <__sinit_lock_release+0x8>)
 8003d5a:	f000 b8c7 	b.w	8003eec <__retarget_lock_release_recursive>
 8003d5e:	bf00      	nop
 8003d60:	20000252 	.word	0x20000252

08003d64 <__sinit>:
 8003d64:	b510      	push	{r4, lr}
 8003d66:	4604      	mov	r4, r0
 8003d68:	f7ff fff0 	bl	8003d4c <__sinit_lock_acquire>
 8003d6c:	69a3      	ldr	r3, [r4, #24]
 8003d6e:	b11b      	cbz	r3, 8003d78 <__sinit+0x14>
 8003d70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d74:	f7ff bff0 	b.w	8003d58 <__sinit_lock_release>
 8003d78:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003d7c:	6523      	str	r3, [r4, #80]	; 0x50
 8003d7e:	4b13      	ldr	r3, [pc, #76]	; (8003dcc <__sinit+0x68>)
 8003d80:	4a13      	ldr	r2, [pc, #76]	; (8003dd0 <__sinit+0x6c>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	62a2      	str	r2, [r4, #40]	; 0x28
 8003d86:	42a3      	cmp	r3, r4
 8003d88:	bf04      	itt	eq
 8003d8a:	2301      	moveq	r3, #1
 8003d8c:	61a3      	streq	r3, [r4, #24]
 8003d8e:	4620      	mov	r0, r4
 8003d90:	f000 f820 	bl	8003dd4 <__sfp>
 8003d94:	6060      	str	r0, [r4, #4]
 8003d96:	4620      	mov	r0, r4
 8003d98:	f000 f81c 	bl	8003dd4 <__sfp>
 8003d9c:	60a0      	str	r0, [r4, #8]
 8003d9e:	4620      	mov	r0, r4
 8003da0:	f000 f818 	bl	8003dd4 <__sfp>
 8003da4:	2200      	movs	r2, #0
 8003da6:	60e0      	str	r0, [r4, #12]
 8003da8:	2104      	movs	r1, #4
 8003daa:	6860      	ldr	r0, [r4, #4]
 8003dac:	f7ff ff82 	bl	8003cb4 <std>
 8003db0:	68a0      	ldr	r0, [r4, #8]
 8003db2:	2201      	movs	r2, #1
 8003db4:	2109      	movs	r1, #9
 8003db6:	f7ff ff7d 	bl	8003cb4 <std>
 8003dba:	68e0      	ldr	r0, [r4, #12]
 8003dbc:	2202      	movs	r2, #2
 8003dbe:	2112      	movs	r1, #18
 8003dc0:	f7ff ff78 	bl	8003cb4 <std>
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	61a3      	str	r3, [r4, #24]
 8003dc8:	e7d2      	b.n	8003d70 <__sinit+0xc>
 8003dca:	bf00      	nop
 8003dcc:	08004ce4 	.word	0x08004ce4
 8003dd0:	08003cfd 	.word	0x08003cfd

08003dd4 <__sfp>:
 8003dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dd6:	4607      	mov	r7, r0
 8003dd8:	f7ff ffac 	bl	8003d34 <__sfp_lock_acquire>
 8003ddc:	4b1e      	ldr	r3, [pc, #120]	; (8003e58 <__sfp+0x84>)
 8003dde:	681e      	ldr	r6, [r3, #0]
 8003de0:	69b3      	ldr	r3, [r6, #24]
 8003de2:	b913      	cbnz	r3, 8003dea <__sfp+0x16>
 8003de4:	4630      	mov	r0, r6
 8003de6:	f7ff ffbd 	bl	8003d64 <__sinit>
 8003dea:	3648      	adds	r6, #72	; 0x48
 8003dec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003df0:	3b01      	subs	r3, #1
 8003df2:	d503      	bpl.n	8003dfc <__sfp+0x28>
 8003df4:	6833      	ldr	r3, [r6, #0]
 8003df6:	b30b      	cbz	r3, 8003e3c <__sfp+0x68>
 8003df8:	6836      	ldr	r6, [r6, #0]
 8003dfa:	e7f7      	b.n	8003dec <__sfp+0x18>
 8003dfc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003e00:	b9d5      	cbnz	r5, 8003e38 <__sfp+0x64>
 8003e02:	4b16      	ldr	r3, [pc, #88]	; (8003e5c <__sfp+0x88>)
 8003e04:	60e3      	str	r3, [r4, #12]
 8003e06:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003e0a:	6665      	str	r5, [r4, #100]	; 0x64
 8003e0c:	f000 f86c 	bl	8003ee8 <__retarget_lock_init_recursive>
 8003e10:	f7ff ff96 	bl	8003d40 <__sfp_lock_release>
 8003e14:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003e18:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003e1c:	6025      	str	r5, [r4, #0]
 8003e1e:	61a5      	str	r5, [r4, #24]
 8003e20:	2208      	movs	r2, #8
 8003e22:	4629      	mov	r1, r5
 8003e24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003e28:	f000 f861 	bl	8003eee <memset>
 8003e2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003e30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003e34:	4620      	mov	r0, r4
 8003e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e38:	3468      	adds	r4, #104	; 0x68
 8003e3a:	e7d9      	b.n	8003df0 <__sfp+0x1c>
 8003e3c:	2104      	movs	r1, #4
 8003e3e:	4638      	mov	r0, r7
 8003e40:	f7ff ff62 	bl	8003d08 <__sfmoreglue>
 8003e44:	4604      	mov	r4, r0
 8003e46:	6030      	str	r0, [r6, #0]
 8003e48:	2800      	cmp	r0, #0
 8003e4a:	d1d5      	bne.n	8003df8 <__sfp+0x24>
 8003e4c:	f7ff ff78 	bl	8003d40 <__sfp_lock_release>
 8003e50:	230c      	movs	r3, #12
 8003e52:	603b      	str	r3, [r7, #0]
 8003e54:	e7ee      	b.n	8003e34 <__sfp+0x60>
 8003e56:	bf00      	nop
 8003e58:	08004ce4 	.word	0x08004ce4
 8003e5c:	ffff0001 	.word	0xffff0001

08003e60 <_fwalk_reent>:
 8003e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e64:	4606      	mov	r6, r0
 8003e66:	4688      	mov	r8, r1
 8003e68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003e6c:	2700      	movs	r7, #0
 8003e6e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003e72:	f1b9 0901 	subs.w	r9, r9, #1
 8003e76:	d505      	bpl.n	8003e84 <_fwalk_reent+0x24>
 8003e78:	6824      	ldr	r4, [r4, #0]
 8003e7a:	2c00      	cmp	r4, #0
 8003e7c:	d1f7      	bne.n	8003e6e <_fwalk_reent+0xe>
 8003e7e:	4638      	mov	r0, r7
 8003e80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e84:	89ab      	ldrh	r3, [r5, #12]
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d907      	bls.n	8003e9a <_fwalk_reent+0x3a>
 8003e8a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003e8e:	3301      	adds	r3, #1
 8003e90:	d003      	beq.n	8003e9a <_fwalk_reent+0x3a>
 8003e92:	4629      	mov	r1, r5
 8003e94:	4630      	mov	r0, r6
 8003e96:	47c0      	blx	r8
 8003e98:	4307      	orrs	r7, r0
 8003e9a:	3568      	adds	r5, #104	; 0x68
 8003e9c:	e7e9      	b.n	8003e72 <_fwalk_reent+0x12>
	...

08003ea0 <__libc_init_array>:
 8003ea0:	b570      	push	{r4, r5, r6, lr}
 8003ea2:	4d0d      	ldr	r5, [pc, #52]	; (8003ed8 <__libc_init_array+0x38>)
 8003ea4:	4c0d      	ldr	r4, [pc, #52]	; (8003edc <__libc_init_array+0x3c>)
 8003ea6:	1b64      	subs	r4, r4, r5
 8003ea8:	10a4      	asrs	r4, r4, #2
 8003eaa:	2600      	movs	r6, #0
 8003eac:	42a6      	cmp	r6, r4
 8003eae:	d109      	bne.n	8003ec4 <__libc_init_array+0x24>
 8003eb0:	4d0b      	ldr	r5, [pc, #44]	; (8003ee0 <__libc_init_array+0x40>)
 8003eb2:	4c0c      	ldr	r4, [pc, #48]	; (8003ee4 <__libc_init_array+0x44>)
 8003eb4:	f000 feba 	bl	8004c2c <_init>
 8003eb8:	1b64      	subs	r4, r4, r5
 8003eba:	10a4      	asrs	r4, r4, #2
 8003ebc:	2600      	movs	r6, #0
 8003ebe:	42a6      	cmp	r6, r4
 8003ec0:	d105      	bne.n	8003ece <__libc_init_array+0x2e>
 8003ec2:	bd70      	pop	{r4, r5, r6, pc}
 8003ec4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ec8:	4798      	blx	r3
 8003eca:	3601      	adds	r6, #1
 8003ecc:	e7ee      	b.n	8003eac <__libc_init_array+0xc>
 8003ece:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ed2:	4798      	blx	r3
 8003ed4:	3601      	adds	r6, #1
 8003ed6:	e7f2      	b.n	8003ebe <__libc_init_array+0x1e>
 8003ed8:	08004d24 	.word	0x08004d24
 8003edc:	08004d24 	.word	0x08004d24
 8003ee0:	08004d24 	.word	0x08004d24
 8003ee4:	08004d28 	.word	0x08004d28

08003ee8 <__retarget_lock_init_recursive>:
 8003ee8:	4770      	bx	lr

08003eea <__retarget_lock_acquire_recursive>:
 8003eea:	4770      	bx	lr

08003eec <__retarget_lock_release_recursive>:
 8003eec:	4770      	bx	lr

08003eee <memset>:
 8003eee:	4402      	add	r2, r0
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d100      	bne.n	8003ef8 <memset+0xa>
 8003ef6:	4770      	bx	lr
 8003ef8:	f803 1b01 	strb.w	r1, [r3], #1
 8003efc:	e7f9      	b.n	8003ef2 <memset+0x4>
	...

08003f00 <sbrk_aligned>:
 8003f00:	b570      	push	{r4, r5, r6, lr}
 8003f02:	4e0e      	ldr	r6, [pc, #56]	; (8003f3c <sbrk_aligned+0x3c>)
 8003f04:	460c      	mov	r4, r1
 8003f06:	6831      	ldr	r1, [r6, #0]
 8003f08:	4605      	mov	r5, r0
 8003f0a:	b911      	cbnz	r1, 8003f12 <sbrk_aligned+0x12>
 8003f0c:	f000 f8a4 	bl	8004058 <_sbrk_r>
 8003f10:	6030      	str	r0, [r6, #0]
 8003f12:	4621      	mov	r1, r4
 8003f14:	4628      	mov	r0, r5
 8003f16:	f000 f89f 	bl	8004058 <_sbrk_r>
 8003f1a:	1c43      	adds	r3, r0, #1
 8003f1c:	d00a      	beq.n	8003f34 <sbrk_aligned+0x34>
 8003f1e:	1cc4      	adds	r4, r0, #3
 8003f20:	f024 0403 	bic.w	r4, r4, #3
 8003f24:	42a0      	cmp	r0, r4
 8003f26:	d007      	beq.n	8003f38 <sbrk_aligned+0x38>
 8003f28:	1a21      	subs	r1, r4, r0
 8003f2a:	4628      	mov	r0, r5
 8003f2c:	f000 f894 	bl	8004058 <_sbrk_r>
 8003f30:	3001      	adds	r0, #1
 8003f32:	d101      	bne.n	8003f38 <sbrk_aligned+0x38>
 8003f34:	f04f 34ff 	mov.w	r4, #4294967295
 8003f38:	4620      	mov	r0, r4
 8003f3a:	bd70      	pop	{r4, r5, r6, pc}
 8003f3c:	20000258 	.word	0x20000258

08003f40 <_malloc_r>:
 8003f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f44:	1ccd      	adds	r5, r1, #3
 8003f46:	f025 0503 	bic.w	r5, r5, #3
 8003f4a:	3508      	adds	r5, #8
 8003f4c:	2d0c      	cmp	r5, #12
 8003f4e:	bf38      	it	cc
 8003f50:	250c      	movcc	r5, #12
 8003f52:	2d00      	cmp	r5, #0
 8003f54:	4607      	mov	r7, r0
 8003f56:	db01      	blt.n	8003f5c <_malloc_r+0x1c>
 8003f58:	42a9      	cmp	r1, r5
 8003f5a:	d905      	bls.n	8003f68 <_malloc_r+0x28>
 8003f5c:	230c      	movs	r3, #12
 8003f5e:	603b      	str	r3, [r7, #0]
 8003f60:	2600      	movs	r6, #0
 8003f62:	4630      	mov	r0, r6
 8003f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f68:	4e2e      	ldr	r6, [pc, #184]	; (8004024 <_malloc_r+0xe4>)
 8003f6a:	f000 f9bf 	bl	80042ec <__malloc_lock>
 8003f6e:	6833      	ldr	r3, [r6, #0]
 8003f70:	461c      	mov	r4, r3
 8003f72:	bb34      	cbnz	r4, 8003fc2 <_malloc_r+0x82>
 8003f74:	4629      	mov	r1, r5
 8003f76:	4638      	mov	r0, r7
 8003f78:	f7ff ffc2 	bl	8003f00 <sbrk_aligned>
 8003f7c:	1c43      	adds	r3, r0, #1
 8003f7e:	4604      	mov	r4, r0
 8003f80:	d14d      	bne.n	800401e <_malloc_r+0xde>
 8003f82:	6834      	ldr	r4, [r6, #0]
 8003f84:	4626      	mov	r6, r4
 8003f86:	2e00      	cmp	r6, #0
 8003f88:	d140      	bne.n	800400c <_malloc_r+0xcc>
 8003f8a:	6823      	ldr	r3, [r4, #0]
 8003f8c:	4631      	mov	r1, r6
 8003f8e:	4638      	mov	r0, r7
 8003f90:	eb04 0803 	add.w	r8, r4, r3
 8003f94:	f000 f860 	bl	8004058 <_sbrk_r>
 8003f98:	4580      	cmp	r8, r0
 8003f9a:	d13a      	bne.n	8004012 <_malloc_r+0xd2>
 8003f9c:	6821      	ldr	r1, [r4, #0]
 8003f9e:	3503      	adds	r5, #3
 8003fa0:	1a6d      	subs	r5, r5, r1
 8003fa2:	f025 0503 	bic.w	r5, r5, #3
 8003fa6:	3508      	adds	r5, #8
 8003fa8:	2d0c      	cmp	r5, #12
 8003faa:	bf38      	it	cc
 8003fac:	250c      	movcc	r5, #12
 8003fae:	4629      	mov	r1, r5
 8003fb0:	4638      	mov	r0, r7
 8003fb2:	f7ff ffa5 	bl	8003f00 <sbrk_aligned>
 8003fb6:	3001      	adds	r0, #1
 8003fb8:	d02b      	beq.n	8004012 <_malloc_r+0xd2>
 8003fba:	6823      	ldr	r3, [r4, #0]
 8003fbc:	442b      	add	r3, r5
 8003fbe:	6023      	str	r3, [r4, #0]
 8003fc0:	e00e      	b.n	8003fe0 <_malloc_r+0xa0>
 8003fc2:	6822      	ldr	r2, [r4, #0]
 8003fc4:	1b52      	subs	r2, r2, r5
 8003fc6:	d41e      	bmi.n	8004006 <_malloc_r+0xc6>
 8003fc8:	2a0b      	cmp	r2, #11
 8003fca:	d916      	bls.n	8003ffa <_malloc_r+0xba>
 8003fcc:	1961      	adds	r1, r4, r5
 8003fce:	42a3      	cmp	r3, r4
 8003fd0:	6025      	str	r5, [r4, #0]
 8003fd2:	bf18      	it	ne
 8003fd4:	6059      	strne	r1, [r3, #4]
 8003fd6:	6863      	ldr	r3, [r4, #4]
 8003fd8:	bf08      	it	eq
 8003fda:	6031      	streq	r1, [r6, #0]
 8003fdc:	5162      	str	r2, [r4, r5]
 8003fde:	604b      	str	r3, [r1, #4]
 8003fe0:	4638      	mov	r0, r7
 8003fe2:	f104 060b 	add.w	r6, r4, #11
 8003fe6:	f000 f987 	bl	80042f8 <__malloc_unlock>
 8003fea:	f026 0607 	bic.w	r6, r6, #7
 8003fee:	1d23      	adds	r3, r4, #4
 8003ff0:	1af2      	subs	r2, r6, r3
 8003ff2:	d0b6      	beq.n	8003f62 <_malloc_r+0x22>
 8003ff4:	1b9b      	subs	r3, r3, r6
 8003ff6:	50a3      	str	r3, [r4, r2]
 8003ff8:	e7b3      	b.n	8003f62 <_malloc_r+0x22>
 8003ffa:	6862      	ldr	r2, [r4, #4]
 8003ffc:	42a3      	cmp	r3, r4
 8003ffe:	bf0c      	ite	eq
 8004000:	6032      	streq	r2, [r6, #0]
 8004002:	605a      	strne	r2, [r3, #4]
 8004004:	e7ec      	b.n	8003fe0 <_malloc_r+0xa0>
 8004006:	4623      	mov	r3, r4
 8004008:	6864      	ldr	r4, [r4, #4]
 800400a:	e7b2      	b.n	8003f72 <_malloc_r+0x32>
 800400c:	4634      	mov	r4, r6
 800400e:	6876      	ldr	r6, [r6, #4]
 8004010:	e7b9      	b.n	8003f86 <_malloc_r+0x46>
 8004012:	230c      	movs	r3, #12
 8004014:	603b      	str	r3, [r7, #0]
 8004016:	4638      	mov	r0, r7
 8004018:	f000 f96e 	bl	80042f8 <__malloc_unlock>
 800401c:	e7a1      	b.n	8003f62 <_malloc_r+0x22>
 800401e:	6025      	str	r5, [r4, #0]
 8004020:	e7de      	b.n	8003fe0 <_malloc_r+0xa0>
 8004022:	bf00      	nop
 8004024:	20000254 	.word	0x20000254

08004028 <iprintf>:
 8004028:	b40f      	push	{r0, r1, r2, r3}
 800402a:	4b0a      	ldr	r3, [pc, #40]	; (8004054 <iprintf+0x2c>)
 800402c:	b513      	push	{r0, r1, r4, lr}
 800402e:	681c      	ldr	r4, [r3, #0]
 8004030:	b124      	cbz	r4, 800403c <iprintf+0x14>
 8004032:	69a3      	ldr	r3, [r4, #24]
 8004034:	b913      	cbnz	r3, 800403c <iprintf+0x14>
 8004036:	4620      	mov	r0, r4
 8004038:	f7ff fe94 	bl	8003d64 <__sinit>
 800403c:	ab05      	add	r3, sp, #20
 800403e:	9a04      	ldr	r2, [sp, #16]
 8004040:	68a1      	ldr	r1, [r4, #8]
 8004042:	9301      	str	r3, [sp, #4]
 8004044:	4620      	mov	r0, r4
 8004046:	f000 f9d3 	bl	80043f0 <_vfiprintf_r>
 800404a:	b002      	add	sp, #8
 800404c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004050:	b004      	add	sp, #16
 8004052:	4770      	bx	lr
 8004054:	20000014 	.word	0x20000014

08004058 <_sbrk_r>:
 8004058:	b538      	push	{r3, r4, r5, lr}
 800405a:	4d06      	ldr	r5, [pc, #24]	; (8004074 <_sbrk_r+0x1c>)
 800405c:	2300      	movs	r3, #0
 800405e:	4604      	mov	r4, r0
 8004060:	4608      	mov	r0, r1
 8004062:	602b      	str	r3, [r5, #0]
 8004064:	f7fd f90e 	bl	8001284 <_sbrk>
 8004068:	1c43      	adds	r3, r0, #1
 800406a:	d102      	bne.n	8004072 <_sbrk_r+0x1a>
 800406c:	682b      	ldr	r3, [r5, #0]
 800406e:	b103      	cbz	r3, 8004072 <_sbrk_r+0x1a>
 8004070:	6023      	str	r3, [r4, #0]
 8004072:	bd38      	pop	{r3, r4, r5, pc}
 8004074:	2000025c 	.word	0x2000025c

08004078 <__sread>:
 8004078:	b510      	push	{r4, lr}
 800407a:	460c      	mov	r4, r1
 800407c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004080:	f000 fc7a 	bl	8004978 <_read_r>
 8004084:	2800      	cmp	r0, #0
 8004086:	bfab      	itete	ge
 8004088:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800408a:	89a3      	ldrhlt	r3, [r4, #12]
 800408c:	181b      	addge	r3, r3, r0
 800408e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004092:	bfac      	ite	ge
 8004094:	6563      	strge	r3, [r4, #84]	; 0x54
 8004096:	81a3      	strhlt	r3, [r4, #12]
 8004098:	bd10      	pop	{r4, pc}

0800409a <__swrite>:
 800409a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800409e:	461f      	mov	r7, r3
 80040a0:	898b      	ldrh	r3, [r1, #12]
 80040a2:	05db      	lsls	r3, r3, #23
 80040a4:	4605      	mov	r5, r0
 80040a6:	460c      	mov	r4, r1
 80040a8:	4616      	mov	r6, r2
 80040aa:	d505      	bpl.n	80040b8 <__swrite+0x1e>
 80040ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040b0:	2302      	movs	r3, #2
 80040b2:	2200      	movs	r2, #0
 80040b4:	f000 f908 	bl	80042c8 <_lseek_r>
 80040b8:	89a3      	ldrh	r3, [r4, #12]
 80040ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80040be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80040c2:	81a3      	strh	r3, [r4, #12]
 80040c4:	4632      	mov	r2, r6
 80040c6:	463b      	mov	r3, r7
 80040c8:	4628      	mov	r0, r5
 80040ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80040ce:	f000 b817 	b.w	8004100 <_write_r>

080040d2 <__sseek>:
 80040d2:	b510      	push	{r4, lr}
 80040d4:	460c      	mov	r4, r1
 80040d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040da:	f000 f8f5 	bl	80042c8 <_lseek_r>
 80040de:	1c43      	adds	r3, r0, #1
 80040e0:	89a3      	ldrh	r3, [r4, #12]
 80040e2:	bf15      	itete	ne
 80040e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80040e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80040ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80040ee:	81a3      	strheq	r3, [r4, #12]
 80040f0:	bf18      	it	ne
 80040f2:	81a3      	strhne	r3, [r4, #12]
 80040f4:	bd10      	pop	{r4, pc}

080040f6 <__sclose>:
 80040f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040fa:	f000 b813 	b.w	8004124 <_close_r>
	...

08004100 <_write_r>:
 8004100:	b538      	push	{r3, r4, r5, lr}
 8004102:	4d07      	ldr	r5, [pc, #28]	; (8004120 <_write_r+0x20>)
 8004104:	4604      	mov	r4, r0
 8004106:	4608      	mov	r0, r1
 8004108:	4611      	mov	r1, r2
 800410a:	2200      	movs	r2, #0
 800410c:	602a      	str	r2, [r5, #0]
 800410e:	461a      	mov	r2, r3
 8004110:	f7ff fbcf 	bl	80038b2 <_write>
 8004114:	1c43      	adds	r3, r0, #1
 8004116:	d102      	bne.n	800411e <_write_r+0x1e>
 8004118:	682b      	ldr	r3, [r5, #0]
 800411a:	b103      	cbz	r3, 800411e <_write_r+0x1e>
 800411c:	6023      	str	r3, [r4, #0]
 800411e:	bd38      	pop	{r3, r4, r5, pc}
 8004120:	2000025c 	.word	0x2000025c

08004124 <_close_r>:
 8004124:	b538      	push	{r3, r4, r5, lr}
 8004126:	4d06      	ldr	r5, [pc, #24]	; (8004140 <_close_r+0x1c>)
 8004128:	2300      	movs	r3, #0
 800412a:	4604      	mov	r4, r0
 800412c:	4608      	mov	r0, r1
 800412e:	602b      	str	r3, [r5, #0]
 8004130:	f7ff fbf0 	bl	8003914 <_close>
 8004134:	1c43      	adds	r3, r0, #1
 8004136:	d102      	bne.n	800413e <_close_r+0x1a>
 8004138:	682b      	ldr	r3, [r5, #0]
 800413a:	b103      	cbz	r3, 800413e <_close_r+0x1a>
 800413c:	6023      	str	r3, [r4, #0]
 800413e:	bd38      	pop	{r3, r4, r5, pc}
 8004140:	2000025c 	.word	0x2000025c

08004144 <__sflush_r>:
 8004144:	898a      	ldrh	r2, [r1, #12]
 8004146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800414a:	4605      	mov	r5, r0
 800414c:	0710      	lsls	r0, r2, #28
 800414e:	460c      	mov	r4, r1
 8004150:	d458      	bmi.n	8004204 <__sflush_r+0xc0>
 8004152:	684b      	ldr	r3, [r1, #4]
 8004154:	2b00      	cmp	r3, #0
 8004156:	dc05      	bgt.n	8004164 <__sflush_r+0x20>
 8004158:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800415a:	2b00      	cmp	r3, #0
 800415c:	dc02      	bgt.n	8004164 <__sflush_r+0x20>
 800415e:	2000      	movs	r0, #0
 8004160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004164:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004166:	2e00      	cmp	r6, #0
 8004168:	d0f9      	beq.n	800415e <__sflush_r+0x1a>
 800416a:	2300      	movs	r3, #0
 800416c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004170:	682f      	ldr	r7, [r5, #0]
 8004172:	602b      	str	r3, [r5, #0]
 8004174:	d032      	beq.n	80041dc <__sflush_r+0x98>
 8004176:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004178:	89a3      	ldrh	r3, [r4, #12]
 800417a:	075a      	lsls	r2, r3, #29
 800417c:	d505      	bpl.n	800418a <__sflush_r+0x46>
 800417e:	6863      	ldr	r3, [r4, #4]
 8004180:	1ac0      	subs	r0, r0, r3
 8004182:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004184:	b10b      	cbz	r3, 800418a <__sflush_r+0x46>
 8004186:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004188:	1ac0      	subs	r0, r0, r3
 800418a:	2300      	movs	r3, #0
 800418c:	4602      	mov	r2, r0
 800418e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004190:	6a21      	ldr	r1, [r4, #32]
 8004192:	4628      	mov	r0, r5
 8004194:	47b0      	blx	r6
 8004196:	1c43      	adds	r3, r0, #1
 8004198:	89a3      	ldrh	r3, [r4, #12]
 800419a:	d106      	bne.n	80041aa <__sflush_r+0x66>
 800419c:	6829      	ldr	r1, [r5, #0]
 800419e:	291d      	cmp	r1, #29
 80041a0:	d82c      	bhi.n	80041fc <__sflush_r+0xb8>
 80041a2:	4a2a      	ldr	r2, [pc, #168]	; (800424c <__sflush_r+0x108>)
 80041a4:	40ca      	lsrs	r2, r1
 80041a6:	07d6      	lsls	r6, r2, #31
 80041a8:	d528      	bpl.n	80041fc <__sflush_r+0xb8>
 80041aa:	2200      	movs	r2, #0
 80041ac:	6062      	str	r2, [r4, #4]
 80041ae:	04d9      	lsls	r1, r3, #19
 80041b0:	6922      	ldr	r2, [r4, #16]
 80041b2:	6022      	str	r2, [r4, #0]
 80041b4:	d504      	bpl.n	80041c0 <__sflush_r+0x7c>
 80041b6:	1c42      	adds	r2, r0, #1
 80041b8:	d101      	bne.n	80041be <__sflush_r+0x7a>
 80041ba:	682b      	ldr	r3, [r5, #0]
 80041bc:	b903      	cbnz	r3, 80041c0 <__sflush_r+0x7c>
 80041be:	6560      	str	r0, [r4, #84]	; 0x54
 80041c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80041c2:	602f      	str	r7, [r5, #0]
 80041c4:	2900      	cmp	r1, #0
 80041c6:	d0ca      	beq.n	800415e <__sflush_r+0x1a>
 80041c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80041cc:	4299      	cmp	r1, r3
 80041ce:	d002      	beq.n	80041d6 <__sflush_r+0x92>
 80041d0:	4628      	mov	r0, r5
 80041d2:	f000 f897 	bl	8004304 <_free_r>
 80041d6:	2000      	movs	r0, #0
 80041d8:	6360      	str	r0, [r4, #52]	; 0x34
 80041da:	e7c1      	b.n	8004160 <__sflush_r+0x1c>
 80041dc:	6a21      	ldr	r1, [r4, #32]
 80041de:	2301      	movs	r3, #1
 80041e0:	4628      	mov	r0, r5
 80041e2:	47b0      	blx	r6
 80041e4:	1c41      	adds	r1, r0, #1
 80041e6:	d1c7      	bne.n	8004178 <__sflush_r+0x34>
 80041e8:	682b      	ldr	r3, [r5, #0]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d0c4      	beq.n	8004178 <__sflush_r+0x34>
 80041ee:	2b1d      	cmp	r3, #29
 80041f0:	d001      	beq.n	80041f6 <__sflush_r+0xb2>
 80041f2:	2b16      	cmp	r3, #22
 80041f4:	d101      	bne.n	80041fa <__sflush_r+0xb6>
 80041f6:	602f      	str	r7, [r5, #0]
 80041f8:	e7b1      	b.n	800415e <__sflush_r+0x1a>
 80041fa:	89a3      	ldrh	r3, [r4, #12]
 80041fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004200:	81a3      	strh	r3, [r4, #12]
 8004202:	e7ad      	b.n	8004160 <__sflush_r+0x1c>
 8004204:	690f      	ldr	r7, [r1, #16]
 8004206:	2f00      	cmp	r7, #0
 8004208:	d0a9      	beq.n	800415e <__sflush_r+0x1a>
 800420a:	0793      	lsls	r3, r2, #30
 800420c:	680e      	ldr	r6, [r1, #0]
 800420e:	bf08      	it	eq
 8004210:	694b      	ldreq	r3, [r1, #20]
 8004212:	600f      	str	r7, [r1, #0]
 8004214:	bf18      	it	ne
 8004216:	2300      	movne	r3, #0
 8004218:	eba6 0807 	sub.w	r8, r6, r7
 800421c:	608b      	str	r3, [r1, #8]
 800421e:	f1b8 0f00 	cmp.w	r8, #0
 8004222:	dd9c      	ble.n	800415e <__sflush_r+0x1a>
 8004224:	6a21      	ldr	r1, [r4, #32]
 8004226:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004228:	4643      	mov	r3, r8
 800422a:	463a      	mov	r2, r7
 800422c:	4628      	mov	r0, r5
 800422e:	47b0      	blx	r6
 8004230:	2800      	cmp	r0, #0
 8004232:	dc06      	bgt.n	8004242 <__sflush_r+0xfe>
 8004234:	89a3      	ldrh	r3, [r4, #12]
 8004236:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800423a:	81a3      	strh	r3, [r4, #12]
 800423c:	f04f 30ff 	mov.w	r0, #4294967295
 8004240:	e78e      	b.n	8004160 <__sflush_r+0x1c>
 8004242:	4407      	add	r7, r0
 8004244:	eba8 0800 	sub.w	r8, r8, r0
 8004248:	e7e9      	b.n	800421e <__sflush_r+0xda>
 800424a:	bf00      	nop
 800424c:	20400001 	.word	0x20400001

08004250 <_fflush_r>:
 8004250:	b538      	push	{r3, r4, r5, lr}
 8004252:	690b      	ldr	r3, [r1, #16]
 8004254:	4605      	mov	r5, r0
 8004256:	460c      	mov	r4, r1
 8004258:	b913      	cbnz	r3, 8004260 <_fflush_r+0x10>
 800425a:	2500      	movs	r5, #0
 800425c:	4628      	mov	r0, r5
 800425e:	bd38      	pop	{r3, r4, r5, pc}
 8004260:	b118      	cbz	r0, 800426a <_fflush_r+0x1a>
 8004262:	6983      	ldr	r3, [r0, #24]
 8004264:	b90b      	cbnz	r3, 800426a <_fflush_r+0x1a>
 8004266:	f7ff fd7d 	bl	8003d64 <__sinit>
 800426a:	4b14      	ldr	r3, [pc, #80]	; (80042bc <_fflush_r+0x6c>)
 800426c:	429c      	cmp	r4, r3
 800426e:	d11b      	bne.n	80042a8 <_fflush_r+0x58>
 8004270:	686c      	ldr	r4, [r5, #4]
 8004272:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d0ef      	beq.n	800425a <_fflush_r+0xa>
 800427a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800427c:	07d0      	lsls	r0, r2, #31
 800427e:	d404      	bmi.n	800428a <_fflush_r+0x3a>
 8004280:	0599      	lsls	r1, r3, #22
 8004282:	d402      	bmi.n	800428a <_fflush_r+0x3a>
 8004284:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004286:	f7ff fe30 	bl	8003eea <__retarget_lock_acquire_recursive>
 800428a:	4628      	mov	r0, r5
 800428c:	4621      	mov	r1, r4
 800428e:	f7ff ff59 	bl	8004144 <__sflush_r>
 8004292:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004294:	07da      	lsls	r2, r3, #31
 8004296:	4605      	mov	r5, r0
 8004298:	d4e0      	bmi.n	800425c <_fflush_r+0xc>
 800429a:	89a3      	ldrh	r3, [r4, #12]
 800429c:	059b      	lsls	r3, r3, #22
 800429e:	d4dd      	bmi.n	800425c <_fflush_r+0xc>
 80042a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042a2:	f7ff fe23 	bl	8003eec <__retarget_lock_release_recursive>
 80042a6:	e7d9      	b.n	800425c <_fflush_r+0xc>
 80042a8:	4b05      	ldr	r3, [pc, #20]	; (80042c0 <_fflush_r+0x70>)
 80042aa:	429c      	cmp	r4, r3
 80042ac:	d101      	bne.n	80042b2 <_fflush_r+0x62>
 80042ae:	68ac      	ldr	r4, [r5, #8]
 80042b0:	e7df      	b.n	8004272 <_fflush_r+0x22>
 80042b2:	4b04      	ldr	r3, [pc, #16]	; (80042c4 <_fflush_r+0x74>)
 80042b4:	429c      	cmp	r4, r3
 80042b6:	bf08      	it	eq
 80042b8:	68ec      	ldreq	r4, [r5, #12]
 80042ba:	e7da      	b.n	8004272 <_fflush_r+0x22>
 80042bc:	08004ca4 	.word	0x08004ca4
 80042c0:	08004cc4 	.word	0x08004cc4
 80042c4:	08004c84 	.word	0x08004c84

080042c8 <_lseek_r>:
 80042c8:	b538      	push	{r3, r4, r5, lr}
 80042ca:	4d07      	ldr	r5, [pc, #28]	; (80042e8 <_lseek_r+0x20>)
 80042cc:	4604      	mov	r4, r0
 80042ce:	4608      	mov	r0, r1
 80042d0:	4611      	mov	r1, r2
 80042d2:	2200      	movs	r2, #0
 80042d4:	602a      	str	r2, [r5, #0]
 80042d6:	461a      	mov	r2, r3
 80042d8:	f7ff fad9 	bl	800388e <_lseek>
 80042dc:	1c43      	adds	r3, r0, #1
 80042de:	d102      	bne.n	80042e6 <_lseek_r+0x1e>
 80042e0:	682b      	ldr	r3, [r5, #0]
 80042e2:	b103      	cbz	r3, 80042e6 <_lseek_r+0x1e>
 80042e4:	6023      	str	r3, [r4, #0]
 80042e6:	bd38      	pop	{r3, r4, r5, pc}
 80042e8:	2000025c 	.word	0x2000025c

080042ec <__malloc_lock>:
 80042ec:	4801      	ldr	r0, [pc, #4]	; (80042f4 <__malloc_lock+0x8>)
 80042ee:	f7ff bdfc 	b.w	8003eea <__retarget_lock_acquire_recursive>
 80042f2:	bf00      	nop
 80042f4:	20000250 	.word	0x20000250

080042f8 <__malloc_unlock>:
 80042f8:	4801      	ldr	r0, [pc, #4]	; (8004300 <__malloc_unlock+0x8>)
 80042fa:	f7ff bdf7 	b.w	8003eec <__retarget_lock_release_recursive>
 80042fe:	bf00      	nop
 8004300:	20000250 	.word	0x20000250

08004304 <_free_r>:
 8004304:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004306:	2900      	cmp	r1, #0
 8004308:	d044      	beq.n	8004394 <_free_r+0x90>
 800430a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800430e:	9001      	str	r0, [sp, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	f1a1 0404 	sub.w	r4, r1, #4
 8004316:	bfb8      	it	lt
 8004318:	18e4      	addlt	r4, r4, r3
 800431a:	f7ff ffe7 	bl	80042ec <__malloc_lock>
 800431e:	4a1e      	ldr	r2, [pc, #120]	; (8004398 <_free_r+0x94>)
 8004320:	9801      	ldr	r0, [sp, #4]
 8004322:	6813      	ldr	r3, [r2, #0]
 8004324:	b933      	cbnz	r3, 8004334 <_free_r+0x30>
 8004326:	6063      	str	r3, [r4, #4]
 8004328:	6014      	str	r4, [r2, #0]
 800432a:	b003      	add	sp, #12
 800432c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004330:	f7ff bfe2 	b.w	80042f8 <__malloc_unlock>
 8004334:	42a3      	cmp	r3, r4
 8004336:	d908      	bls.n	800434a <_free_r+0x46>
 8004338:	6825      	ldr	r5, [r4, #0]
 800433a:	1961      	adds	r1, r4, r5
 800433c:	428b      	cmp	r3, r1
 800433e:	bf01      	itttt	eq
 8004340:	6819      	ldreq	r1, [r3, #0]
 8004342:	685b      	ldreq	r3, [r3, #4]
 8004344:	1949      	addeq	r1, r1, r5
 8004346:	6021      	streq	r1, [r4, #0]
 8004348:	e7ed      	b.n	8004326 <_free_r+0x22>
 800434a:	461a      	mov	r2, r3
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	b10b      	cbz	r3, 8004354 <_free_r+0x50>
 8004350:	42a3      	cmp	r3, r4
 8004352:	d9fa      	bls.n	800434a <_free_r+0x46>
 8004354:	6811      	ldr	r1, [r2, #0]
 8004356:	1855      	adds	r5, r2, r1
 8004358:	42a5      	cmp	r5, r4
 800435a:	d10b      	bne.n	8004374 <_free_r+0x70>
 800435c:	6824      	ldr	r4, [r4, #0]
 800435e:	4421      	add	r1, r4
 8004360:	1854      	adds	r4, r2, r1
 8004362:	42a3      	cmp	r3, r4
 8004364:	6011      	str	r1, [r2, #0]
 8004366:	d1e0      	bne.n	800432a <_free_r+0x26>
 8004368:	681c      	ldr	r4, [r3, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	6053      	str	r3, [r2, #4]
 800436e:	4421      	add	r1, r4
 8004370:	6011      	str	r1, [r2, #0]
 8004372:	e7da      	b.n	800432a <_free_r+0x26>
 8004374:	d902      	bls.n	800437c <_free_r+0x78>
 8004376:	230c      	movs	r3, #12
 8004378:	6003      	str	r3, [r0, #0]
 800437a:	e7d6      	b.n	800432a <_free_r+0x26>
 800437c:	6825      	ldr	r5, [r4, #0]
 800437e:	1961      	adds	r1, r4, r5
 8004380:	428b      	cmp	r3, r1
 8004382:	bf04      	itt	eq
 8004384:	6819      	ldreq	r1, [r3, #0]
 8004386:	685b      	ldreq	r3, [r3, #4]
 8004388:	6063      	str	r3, [r4, #4]
 800438a:	bf04      	itt	eq
 800438c:	1949      	addeq	r1, r1, r5
 800438e:	6021      	streq	r1, [r4, #0]
 8004390:	6054      	str	r4, [r2, #4]
 8004392:	e7ca      	b.n	800432a <_free_r+0x26>
 8004394:	b003      	add	sp, #12
 8004396:	bd30      	pop	{r4, r5, pc}
 8004398:	20000254 	.word	0x20000254

0800439c <__sfputc_r>:
 800439c:	6893      	ldr	r3, [r2, #8]
 800439e:	3b01      	subs	r3, #1
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	b410      	push	{r4}
 80043a4:	6093      	str	r3, [r2, #8]
 80043a6:	da08      	bge.n	80043ba <__sfputc_r+0x1e>
 80043a8:	6994      	ldr	r4, [r2, #24]
 80043aa:	42a3      	cmp	r3, r4
 80043ac:	db01      	blt.n	80043b2 <__sfputc_r+0x16>
 80043ae:	290a      	cmp	r1, #10
 80043b0:	d103      	bne.n	80043ba <__sfputc_r+0x1e>
 80043b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043b6:	f000 baf1 	b.w	800499c <__swbuf_r>
 80043ba:	6813      	ldr	r3, [r2, #0]
 80043bc:	1c58      	adds	r0, r3, #1
 80043be:	6010      	str	r0, [r2, #0]
 80043c0:	7019      	strb	r1, [r3, #0]
 80043c2:	4608      	mov	r0, r1
 80043c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043c8:	4770      	bx	lr

080043ca <__sfputs_r>:
 80043ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043cc:	4606      	mov	r6, r0
 80043ce:	460f      	mov	r7, r1
 80043d0:	4614      	mov	r4, r2
 80043d2:	18d5      	adds	r5, r2, r3
 80043d4:	42ac      	cmp	r4, r5
 80043d6:	d101      	bne.n	80043dc <__sfputs_r+0x12>
 80043d8:	2000      	movs	r0, #0
 80043da:	e007      	b.n	80043ec <__sfputs_r+0x22>
 80043dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043e0:	463a      	mov	r2, r7
 80043e2:	4630      	mov	r0, r6
 80043e4:	f7ff ffda 	bl	800439c <__sfputc_r>
 80043e8:	1c43      	adds	r3, r0, #1
 80043ea:	d1f3      	bne.n	80043d4 <__sfputs_r+0xa>
 80043ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080043f0 <_vfiprintf_r>:
 80043f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043f4:	460d      	mov	r5, r1
 80043f6:	b09d      	sub	sp, #116	; 0x74
 80043f8:	4614      	mov	r4, r2
 80043fa:	4698      	mov	r8, r3
 80043fc:	4606      	mov	r6, r0
 80043fe:	b118      	cbz	r0, 8004408 <_vfiprintf_r+0x18>
 8004400:	6983      	ldr	r3, [r0, #24]
 8004402:	b90b      	cbnz	r3, 8004408 <_vfiprintf_r+0x18>
 8004404:	f7ff fcae 	bl	8003d64 <__sinit>
 8004408:	4b89      	ldr	r3, [pc, #548]	; (8004630 <_vfiprintf_r+0x240>)
 800440a:	429d      	cmp	r5, r3
 800440c:	d11b      	bne.n	8004446 <_vfiprintf_r+0x56>
 800440e:	6875      	ldr	r5, [r6, #4]
 8004410:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004412:	07d9      	lsls	r1, r3, #31
 8004414:	d405      	bmi.n	8004422 <_vfiprintf_r+0x32>
 8004416:	89ab      	ldrh	r3, [r5, #12]
 8004418:	059a      	lsls	r2, r3, #22
 800441a:	d402      	bmi.n	8004422 <_vfiprintf_r+0x32>
 800441c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800441e:	f7ff fd64 	bl	8003eea <__retarget_lock_acquire_recursive>
 8004422:	89ab      	ldrh	r3, [r5, #12]
 8004424:	071b      	lsls	r3, r3, #28
 8004426:	d501      	bpl.n	800442c <_vfiprintf_r+0x3c>
 8004428:	692b      	ldr	r3, [r5, #16]
 800442a:	b9eb      	cbnz	r3, 8004468 <_vfiprintf_r+0x78>
 800442c:	4629      	mov	r1, r5
 800442e:	4630      	mov	r0, r6
 8004430:	f000 fb06 	bl	8004a40 <__swsetup_r>
 8004434:	b1c0      	cbz	r0, 8004468 <_vfiprintf_r+0x78>
 8004436:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004438:	07dc      	lsls	r4, r3, #31
 800443a:	d50e      	bpl.n	800445a <_vfiprintf_r+0x6a>
 800443c:	f04f 30ff 	mov.w	r0, #4294967295
 8004440:	b01d      	add	sp, #116	; 0x74
 8004442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004446:	4b7b      	ldr	r3, [pc, #492]	; (8004634 <_vfiprintf_r+0x244>)
 8004448:	429d      	cmp	r5, r3
 800444a:	d101      	bne.n	8004450 <_vfiprintf_r+0x60>
 800444c:	68b5      	ldr	r5, [r6, #8]
 800444e:	e7df      	b.n	8004410 <_vfiprintf_r+0x20>
 8004450:	4b79      	ldr	r3, [pc, #484]	; (8004638 <_vfiprintf_r+0x248>)
 8004452:	429d      	cmp	r5, r3
 8004454:	bf08      	it	eq
 8004456:	68f5      	ldreq	r5, [r6, #12]
 8004458:	e7da      	b.n	8004410 <_vfiprintf_r+0x20>
 800445a:	89ab      	ldrh	r3, [r5, #12]
 800445c:	0598      	lsls	r0, r3, #22
 800445e:	d4ed      	bmi.n	800443c <_vfiprintf_r+0x4c>
 8004460:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004462:	f7ff fd43 	bl	8003eec <__retarget_lock_release_recursive>
 8004466:	e7e9      	b.n	800443c <_vfiprintf_r+0x4c>
 8004468:	2300      	movs	r3, #0
 800446a:	9309      	str	r3, [sp, #36]	; 0x24
 800446c:	2320      	movs	r3, #32
 800446e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004472:	f8cd 800c 	str.w	r8, [sp, #12]
 8004476:	2330      	movs	r3, #48	; 0x30
 8004478:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800463c <_vfiprintf_r+0x24c>
 800447c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004480:	f04f 0901 	mov.w	r9, #1
 8004484:	4623      	mov	r3, r4
 8004486:	469a      	mov	sl, r3
 8004488:	f813 2b01 	ldrb.w	r2, [r3], #1
 800448c:	b10a      	cbz	r2, 8004492 <_vfiprintf_r+0xa2>
 800448e:	2a25      	cmp	r2, #37	; 0x25
 8004490:	d1f9      	bne.n	8004486 <_vfiprintf_r+0x96>
 8004492:	ebba 0b04 	subs.w	fp, sl, r4
 8004496:	d00b      	beq.n	80044b0 <_vfiprintf_r+0xc0>
 8004498:	465b      	mov	r3, fp
 800449a:	4622      	mov	r2, r4
 800449c:	4629      	mov	r1, r5
 800449e:	4630      	mov	r0, r6
 80044a0:	f7ff ff93 	bl	80043ca <__sfputs_r>
 80044a4:	3001      	adds	r0, #1
 80044a6:	f000 80aa 	beq.w	80045fe <_vfiprintf_r+0x20e>
 80044aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80044ac:	445a      	add	r2, fp
 80044ae:	9209      	str	r2, [sp, #36]	; 0x24
 80044b0:	f89a 3000 	ldrb.w	r3, [sl]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f000 80a2 	beq.w	80045fe <_vfiprintf_r+0x20e>
 80044ba:	2300      	movs	r3, #0
 80044bc:	f04f 32ff 	mov.w	r2, #4294967295
 80044c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80044c4:	f10a 0a01 	add.w	sl, sl, #1
 80044c8:	9304      	str	r3, [sp, #16]
 80044ca:	9307      	str	r3, [sp, #28]
 80044cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80044d0:	931a      	str	r3, [sp, #104]	; 0x68
 80044d2:	4654      	mov	r4, sl
 80044d4:	2205      	movs	r2, #5
 80044d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044da:	4858      	ldr	r0, [pc, #352]	; (800463c <_vfiprintf_r+0x24c>)
 80044dc:	f7fb fe90 	bl	8000200 <memchr>
 80044e0:	9a04      	ldr	r2, [sp, #16]
 80044e2:	b9d8      	cbnz	r0, 800451c <_vfiprintf_r+0x12c>
 80044e4:	06d1      	lsls	r1, r2, #27
 80044e6:	bf44      	itt	mi
 80044e8:	2320      	movmi	r3, #32
 80044ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044ee:	0713      	lsls	r3, r2, #28
 80044f0:	bf44      	itt	mi
 80044f2:	232b      	movmi	r3, #43	; 0x2b
 80044f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044f8:	f89a 3000 	ldrb.w	r3, [sl]
 80044fc:	2b2a      	cmp	r3, #42	; 0x2a
 80044fe:	d015      	beq.n	800452c <_vfiprintf_r+0x13c>
 8004500:	9a07      	ldr	r2, [sp, #28]
 8004502:	4654      	mov	r4, sl
 8004504:	2000      	movs	r0, #0
 8004506:	f04f 0c0a 	mov.w	ip, #10
 800450a:	4621      	mov	r1, r4
 800450c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004510:	3b30      	subs	r3, #48	; 0x30
 8004512:	2b09      	cmp	r3, #9
 8004514:	d94e      	bls.n	80045b4 <_vfiprintf_r+0x1c4>
 8004516:	b1b0      	cbz	r0, 8004546 <_vfiprintf_r+0x156>
 8004518:	9207      	str	r2, [sp, #28]
 800451a:	e014      	b.n	8004546 <_vfiprintf_r+0x156>
 800451c:	eba0 0308 	sub.w	r3, r0, r8
 8004520:	fa09 f303 	lsl.w	r3, r9, r3
 8004524:	4313      	orrs	r3, r2
 8004526:	9304      	str	r3, [sp, #16]
 8004528:	46a2      	mov	sl, r4
 800452a:	e7d2      	b.n	80044d2 <_vfiprintf_r+0xe2>
 800452c:	9b03      	ldr	r3, [sp, #12]
 800452e:	1d19      	adds	r1, r3, #4
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	9103      	str	r1, [sp, #12]
 8004534:	2b00      	cmp	r3, #0
 8004536:	bfbb      	ittet	lt
 8004538:	425b      	neglt	r3, r3
 800453a:	f042 0202 	orrlt.w	r2, r2, #2
 800453e:	9307      	strge	r3, [sp, #28]
 8004540:	9307      	strlt	r3, [sp, #28]
 8004542:	bfb8      	it	lt
 8004544:	9204      	strlt	r2, [sp, #16]
 8004546:	7823      	ldrb	r3, [r4, #0]
 8004548:	2b2e      	cmp	r3, #46	; 0x2e
 800454a:	d10c      	bne.n	8004566 <_vfiprintf_r+0x176>
 800454c:	7863      	ldrb	r3, [r4, #1]
 800454e:	2b2a      	cmp	r3, #42	; 0x2a
 8004550:	d135      	bne.n	80045be <_vfiprintf_r+0x1ce>
 8004552:	9b03      	ldr	r3, [sp, #12]
 8004554:	1d1a      	adds	r2, r3, #4
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	9203      	str	r2, [sp, #12]
 800455a:	2b00      	cmp	r3, #0
 800455c:	bfb8      	it	lt
 800455e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004562:	3402      	adds	r4, #2
 8004564:	9305      	str	r3, [sp, #20]
 8004566:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800464c <_vfiprintf_r+0x25c>
 800456a:	7821      	ldrb	r1, [r4, #0]
 800456c:	2203      	movs	r2, #3
 800456e:	4650      	mov	r0, sl
 8004570:	f7fb fe46 	bl	8000200 <memchr>
 8004574:	b140      	cbz	r0, 8004588 <_vfiprintf_r+0x198>
 8004576:	2340      	movs	r3, #64	; 0x40
 8004578:	eba0 000a 	sub.w	r0, r0, sl
 800457c:	fa03 f000 	lsl.w	r0, r3, r0
 8004580:	9b04      	ldr	r3, [sp, #16]
 8004582:	4303      	orrs	r3, r0
 8004584:	3401      	adds	r4, #1
 8004586:	9304      	str	r3, [sp, #16]
 8004588:	f814 1b01 	ldrb.w	r1, [r4], #1
 800458c:	482c      	ldr	r0, [pc, #176]	; (8004640 <_vfiprintf_r+0x250>)
 800458e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004592:	2206      	movs	r2, #6
 8004594:	f7fb fe34 	bl	8000200 <memchr>
 8004598:	2800      	cmp	r0, #0
 800459a:	d03f      	beq.n	800461c <_vfiprintf_r+0x22c>
 800459c:	4b29      	ldr	r3, [pc, #164]	; (8004644 <_vfiprintf_r+0x254>)
 800459e:	bb1b      	cbnz	r3, 80045e8 <_vfiprintf_r+0x1f8>
 80045a0:	9b03      	ldr	r3, [sp, #12]
 80045a2:	3307      	adds	r3, #7
 80045a4:	f023 0307 	bic.w	r3, r3, #7
 80045a8:	3308      	adds	r3, #8
 80045aa:	9303      	str	r3, [sp, #12]
 80045ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045ae:	443b      	add	r3, r7
 80045b0:	9309      	str	r3, [sp, #36]	; 0x24
 80045b2:	e767      	b.n	8004484 <_vfiprintf_r+0x94>
 80045b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80045b8:	460c      	mov	r4, r1
 80045ba:	2001      	movs	r0, #1
 80045bc:	e7a5      	b.n	800450a <_vfiprintf_r+0x11a>
 80045be:	2300      	movs	r3, #0
 80045c0:	3401      	adds	r4, #1
 80045c2:	9305      	str	r3, [sp, #20]
 80045c4:	4619      	mov	r1, r3
 80045c6:	f04f 0c0a 	mov.w	ip, #10
 80045ca:	4620      	mov	r0, r4
 80045cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045d0:	3a30      	subs	r2, #48	; 0x30
 80045d2:	2a09      	cmp	r2, #9
 80045d4:	d903      	bls.n	80045de <_vfiprintf_r+0x1ee>
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d0c5      	beq.n	8004566 <_vfiprintf_r+0x176>
 80045da:	9105      	str	r1, [sp, #20]
 80045dc:	e7c3      	b.n	8004566 <_vfiprintf_r+0x176>
 80045de:	fb0c 2101 	mla	r1, ip, r1, r2
 80045e2:	4604      	mov	r4, r0
 80045e4:	2301      	movs	r3, #1
 80045e6:	e7f0      	b.n	80045ca <_vfiprintf_r+0x1da>
 80045e8:	ab03      	add	r3, sp, #12
 80045ea:	9300      	str	r3, [sp, #0]
 80045ec:	462a      	mov	r2, r5
 80045ee:	4b16      	ldr	r3, [pc, #88]	; (8004648 <_vfiprintf_r+0x258>)
 80045f0:	a904      	add	r1, sp, #16
 80045f2:	4630      	mov	r0, r6
 80045f4:	f3af 8000 	nop.w
 80045f8:	4607      	mov	r7, r0
 80045fa:	1c78      	adds	r0, r7, #1
 80045fc:	d1d6      	bne.n	80045ac <_vfiprintf_r+0x1bc>
 80045fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004600:	07d9      	lsls	r1, r3, #31
 8004602:	d405      	bmi.n	8004610 <_vfiprintf_r+0x220>
 8004604:	89ab      	ldrh	r3, [r5, #12]
 8004606:	059a      	lsls	r2, r3, #22
 8004608:	d402      	bmi.n	8004610 <_vfiprintf_r+0x220>
 800460a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800460c:	f7ff fc6e 	bl	8003eec <__retarget_lock_release_recursive>
 8004610:	89ab      	ldrh	r3, [r5, #12]
 8004612:	065b      	lsls	r3, r3, #25
 8004614:	f53f af12 	bmi.w	800443c <_vfiprintf_r+0x4c>
 8004618:	9809      	ldr	r0, [sp, #36]	; 0x24
 800461a:	e711      	b.n	8004440 <_vfiprintf_r+0x50>
 800461c:	ab03      	add	r3, sp, #12
 800461e:	9300      	str	r3, [sp, #0]
 8004620:	462a      	mov	r2, r5
 8004622:	4b09      	ldr	r3, [pc, #36]	; (8004648 <_vfiprintf_r+0x258>)
 8004624:	a904      	add	r1, sp, #16
 8004626:	4630      	mov	r0, r6
 8004628:	f000 f880 	bl	800472c <_printf_i>
 800462c:	e7e4      	b.n	80045f8 <_vfiprintf_r+0x208>
 800462e:	bf00      	nop
 8004630:	08004ca4 	.word	0x08004ca4
 8004634:	08004cc4 	.word	0x08004cc4
 8004638:	08004c84 	.word	0x08004c84
 800463c:	08004ce8 	.word	0x08004ce8
 8004640:	08004cf2 	.word	0x08004cf2
 8004644:	00000000 	.word	0x00000000
 8004648:	080043cb 	.word	0x080043cb
 800464c:	08004cee 	.word	0x08004cee

08004650 <_printf_common>:
 8004650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004654:	4616      	mov	r6, r2
 8004656:	4699      	mov	r9, r3
 8004658:	688a      	ldr	r2, [r1, #8]
 800465a:	690b      	ldr	r3, [r1, #16]
 800465c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004660:	4293      	cmp	r3, r2
 8004662:	bfb8      	it	lt
 8004664:	4613      	movlt	r3, r2
 8004666:	6033      	str	r3, [r6, #0]
 8004668:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800466c:	4607      	mov	r7, r0
 800466e:	460c      	mov	r4, r1
 8004670:	b10a      	cbz	r2, 8004676 <_printf_common+0x26>
 8004672:	3301      	adds	r3, #1
 8004674:	6033      	str	r3, [r6, #0]
 8004676:	6823      	ldr	r3, [r4, #0]
 8004678:	0699      	lsls	r1, r3, #26
 800467a:	bf42      	ittt	mi
 800467c:	6833      	ldrmi	r3, [r6, #0]
 800467e:	3302      	addmi	r3, #2
 8004680:	6033      	strmi	r3, [r6, #0]
 8004682:	6825      	ldr	r5, [r4, #0]
 8004684:	f015 0506 	ands.w	r5, r5, #6
 8004688:	d106      	bne.n	8004698 <_printf_common+0x48>
 800468a:	f104 0a19 	add.w	sl, r4, #25
 800468e:	68e3      	ldr	r3, [r4, #12]
 8004690:	6832      	ldr	r2, [r6, #0]
 8004692:	1a9b      	subs	r3, r3, r2
 8004694:	42ab      	cmp	r3, r5
 8004696:	dc26      	bgt.n	80046e6 <_printf_common+0x96>
 8004698:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800469c:	1e13      	subs	r3, r2, #0
 800469e:	6822      	ldr	r2, [r4, #0]
 80046a0:	bf18      	it	ne
 80046a2:	2301      	movne	r3, #1
 80046a4:	0692      	lsls	r2, r2, #26
 80046a6:	d42b      	bmi.n	8004700 <_printf_common+0xb0>
 80046a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80046ac:	4649      	mov	r1, r9
 80046ae:	4638      	mov	r0, r7
 80046b0:	47c0      	blx	r8
 80046b2:	3001      	adds	r0, #1
 80046b4:	d01e      	beq.n	80046f4 <_printf_common+0xa4>
 80046b6:	6823      	ldr	r3, [r4, #0]
 80046b8:	68e5      	ldr	r5, [r4, #12]
 80046ba:	6832      	ldr	r2, [r6, #0]
 80046bc:	f003 0306 	and.w	r3, r3, #6
 80046c0:	2b04      	cmp	r3, #4
 80046c2:	bf08      	it	eq
 80046c4:	1aad      	subeq	r5, r5, r2
 80046c6:	68a3      	ldr	r3, [r4, #8]
 80046c8:	6922      	ldr	r2, [r4, #16]
 80046ca:	bf0c      	ite	eq
 80046cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046d0:	2500      	movne	r5, #0
 80046d2:	4293      	cmp	r3, r2
 80046d4:	bfc4      	itt	gt
 80046d6:	1a9b      	subgt	r3, r3, r2
 80046d8:	18ed      	addgt	r5, r5, r3
 80046da:	2600      	movs	r6, #0
 80046dc:	341a      	adds	r4, #26
 80046de:	42b5      	cmp	r5, r6
 80046e0:	d11a      	bne.n	8004718 <_printf_common+0xc8>
 80046e2:	2000      	movs	r0, #0
 80046e4:	e008      	b.n	80046f8 <_printf_common+0xa8>
 80046e6:	2301      	movs	r3, #1
 80046e8:	4652      	mov	r2, sl
 80046ea:	4649      	mov	r1, r9
 80046ec:	4638      	mov	r0, r7
 80046ee:	47c0      	blx	r8
 80046f0:	3001      	adds	r0, #1
 80046f2:	d103      	bne.n	80046fc <_printf_common+0xac>
 80046f4:	f04f 30ff 	mov.w	r0, #4294967295
 80046f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046fc:	3501      	adds	r5, #1
 80046fe:	e7c6      	b.n	800468e <_printf_common+0x3e>
 8004700:	18e1      	adds	r1, r4, r3
 8004702:	1c5a      	adds	r2, r3, #1
 8004704:	2030      	movs	r0, #48	; 0x30
 8004706:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800470a:	4422      	add	r2, r4
 800470c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004710:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004714:	3302      	adds	r3, #2
 8004716:	e7c7      	b.n	80046a8 <_printf_common+0x58>
 8004718:	2301      	movs	r3, #1
 800471a:	4622      	mov	r2, r4
 800471c:	4649      	mov	r1, r9
 800471e:	4638      	mov	r0, r7
 8004720:	47c0      	blx	r8
 8004722:	3001      	adds	r0, #1
 8004724:	d0e6      	beq.n	80046f4 <_printf_common+0xa4>
 8004726:	3601      	adds	r6, #1
 8004728:	e7d9      	b.n	80046de <_printf_common+0x8e>
	...

0800472c <_printf_i>:
 800472c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004730:	7e0f      	ldrb	r7, [r1, #24]
 8004732:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004734:	2f78      	cmp	r7, #120	; 0x78
 8004736:	4691      	mov	r9, r2
 8004738:	4680      	mov	r8, r0
 800473a:	460c      	mov	r4, r1
 800473c:	469a      	mov	sl, r3
 800473e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004742:	d807      	bhi.n	8004754 <_printf_i+0x28>
 8004744:	2f62      	cmp	r7, #98	; 0x62
 8004746:	d80a      	bhi.n	800475e <_printf_i+0x32>
 8004748:	2f00      	cmp	r7, #0
 800474a:	f000 80d8 	beq.w	80048fe <_printf_i+0x1d2>
 800474e:	2f58      	cmp	r7, #88	; 0x58
 8004750:	f000 80a3 	beq.w	800489a <_printf_i+0x16e>
 8004754:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004758:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800475c:	e03a      	b.n	80047d4 <_printf_i+0xa8>
 800475e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004762:	2b15      	cmp	r3, #21
 8004764:	d8f6      	bhi.n	8004754 <_printf_i+0x28>
 8004766:	a101      	add	r1, pc, #4	; (adr r1, 800476c <_printf_i+0x40>)
 8004768:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800476c:	080047c5 	.word	0x080047c5
 8004770:	080047d9 	.word	0x080047d9
 8004774:	08004755 	.word	0x08004755
 8004778:	08004755 	.word	0x08004755
 800477c:	08004755 	.word	0x08004755
 8004780:	08004755 	.word	0x08004755
 8004784:	080047d9 	.word	0x080047d9
 8004788:	08004755 	.word	0x08004755
 800478c:	08004755 	.word	0x08004755
 8004790:	08004755 	.word	0x08004755
 8004794:	08004755 	.word	0x08004755
 8004798:	080048e5 	.word	0x080048e5
 800479c:	08004809 	.word	0x08004809
 80047a0:	080048c7 	.word	0x080048c7
 80047a4:	08004755 	.word	0x08004755
 80047a8:	08004755 	.word	0x08004755
 80047ac:	08004907 	.word	0x08004907
 80047b0:	08004755 	.word	0x08004755
 80047b4:	08004809 	.word	0x08004809
 80047b8:	08004755 	.word	0x08004755
 80047bc:	08004755 	.word	0x08004755
 80047c0:	080048cf 	.word	0x080048cf
 80047c4:	682b      	ldr	r3, [r5, #0]
 80047c6:	1d1a      	adds	r2, r3, #4
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	602a      	str	r2, [r5, #0]
 80047cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047d4:	2301      	movs	r3, #1
 80047d6:	e0a3      	b.n	8004920 <_printf_i+0x1f4>
 80047d8:	6820      	ldr	r0, [r4, #0]
 80047da:	6829      	ldr	r1, [r5, #0]
 80047dc:	0606      	lsls	r6, r0, #24
 80047de:	f101 0304 	add.w	r3, r1, #4
 80047e2:	d50a      	bpl.n	80047fa <_printf_i+0xce>
 80047e4:	680e      	ldr	r6, [r1, #0]
 80047e6:	602b      	str	r3, [r5, #0]
 80047e8:	2e00      	cmp	r6, #0
 80047ea:	da03      	bge.n	80047f4 <_printf_i+0xc8>
 80047ec:	232d      	movs	r3, #45	; 0x2d
 80047ee:	4276      	negs	r6, r6
 80047f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047f4:	485e      	ldr	r0, [pc, #376]	; (8004970 <_printf_i+0x244>)
 80047f6:	230a      	movs	r3, #10
 80047f8:	e019      	b.n	800482e <_printf_i+0x102>
 80047fa:	680e      	ldr	r6, [r1, #0]
 80047fc:	602b      	str	r3, [r5, #0]
 80047fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004802:	bf18      	it	ne
 8004804:	b236      	sxthne	r6, r6
 8004806:	e7ef      	b.n	80047e8 <_printf_i+0xbc>
 8004808:	682b      	ldr	r3, [r5, #0]
 800480a:	6820      	ldr	r0, [r4, #0]
 800480c:	1d19      	adds	r1, r3, #4
 800480e:	6029      	str	r1, [r5, #0]
 8004810:	0601      	lsls	r1, r0, #24
 8004812:	d501      	bpl.n	8004818 <_printf_i+0xec>
 8004814:	681e      	ldr	r6, [r3, #0]
 8004816:	e002      	b.n	800481e <_printf_i+0xf2>
 8004818:	0646      	lsls	r6, r0, #25
 800481a:	d5fb      	bpl.n	8004814 <_printf_i+0xe8>
 800481c:	881e      	ldrh	r6, [r3, #0]
 800481e:	4854      	ldr	r0, [pc, #336]	; (8004970 <_printf_i+0x244>)
 8004820:	2f6f      	cmp	r7, #111	; 0x6f
 8004822:	bf0c      	ite	eq
 8004824:	2308      	moveq	r3, #8
 8004826:	230a      	movne	r3, #10
 8004828:	2100      	movs	r1, #0
 800482a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800482e:	6865      	ldr	r5, [r4, #4]
 8004830:	60a5      	str	r5, [r4, #8]
 8004832:	2d00      	cmp	r5, #0
 8004834:	bfa2      	ittt	ge
 8004836:	6821      	ldrge	r1, [r4, #0]
 8004838:	f021 0104 	bicge.w	r1, r1, #4
 800483c:	6021      	strge	r1, [r4, #0]
 800483e:	b90e      	cbnz	r6, 8004844 <_printf_i+0x118>
 8004840:	2d00      	cmp	r5, #0
 8004842:	d04d      	beq.n	80048e0 <_printf_i+0x1b4>
 8004844:	4615      	mov	r5, r2
 8004846:	fbb6 f1f3 	udiv	r1, r6, r3
 800484a:	fb03 6711 	mls	r7, r3, r1, r6
 800484e:	5dc7      	ldrb	r7, [r0, r7]
 8004850:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004854:	4637      	mov	r7, r6
 8004856:	42bb      	cmp	r3, r7
 8004858:	460e      	mov	r6, r1
 800485a:	d9f4      	bls.n	8004846 <_printf_i+0x11a>
 800485c:	2b08      	cmp	r3, #8
 800485e:	d10b      	bne.n	8004878 <_printf_i+0x14c>
 8004860:	6823      	ldr	r3, [r4, #0]
 8004862:	07de      	lsls	r6, r3, #31
 8004864:	d508      	bpl.n	8004878 <_printf_i+0x14c>
 8004866:	6923      	ldr	r3, [r4, #16]
 8004868:	6861      	ldr	r1, [r4, #4]
 800486a:	4299      	cmp	r1, r3
 800486c:	bfde      	ittt	le
 800486e:	2330      	movle	r3, #48	; 0x30
 8004870:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004874:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004878:	1b52      	subs	r2, r2, r5
 800487a:	6122      	str	r2, [r4, #16]
 800487c:	f8cd a000 	str.w	sl, [sp]
 8004880:	464b      	mov	r3, r9
 8004882:	aa03      	add	r2, sp, #12
 8004884:	4621      	mov	r1, r4
 8004886:	4640      	mov	r0, r8
 8004888:	f7ff fee2 	bl	8004650 <_printf_common>
 800488c:	3001      	adds	r0, #1
 800488e:	d14c      	bne.n	800492a <_printf_i+0x1fe>
 8004890:	f04f 30ff 	mov.w	r0, #4294967295
 8004894:	b004      	add	sp, #16
 8004896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800489a:	4835      	ldr	r0, [pc, #212]	; (8004970 <_printf_i+0x244>)
 800489c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80048a0:	6829      	ldr	r1, [r5, #0]
 80048a2:	6823      	ldr	r3, [r4, #0]
 80048a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80048a8:	6029      	str	r1, [r5, #0]
 80048aa:	061d      	lsls	r5, r3, #24
 80048ac:	d514      	bpl.n	80048d8 <_printf_i+0x1ac>
 80048ae:	07df      	lsls	r7, r3, #31
 80048b0:	bf44      	itt	mi
 80048b2:	f043 0320 	orrmi.w	r3, r3, #32
 80048b6:	6023      	strmi	r3, [r4, #0]
 80048b8:	b91e      	cbnz	r6, 80048c2 <_printf_i+0x196>
 80048ba:	6823      	ldr	r3, [r4, #0]
 80048bc:	f023 0320 	bic.w	r3, r3, #32
 80048c0:	6023      	str	r3, [r4, #0]
 80048c2:	2310      	movs	r3, #16
 80048c4:	e7b0      	b.n	8004828 <_printf_i+0xfc>
 80048c6:	6823      	ldr	r3, [r4, #0]
 80048c8:	f043 0320 	orr.w	r3, r3, #32
 80048cc:	6023      	str	r3, [r4, #0]
 80048ce:	2378      	movs	r3, #120	; 0x78
 80048d0:	4828      	ldr	r0, [pc, #160]	; (8004974 <_printf_i+0x248>)
 80048d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80048d6:	e7e3      	b.n	80048a0 <_printf_i+0x174>
 80048d8:	0659      	lsls	r1, r3, #25
 80048da:	bf48      	it	mi
 80048dc:	b2b6      	uxthmi	r6, r6
 80048de:	e7e6      	b.n	80048ae <_printf_i+0x182>
 80048e0:	4615      	mov	r5, r2
 80048e2:	e7bb      	b.n	800485c <_printf_i+0x130>
 80048e4:	682b      	ldr	r3, [r5, #0]
 80048e6:	6826      	ldr	r6, [r4, #0]
 80048e8:	6961      	ldr	r1, [r4, #20]
 80048ea:	1d18      	adds	r0, r3, #4
 80048ec:	6028      	str	r0, [r5, #0]
 80048ee:	0635      	lsls	r5, r6, #24
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	d501      	bpl.n	80048f8 <_printf_i+0x1cc>
 80048f4:	6019      	str	r1, [r3, #0]
 80048f6:	e002      	b.n	80048fe <_printf_i+0x1d2>
 80048f8:	0670      	lsls	r0, r6, #25
 80048fa:	d5fb      	bpl.n	80048f4 <_printf_i+0x1c8>
 80048fc:	8019      	strh	r1, [r3, #0]
 80048fe:	2300      	movs	r3, #0
 8004900:	6123      	str	r3, [r4, #16]
 8004902:	4615      	mov	r5, r2
 8004904:	e7ba      	b.n	800487c <_printf_i+0x150>
 8004906:	682b      	ldr	r3, [r5, #0]
 8004908:	1d1a      	adds	r2, r3, #4
 800490a:	602a      	str	r2, [r5, #0]
 800490c:	681d      	ldr	r5, [r3, #0]
 800490e:	6862      	ldr	r2, [r4, #4]
 8004910:	2100      	movs	r1, #0
 8004912:	4628      	mov	r0, r5
 8004914:	f7fb fc74 	bl	8000200 <memchr>
 8004918:	b108      	cbz	r0, 800491e <_printf_i+0x1f2>
 800491a:	1b40      	subs	r0, r0, r5
 800491c:	6060      	str	r0, [r4, #4]
 800491e:	6863      	ldr	r3, [r4, #4]
 8004920:	6123      	str	r3, [r4, #16]
 8004922:	2300      	movs	r3, #0
 8004924:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004928:	e7a8      	b.n	800487c <_printf_i+0x150>
 800492a:	6923      	ldr	r3, [r4, #16]
 800492c:	462a      	mov	r2, r5
 800492e:	4649      	mov	r1, r9
 8004930:	4640      	mov	r0, r8
 8004932:	47d0      	blx	sl
 8004934:	3001      	adds	r0, #1
 8004936:	d0ab      	beq.n	8004890 <_printf_i+0x164>
 8004938:	6823      	ldr	r3, [r4, #0]
 800493a:	079b      	lsls	r3, r3, #30
 800493c:	d413      	bmi.n	8004966 <_printf_i+0x23a>
 800493e:	68e0      	ldr	r0, [r4, #12]
 8004940:	9b03      	ldr	r3, [sp, #12]
 8004942:	4298      	cmp	r0, r3
 8004944:	bfb8      	it	lt
 8004946:	4618      	movlt	r0, r3
 8004948:	e7a4      	b.n	8004894 <_printf_i+0x168>
 800494a:	2301      	movs	r3, #1
 800494c:	4632      	mov	r2, r6
 800494e:	4649      	mov	r1, r9
 8004950:	4640      	mov	r0, r8
 8004952:	47d0      	blx	sl
 8004954:	3001      	adds	r0, #1
 8004956:	d09b      	beq.n	8004890 <_printf_i+0x164>
 8004958:	3501      	adds	r5, #1
 800495a:	68e3      	ldr	r3, [r4, #12]
 800495c:	9903      	ldr	r1, [sp, #12]
 800495e:	1a5b      	subs	r3, r3, r1
 8004960:	42ab      	cmp	r3, r5
 8004962:	dcf2      	bgt.n	800494a <_printf_i+0x21e>
 8004964:	e7eb      	b.n	800493e <_printf_i+0x212>
 8004966:	2500      	movs	r5, #0
 8004968:	f104 0619 	add.w	r6, r4, #25
 800496c:	e7f5      	b.n	800495a <_printf_i+0x22e>
 800496e:	bf00      	nop
 8004970:	08004cf9 	.word	0x08004cf9
 8004974:	08004d0a 	.word	0x08004d0a

08004978 <_read_r>:
 8004978:	b538      	push	{r3, r4, r5, lr}
 800497a:	4d07      	ldr	r5, [pc, #28]	; (8004998 <_read_r+0x20>)
 800497c:	4604      	mov	r4, r0
 800497e:	4608      	mov	r0, r1
 8004980:	4611      	mov	r1, r2
 8004982:	2200      	movs	r2, #0
 8004984:	602a      	str	r2, [r5, #0]
 8004986:	461a      	mov	r2, r3
 8004988:	f7fe ff29 	bl	80037de <_read>
 800498c:	1c43      	adds	r3, r0, #1
 800498e:	d102      	bne.n	8004996 <_read_r+0x1e>
 8004990:	682b      	ldr	r3, [r5, #0]
 8004992:	b103      	cbz	r3, 8004996 <_read_r+0x1e>
 8004994:	6023      	str	r3, [r4, #0]
 8004996:	bd38      	pop	{r3, r4, r5, pc}
 8004998:	2000025c 	.word	0x2000025c

0800499c <__swbuf_r>:
 800499c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800499e:	460e      	mov	r6, r1
 80049a0:	4614      	mov	r4, r2
 80049a2:	4605      	mov	r5, r0
 80049a4:	b118      	cbz	r0, 80049ae <__swbuf_r+0x12>
 80049a6:	6983      	ldr	r3, [r0, #24]
 80049a8:	b90b      	cbnz	r3, 80049ae <__swbuf_r+0x12>
 80049aa:	f7ff f9db 	bl	8003d64 <__sinit>
 80049ae:	4b21      	ldr	r3, [pc, #132]	; (8004a34 <__swbuf_r+0x98>)
 80049b0:	429c      	cmp	r4, r3
 80049b2:	d12b      	bne.n	8004a0c <__swbuf_r+0x70>
 80049b4:	686c      	ldr	r4, [r5, #4]
 80049b6:	69a3      	ldr	r3, [r4, #24]
 80049b8:	60a3      	str	r3, [r4, #8]
 80049ba:	89a3      	ldrh	r3, [r4, #12]
 80049bc:	071a      	lsls	r2, r3, #28
 80049be:	d52f      	bpl.n	8004a20 <__swbuf_r+0x84>
 80049c0:	6923      	ldr	r3, [r4, #16]
 80049c2:	b36b      	cbz	r3, 8004a20 <__swbuf_r+0x84>
 80049c4:	6923      	ldr	r3, [r4, #16]
 80049c6:	6820      	ldr	r0, [r4, #0]
 80049c8:	1ac0      	subs	r0, r0, r3
 80049ca:	6963      	ldr	r3, [r4, #20]
 80049cc:	b2f6      	uxtb	r6, r6
 80049ce:	4283      	cmp	r3, r0
 80049d0:	4637      	mov	r7, r6
 80049d2:	dc04      	bgt.n	80049de <__swbuf_r+0x42>
 80049d4:	4621      	mov	r1, r4
 80049d6:	4628      	mov	r0, r5
 80049d8:	f7ff fc3a 	bl	8004250 <_fflush_r>
 80049dc:	bb30      	cbnz	r0, 8004a2c <__swbuf_r+0x90>
 80049de:	68a3      	ldr	r3, [r4, #8]
 80049e0:	3b01      	subs	r3, #1
 80049e2:	60a3      	str	r3, [r4, #8]
 80049e4:	6823      	ldr	r3, [r4, #0]
 80049e6:	1c5a      	adds	r2, r3, #1
 80049e8:	6022      	str	r2, [r4, #0]
 80049ea:	701e      	strb	r6, [r3, #0]
 80049ec:	6963      	ldr	r3, [r4, #20]
 80049ee:	3001      	adds	r0, #1
 80049f0:	4283      	cmp	r3, r0
 80049f2:	d004      	beq.n	80049fe <__swbuf_r+0x62>
 80049f4:	89a3      	ldrh	r3, [r4, #12]
 80049f6:	07db      	lsls	r3, r3, #31
 80049f8:	d506      	bpl.n	8004a08 <__swbuf_r+0x6c>
 80049fa:	2e0a      	cmp	r6, #10
 80049fc:	d104      	bne.n	8004a08 <__swbuf_r+0x6c>
 80049fe:	4621      	mov	r1, r4
 8004a00:	4628      	mov	r0, r5
 8004a02:	f7ff fc25 	bl	8004250 <_fflush_r>
 8004a06:	b988      	cbnz	r0, 8004a2c <__swbuf_r+0x90>
 8004a08:	4638      	mov	r0, r7
 8004a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a0c:	4b0a      	ldr	r3, [pc, #40]	; (8004a38 <__swbuf_r+0x9c>)
 8004a0e:	429c      	cmp	r4, r3
 8004a10:	d101      	bne.n	8004a16 <__swbuf_r+0x7a>
 8004a12:	68ac      	ldr	r4, [r5, #8]
 8004a14:	e7cf      	b.n	80049b6 <__swbuf_r+0x1a>
 8004a16:	4b09      	ldr	r3, [pc, #36]	; (8004a3c <__swbuf_r+0xa0>)
 8004a18:	429c      	cmp	r4, r3
 8004a1a:	bf08      	it	eq
 8004a1c:	68ec      	ldreq	r4, [r5, #12]
 8004a1e:	e7ca      	b.n	80049b6 <__swbuf_r+0x1a>
 8004a20:	4621      	mov	r1, r4
 8004a22:	4628      	mov	r0, r5
 8004a24:	f000 f80c 	bl	8004a40 <__swsetup_r>
 8004a28:	2800      	cmp	r0, #0
 8004a2a:	d0cb      	beq.n	80049c4 <__swbuf_r+0x28>
 8004a2c:	f04f 37ff 	mov.w	r7, #4294967295
 8004a30:	e7ea      	b.n	8004a08 <__swbuf_r+0x6c>
 8004a32:	bf00      	nop
 8004a34:	08004ca4 	.word	0x08004ca4
 8004a38:	08004cc4 	.word	0x08004cc4
 8004a3c:	08004c84 	.word	0x08004c84

08004a40 <__swsetup_r>:
 8004a40:	4b32      	ldr	r3, [pc, #200]	; (8004b0c <__swsetup_r+0xcc>)
 8004a42:	b570      	push	{r4, r5, r6, lr}
 8004a44:	681d      	ldr	r5, [r3, #0]
 8004a46:	4606      	mov	r6, r0
 8004a48:	460c      	mov	r4, r1
 8004a4a:	b125      	cbz	r5, 8004a56 <__swsetup_r+0x16>
 8004a4c:	69ab      	ldr	r3, [r5, #24]
 8004a4e:	b913      	cbnz	r3, 8004a56 <__swsetup_r+0x16>
 8004a50:	4628      	mov	r0, r5
 8004a52:	f7ff f987 	bl	8003d64 <__sinit>
 8004a56:	4b2e      	ldr	r3, [pc, #184]	; (8004b10 <__swsetup_r+0xd0>)
 8004a58:	429c      	cmp	r4, r3
 8004a5a:	d10f      	bne.n	8004a7c <__swsetup_r+0x3c>
 8004a5c:	686c      	ldr	r4, [r5, #4]
 8004a5e:	89a3      	ldrh	r3, [r4, #12]
 8004a60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004a64:	0719      	lsls	r1, r3, #28
 8004a66:	d42c      	bmi.n	8004ac2 <__swsetup_r+0x82>
 8004a68:	06dd      	lsls	r5, r3, #27
 8004a6a:	d411      	bmi.n	8004a90 <__swsetup_r+0x50>
 8004a6c:	2309      	movs	r3, #9
 8004a6e:	6033      	str	r3, [r6, #0]
 8004a70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004a74:	81a3      	strh	r3, [r4, #12]
 8004a76:	f04f 30ff 	mov.w	r0, #4294967295
 8004a7a:	e03e      	b.n	8004afa <__swsetup_r+0xba>
 8004a7c:	4b25      	ldr	r3, [pc, #148]	; (8004b14 <__swsetup_r+0xd4>)
 8004a7e:	429c      	cmp	r4, r3
 8004a80:	d101      	bne.n	8004a86 <__swsetup_r+0x46>
 8004a82:	68ac      	ldr	r4, [r5, #8]
 8004a84:	e7eb      	b.n	8004a5e <__swsetup_r+0x1e>
 8004a86:	4b24      	ldr	r3, [pc, #144]	; (8004b18 <__swsetup_r+0xd8>)
 8004a88:	429c      	cmp	r4, r3
 8004a8a:	bf08      	it	eq
 8004a8c:	68ec      	ldreq	r4, [r5, #12]
 8004a8e:	e7e6      	b.n	8004a5e <__swsetup_r+0x1e>
 8004a90:	0758      	lsls	r0, r3, #29
 8004a92:	d512      	bpl.n	8004aba <__swsetup_r+0x7a>
 8004a94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a96:	b141      	cbz	r1, 8004aaa <__swsetup_r+0x6a>
 8004a98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a9c:	4299      	cmp	r1, r3
 8004a9e:	d002      	beq.n	8004aa6 <__swsetup_r+0x66>
 8004aa0:	4630      	mov	r0, r6
 8004aa2:	f7ff fc2f 	bl	8004304 <_free_r>
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	6363      	str	r3, [r4, #52]	; 0x34
 8004aaa:	89a3      	ldrh	r3, [r4, #12]
 8004aac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004ab0:	81a3      	strh	r3, [r4, #12]
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	6063      	str	r3, [r4, #4]
 8004ab6:	6923      	ldr	r3, [r4, #16]
 8004ab8:	6023      	str	r3, [r4, #0]
 8004aba:	89a3      	ldrh	r3, [r4, #12]
 8004abc:	f043 0308 	orr.w	r3, r3, #8
 8004ac0:	81a3      	strh	r3, [r4, #12]
 8004ac2:	6923      	ldr	r3, [r4, #16]
 8004ac4:	b94b      	cbnz	r3, 8004ada <__swsetup_r+0x9a>
 8004ac6:	89a3      	ldrh	r3, [r4, #12]
 8004ac8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004acc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ad0:	d003      	beq.n	8004ada <__swsetup_r+0x9a>
 8004ad2:	4621      	mov	r1, r4
 8004ad4:	4630      	mov	r0, r6
 8004ad6:	f000 f847 	bl	8004b68 <__smakebuf_r>
 8004ada:	89a0      	ldrh	r0, [r4, #12]
 8004adc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ae0:	f010 0301 	ands.w	r3, r0, #1
 8004ae4:	d00a      	beq.n	8004afc <__swsetup_r+0xbc>
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	60a3      	str	r3, [r4, #8]
 8004aea:	6963      	ldr	r3, [r4, #20]
 8004aec:	425b      	negs	r3, r3
 8004aee:	61a3      	str	r3, [r4, #24]
 8004af0:	6923      	ldr	r3, [r4, #16]
 8004af2:	b943      	cbnz	r3, 8004b06 <__swsetup_r+0xc6>
 8004af4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004af8:	d1ba      	bne.n	8004a70 <__swsetup_r+0x30>
 8004afa:	bd70      	pop	{r4, r5, r6, pc}
 8004afc:	0781      	lsls	r1, r0, #30
 8004afe:	bf58      	it	pl
 8004b00:	6963      	ldrpl	r3, [r4, #20]
 8004b02:	60a3      	str	r3, [r4, #8]
 8004b04:	e7f4      	b.n	8004af0 <__swsetup_r+0xb0>
 8004b06:	2000      	movs	r0, #0
 8004b08:	e7f7      	b.n	8004afa <__swsetup_r+0xba>
 8004b0a:	bf00      	nop
 8004b0c:	20000014 	.word	0x20000014
 8004b10:	08004ca4 	.word	0x08004ca4
 8004b14:	08004cc4 	.word	0x08004cc4
 8004b18:	08004c84 	.word	0x08004c84

08004b1c <__swhatbuf_r>:
 8004b1c:	b570      	push	{r4, r5, r6, lr}
 8004b1e:	460e      	mov	r6, r1
 8004b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b24:	2900      	cmp	r1, #0
 8004b26:	b096      	sub	sp, #88	; 0x58
 8004b28:	4614      	mov	r4, r2
 8004b2a:	461d      	mov	r5, r3
 8004b2c:	da08      	bge.n	8004b40 <__swhatbuf_r+0x24>
 8004b2e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	602a      	str	r2, [r5, #0]
 8004b36:	061a      	lsls	r2, r3, #24
 8004b38:	d410      	bmi.n	8004b5c <__swhatbuf_r+0x40>
 8004b3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b3e:	e00e      	b.n	8004b5e <__swhatbuf_r+0x42>
 8004b40:	466a      	mov	r2, sp
 8004b42:	f000 f851 	bl	8004be8 <_fstat_r>
 8004b46:	2800      	cmp	r0, #0
 8004b48:	dbf1      	blt.n	8004b2e <__swhatbuf_r+0x12>
 8004b4a:	9a01      	ldr	r2, [sp, #4]
 8004b4c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004b50:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004b54:	425a      	negs	r2, r3
 8004b56:	415a      	adcs	r2, r3
 8004b58:	602a      	str	r2, [r5, #0]
 8004b5a:	e7ee      	b.n	8004b3a <__swhatbuf_r+0x1e>
 8004b5c:	2340      	movs	r3, #64	; 0x40
 8004b5e:	2000      	movs	r0, #0
 8004b60:	6023      	str	r3, [r4, #0]
 8004b62:	b016      	add	sp, #88	; 0x58
 8004b64:	bd70      	pop	{r4, r5, r6, pc}
	...

08004b68 <__smakebuf_r>:
 8004b68:	898b      	ldrh	r3, [r1, #12]
 8004b6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004b6c:	079d      	lsls	r5, r3, #30
 8004b6e:	4606      	mov	r6, r0
 8004b70:	460c      	mov	r4, r1
 8004b72:	d507      	bpl.n	8004b84 <__smakebuf_r+0x1c>
 8004b74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004b78:	6023      	str	r3, [r4, #0]
 8004b7a:	6123      	str	r3, [r4, #16]
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	6163      	str	r3, [r4, #20]
 8004b80:	b002      	add	sp, #8
 8004b82:	bd70      	pop	{r4, r5, r6, pc}
 8004b84:	ab01      	add	r3, sp, #4
 8004b86:	466a      	mov	r2, sp
 8004b88:	f7ff ffc8 	bl	8004b1c <__swhatbuf_r>
 8004b8c:	9900      	ldr	r1, [sp, #0]
 8004b8e:	4605      	mov	r5, r0
 8004b90:	4630      	mov	r0, r6
 8004b92:	f7ff f9d5 	bl	8003f40 <_malloc_r>
 8004b96:	b948      	cbnz	r0, 8004bac <__smakebuf_r+0x44>
 8004b98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b9c:	059a      	lsls	r2, r3, #22
 8004b9e:	d4ef      	bmi.n	8004b80 <__smakebuf_r+0x18>
 8004ba0:	f023 0303 	bic.w	r3, r3, #3
 8004ba4:	f043 0302 	orr.w	r3, r3, #2
 8004ba8:	81a3      	strh	r3, [r4, #12]
 8004baa:	e7e3      	b.n	8004b74 <__smakebuf_r+0xc>
 8004bac:	4b0d      	ldr	r3, [pc, #52]	; (8004be4 <__smakebuf_r+0x7c>)
 8004bae:	62b3      	str	r3, [r6, #40]	; 0x28
 8004bb0:	89a3      	ldrh	r3, [r4, #12]
 8004bb2:	6020      	str	r0, [r4, #0]
 8004bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bb8:	81a3      	strh	r3, [r4, #12]
 8004bba:	9b00      	ldr	r3, [sp, #0]
 8004bbc:	6163      	str	r3, [r4, #20]
 8004bbe:	9b01      	ldr	r3, [sp, #4]
 8004bc0:	6120      	str	r0, [r4, #16]
 8004bc2:	b15b      	cbz	r3, 8004bdc <__smakebuf_r+0x74>
 8004bc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004bc8:	4630      	mov	r0, r6
 8004bca:	f000 f81f 	bl	8004c0c <_isatty_r>
 8004bce:	b128      	cbz	r0, 8004bdc <__smakebuf_r+0x74>
 8004bd0:	89a3      	ldrh	r3, [r4, #12]
 8004bd2:	f023 0303 	bic.w	r3, r3, #3
 8004bd6:	f043 0301 	orr.w	r3, r3, #1
 8004bda:	81a3      	strh	r3, [r4, #12]
 8004bdc:	89a0      	ldrh	r0, [r4, #12]
 8004bde:	4305      	orrs	r5, r0
 8004be0:	81a5      	strh	r5, [r4, #12]
 8004be2:	e7cd      	b.n	8004b80 <__smakebuf_r+0x18>
 8004be4:	08003cfd 	.word	0x08003cfd

08004be8 <_fstat_r>:
 8004be8:	b538      	push	{r3, r4, r5, lr}
 8004bea:	4d07      	ldr	r5, [pc, #28]	; (8004c08 <_fstat_r+0x20>)
 8004bec:	2300      	movs	r3, #0
 8004bee:	4604      	mov	r4, r0
 8004bf0:	4608      	mov	r0, r1
 8004bf2:	4611      	mov	r1, r2
 8004bf4:	602b      	str	r3, [r5, #0]
 8004bf6:	f7fe fed4 	bl	80039a2 <_fstat>
 8004bfa:	1c43      	adds	r3, r0, #1
 8004bfc:	d102      	bne.n	8004c04 <_fstat_r+0x1c>
 8004bfe:	682b      	ldr	r3, [r5, #0]
 8004c00:	b103      	cbz	r3, 8004c04 <_fstat_r+0x1c>
 8004c02:	6023      	str	r3, [r4, #0]
 8004c04:	bd38      	pop	{r3, r4, r5, pc}
 8004c06:	bf00      	nop
 8004c08:	2000025c 	.word	0x2000025c

08004c0c <_isatty_r>:
 8004c0c:	b538      	push	{r3, r4, r5, lr}
 8004c0e:	4d06      	ldr	r5, [pc, #24]	; (8004c28 <_isatty_r+0x1c>)
 8004c10:	2300      	movs	r3, #0
 8004c12:	4604      	mov	r4, r0
 8004c14:	4608      	mov	r0, r1
 8004c16:	602b      	str	r3, [r5, #0]
 8004c18:	f7ff f82a 	bl	8003c70 <_isatty>
 8004c1c:	1c43      	adds	r3, r0, #1
 8004c1e:	d102      	bne.n	8004c26 <_isatty_r+0x1a>
 8004c20:	682b      	ldr	r3, [r5, #0]
 8004c22:	b103      	cbz	r3, 8004c26 <_isatty_r+0x1a>
 8004c24:	6023      	str	r3, [r4, #0]
 8004c26:	bd38      	pop	{r3, r4, r5, pc}
 8004c28:	2000025c 	.word	0x2000025c

08004c2c <_init>:
 8004c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c2e:	bf00      	nop
 8004c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c32:	bc08      	pop	{r3}
 8004c34:	469e      	mov	lr, r3
 8004c36:	4770      	bx	lr

08004c38 <_fini>:
 8004c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c3a:	bf00      	nop
 8004c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c3e:	bc08      	pop	{r3}
 8004c40:	469e      	mov	lr, r3
 8004c42:	4770      	bx	lr
